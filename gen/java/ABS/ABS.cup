// -*- Java -*- This Cup file was machine-generated by BNFC
package ABS;

parser code {:
  public ABS.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (ABS.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal ABS.Absyn.AnyIdent AnyIdent;
nonterminal ABS.Absyn.ListAnyIdent ListAnyIdent;
nonterminal ABS.Absyn.Program Program;
nonterminal ABS.Absyn.ListModule ListModule;
nonterminal ABS.Absyn.Module Module;
nonterminal ABS.Absyn.Export Export;
nonterminal ABS.Absyn.ListExport ListExport;
nonterminal ABS.Absyn.Import Import;
nonterminal ABS.Absyn.ListImport ListImport;
nonterminal ABS.Absyn.ImportType ImportType;
nonterminal ABS.Absyn.Type Type;
nonterminal ABS.Absyn.ListType ListType;
nonterminal ABS.Absyn.ListQType ListQType;
nonterminal ABS.Absyn.QType QType;
nonterminal ABS.Absyn.QTypeSegment QTypeSegment;
nonterminal ABS.Absyn.ListQTypeSegment ListQTypeSegment;
nonterminal ABS.Absyn.TType TType;
nonterminal ABS.Absyn.TTypeSegment TTypeSegment;
nonterminal ABS.Absyn.ListTTypeSegment ListTTypeSegment;
nonterminal ABS.Absyn.ListDecl ListDecl;
nonterminal ABS.Absyn.Decl Decl;
nonterminal ABS.Absyn.ConstrIdent ConstrIdent;
nonterminal ABS.Absyn.ConstrType ConstrType;
nonterminal ABS.Absyn.ListConstrType ListConstrType;
nonterminal ABS.Absyn.ListUIdent ListUIdent;
nonterminal ABS.Absyn.ListConstrIdent ListConstrIdent;
nonterminal ABS.Absyn.FunBody FunBody;
nonterminal ABS.Absyn.MethSignat MethSignat;
nonterminal ABS.Absyn.ListMethSignat ListMethSignat;
nonterminal ABS.Absyn.ClassBody ClassBody;
nonterminal ABS.Absyn.ListClassBody ListClassBody;
nonterminal ABS.Absyn.Block Block;
nonterminal ABS.Absyn.MaybeBlock MaybeBlock;
nonterminal ABS.Absyn.ListParam ListParam;
nonterminal ABS.Absyn.Param Param;
nonterminal ABS.Absyn.ListStm ListStm;
nonterminal ABS.Absyn.Stm Stm;
nonterminal ABS.Absyn.CatchBranch CatchBranch;
nonterminal ABS.Absyn.ListCatchBranch ListCatchBranch;
nonterminal ABS.Absyn.MaybeFinally MaybeFinally;
nonterminal ABS.Absyn.Guard Guard;
nonterminal ABS.Absyn.Exp Exp;
nonterminal ABS.Absyn.ListPureExp ListPureExp;
nonterminal ABS.Absyn.PureExp PureExp;
nonterminal ABS.Absyn.PureExp PureExp1;
nonterminal ABS.Absyn.PureExp PureExp2;
nonterminal ABS.Absyn.PureExp PureExp3;
nonterminal ABS.Absyn.PureExp PureExp4;
nonterminal ABS.Absyn.PureExp PureExp5;
nonterminal ABS.Absyn.PureExp PureExp6;
nonterminal ABS.Absyn.PureExp PureExp7;
nonterminal ABS.Absyn.CaseBranch CaseBranch;
nonterminal ABS.Absyn.ListCaseBranch ListCaseBranch;
nonterminal ABS.Absyn.ListPattern ListPattern;
nonterminal ABS.Absyn.Pattern Pattern;
nonterminal ABS.Absyn.Literal Literal;
nonterminal ABS.Absyn.EffExp EffExp;
nonterminal ABS.Absyn.Ann Ann;
nonterminal ABS.Absyn.ListAnn ListAnn;
nonterminal ABS.Absyn.AnnDecl AnnDecl;
nonterminal ABS.Absyn.ListAnnDecl ListAnnDecl;
nonterminal ABS.Absyn.AnnType AnnType;
nonterminal ABS.Absyn.ListAnnType ListAnnType;

terminal _SYMB_0;    //   ,
terminal _SYMB_1;    //   ;
terminal _SYMB_2;    //   *
terminal _SYMB_3;    //   _
terminal _SYMB_4;    //   <
terminal _SYMB_5;    //   >
terminal _SYMB_6;    //   .
terminal _SYMB_7;    //   =
terminal _SYMB_8;    //   (
terminal _SYMB_9;    //   )
terminal _SYMB_10;    //   |
terminal _SYMB_11;    //   {
terminal _SYMB_12;    //   }
terminal _SYMB_13;    //   =>
terminal _SYMB_14;    //   ?
terminal _SYMB_15;    //   &
terminal _SYMB_16;    //   ||
terminal _SYMB_17;    //   &&
terminal _SYMB_18;    //   ==
terminal _SYMB_19;    //   !=
terminal _SYMB_20;    //   <=
terminal _SYMB_21;    //   >=
terminal _SYMB_22;    //   +
terminal _SYMB_23;    //   -
terminal _SYMB_24;    //   /
terminal _SYMB_25;    //   %
terminal _SYMB_26;    //   ~
terminal _SYMB_27;    //   [
terminal _SYMB_28;    //   ]
terminal _SYMB_29;    //   !
terminal _SYMB_30;    //   assert
terminal _SYMB_31;    //   await
terminal _SYMB_32;    //   builtin
terminal _SYMB_33;    //   case
terminal _SYMB_34;    //   catch
terminal _SYMB_35;    //   class
terminal _SYMB_36;    //   data
terminal _SYMB_37;    //   def
terminal _SYMB_38;    //   else
terminal _SYMB_39;    //   exception
terminal _SYMB_40;    //   export
terminal _SYMB_41;    //   extends
terminal _SYMB_42;    //   fimport
terminal _SYMB_43;    //   finally
terminal _SYMB_44;    //   from
terminal _SYMB_45;    //   get
terminal _SYMB_46;    //   if
terminal _SYMB_47;    //   implements
terminal _SYMB_48;    //   import
terminal _SYMB_49;    //   in
terminal _SYMB_50;    //   interface
terminal _SYMB_51;    //   let
terminal _SYMB_52;    //   local
terminal _SYMB_53;    //   module
terminal _SYMB_54;    //   new
terminal _SYMB_55;    //   null
terminal _SYMB_56;    //   println
terminal _SYMB_57;    //   return
terminal _SYMB_58;    //   skip
terminal _SYMB_59;    //   spawns
terminal _SYMB_60;    //   suspend
terminal _SYMB_61;    //   then
terminal _SYMB_62;    //   this
terminal _SYMB_63;    //   thisDC
terminal _SYMB_64;    //   throw
terminal _SYMB_65;    //   try
terminal _SYMB_66;    //   type
terminal _SYMB_67;    //   while

terminal String _STRING_;

terminal Integer _INTEGER_;



terminal String UIdent;
terminal String LIdent;


start with Program;


AnyIdent ::= LIdent:p_1  {: RESULT = new ABS.Absyn.AnyIden(p_1); :} 
  | UIdent:p_1  {: RESULT = new ABS.Absyn.AnyTyIden(p_1); :}
;
ListAnyIdent ::= AnyIdent:p_1  {: RESULT = new ABS.Absyn.ListAnyIdent(); RESULT.addLast(p_1); :} 
  | AnyIdent:p_1 _SYMB_0 ListAnyIdent:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Program ::= ListModule:p_1  {: RESULT = new ABS.Absyn.Prog(p_1); :} 
;
ListModule ::=  /* empty */  {: RESULT = new ABS.Absyn.ListModule(); :} 
  | ListModule:p_1 Module:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Module ::= _SYMB_53 QType:p_2 _SYMB_1 ListExport:p_4 ListImport:p_5 ListDecl:p_6 MaybeBlock:p_7  {: RESULT = new ABS.Absyn.Modul(p_2,p_4,p_5,p_6,p_7); :} 
;
Export ::= _SYMB_40 ListAnyIdent:p_2  {: RESULT = new ABS.Absyn.AnyExport(p_2); :} 
  | _SYMB_40 ListAnyIdent:p_2 _SYMB_44 QType:p_4  {: RESULT = new ABS.Absyn.AnyFromExport(p_2,p_4); :}
  | _SYMB_40 _SYMB_2  {: RESULT = new ABS.Absyn.StarExport(); :}
  | _SYMB_40 _SYMB_2 _SYMB_44 QType:p_4  {: RESULT = new ABS.Absyn.StarFromExport(p_4); :}
;
ListExport ::=  /* empty */  {: RESULT = new ABS.Absyn.ListExport(); :} 
  | ListExport:p_1 Export:p_2 _SYMB_1  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Import ::= ImportType:p_1 TType:p_2 AnyIdent:p_3  {: RESULT = new ABS.Absyn.AnyImport(p_1,p_2,p_3); :} 
  | ImportType:p_1 ListAnyIdent:p_2 _SYMB_44 QType:p_4  {: RESULT = new ABS.Absyn.AnyFromImport(p_1,p_2,p_4); :}
  | ImportType:p_1 _SYMB_2 _SYMB_44 QType:p_4  {: RESULT = new ABS.Absyn.StarFromImport(p_1,p_4); :}
;
ListImport ::=  /* empty */  {: RESULT = new ABS.Absyn.ListImport(); :} 
  | ListImport:p_1 Import:p_2 _SYMB_1  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ImportType ::= _SYMB_42  {: RESULT = new ABS.Absyn.ForeignImport(); :} 
  | _SYMB_48  {: RESULT = new ABS.Absyn.NormalImport(); :}
;
Type ::= _SYMB_3  {: RESULT = new ABS.Absyn.TUnderscore(); :} 
  | QType:p_1  {: RESULT = new ABS.Absyn.TSimple(p_1); :}
  | QType:p_1 _SYMB_4 ListType:p_3 _SYMB_5  {: RESULT = new ABS.Absyn.TGen(p_1,p_3); :}
;
ListType ::= Type:p_1  {: RESULT = new ABS.Absyn.ListType(); RESULT.addLast(p_1); :} 
  | Type:p_1 _SYMB_0 ListType:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListQType ::= QType:p_1  {: RESULT = new ABS.Absyn.ListQType(); RESULT.addLast(p_1); :} 
  | QType:p_1 _SYMB_0 ListQType:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
QType ::= ListQTypeSegment:p_1  {: RESULT = new ABS.Absyn.QTyp(p_1); :} 
;
QTypeSegment ::= UIdent:p_1  {: RESULT = new ABS.Absyn.QTypeSegmen(p_1); :} 
;
ListQTypeSegment ::= QTypeSegment:p_1  {: RESULT = new ABS.Absyn.ListQTypeSegment(); RESULT.addLast(p_1); :} 
  | QTypeSegment:p_1 _SYMB_6 ListQTypeSegment:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
TType ::= ListTTypeSegment:p_1  {: RESULT = new ABS.Absyn.TTyp(p_1); :} 
;
TTypeSegment ::= UIdent:p_1  {: RESULT = new ABS.Absyn.TTypeSegmen(p_1); :} 
;
ListTTypeSegment ::= TTypeSegment:p_1 _SYMB_6  {: RESULT = new ABS.Absyn.ListTTypeSegment(); RESULT.addLast(p_1); :} 
  | TTypeSegment:p_1 _SYMB_6 ListTTypeSegment:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListDecl ::=  /* empty */  {: RESULT = new ABS.Absyn.ListDecl(); :} 
  | ListDecl:p_1 Decl:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Decl ::= _SYMB_66 UIdent:p_2 _SYMB_7 Type:p_4 _SYMB_1  {: RESULT = new ABS.Absyn.TypeDecl(p_2,p_4); :} 
  | _SYMB_66 UIdent:p_2 _SYMB_4 ListUIdent:p_4 _SYMB_5 _SYMB_7 Type:p_7 _SYMB_1  {: RESULT = new ABS.Absyn.TypeParDecl(p_2,p_4,p_7); :}
  | _SYMB_39 ConstrIdent:p_2 _SYMB_1  {: RESULT = new ABS.Absyn.ExceptionDecl(p_2); :}
  | _SYMB_36 UIdent:p_2 _SYMB_7 ListConstrIdent:p_4 _SYMB_1  {: RESULT = new ABS.Absyn.DataDecl(p_2,p_4); :}
  | _SYMB_36 UIdent:p_2 _SYMB_4 ListUIdent:p_4 _SYMB_5 _SYMB_7 ListConstrIdent:p_7 _SYMB_1  {: RESULT = new ABS.Absyn.DataParDecl(p_2,p_4,p_7); :}
  | _SYMB_37 Type:p_2 LIdent:p_3 _SYMB_8 ListParam:p_5 _SYMB_9 _SYMB_7 FunBody:p_8 _SYMB_1  {: RESULT = new ABS.Absyn.FunDecl(p_2,p_3,p_5,p_8); :}
  | _SYMB_37 Type:p_2 LIdent:p_3 _SYMB_4 ListUIdent:p_5 _SYMB_5 _SYMB_8 ListParam:p_8 _SYMB_9 _SYMB_7 FunBody:p_11 _SYMB_1  {: RESULT = new ABS.Absyn.FunParDecl(p_2,p_3,p_5,p_8,p_11); :}
  | _SYMB_50 UIdent:p_2 _SYMB_11 ListMethSignat:p_4 _SYMB_12  {: RESULT = new ABS.Absyn.InterfDecl(p_2,p_4); :}
  | _SYMB_50 UIdent:p_2 _SYMB_41 ListQType:p_4 _SYMB_11 ListMethSignat:p_6 _SYMB_12  {: RESULT = new ABS.Absyn.ExtendsDecl(p_2,p_4,p_6); :}
  | _SYMB_35 UIdent:p_2 _SYMB_11 ListClassBody:p_4 MaybeBlock:p_5 ListClassBody:p_6 _SYMB_12  {: RESULT = new ABS.Absyn.ClassDecl(p_2,p_4,p_5,p_6); :}
  | _SYMB_35 UIdent:p_2 _SYMB_8 ListParam:p_4 _SYMB_9 _SYMB_11 ListClassBody:p_7 MaybeBlock:p_8 ListClassBody:p_9 _SYMB_12  {: RESULT = new ABS.Absyn.ClassParamDecl(p_2,p_4,p_7,p_8,p_9); :}
  | _SYMB_35 UIdent:p_2 _SYMB_47 ListQType:p_4 _SYMB_11 ListClassBody:p_6 MaybeBlock:p_7 ListClassBody:p_8 _SYMB_12  {: RESULT = new ABS.Absyn.ClassImplements(p_2,p_4,p_6,p_7,p_8); :}
  | _SYMB_35 UIdent:p_2 _SYMB_8 ListParam:p_4 _SYMB_9 _SYMB_47 ListQType:p_7 _SYMB_11 ListClassBody:p_9 MaybeBlock:p_10 ListClassBody:p_11 _SYMB_12  {: RESULT = new ABS.Absyn.ClassParamImplements(p_2,p_4,p_7,p_9,p_10,p_11); :}
;
ConstrIdent ::= UIdent:p_1  {: RESULT = new ABS.Absyn.SinglConstrIdent(p_1); :} 
  | UIdent:p_1 _SYMB_8 ListConstrType:p_3 _SYMB_9  {: RESULT = new ABS.Absyn.ParamConstrIdent(p_1,p_3); :}
;
ConstrType ::= Type:p_1  {: RESULT = new ABS.Absyn.EmptyConstrType(p_1); :} 
  | Type:p_1 LIdent:p_2  {: RESULT = new ABS.Absyn.RecordConstrType(p_1,p_2); :}
;
ListConstrType ::=  /* empty */  {: RESULT = new ABS.Absyn.ListConstrType(); :} 
  | ConstrType:p_1  {: RESULT = new ABS.Absyn.ListConstrType(); RESULT.addLast(p_1); :}
  | ConstrType:p_1 _SYMB_0 ListConstrType:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListUIdent ::= UIdent:p_1  {: RESULT = new ABS.Absyn.ListUIdent(); RESULT.addLast(p_1); :} 
  | UIdent:p_1 _SYMB_0 ListUIdent:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListConstrIdent ::= ConstrIdent:p_1  {: RESULT = new ABS.Absyn.ListConstrIdent(); RESULT.addLast(p_1); :} 
  | ConstrIdent:p_1 _SYMB_10 ListConstrIdent:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
FunBody ::= _SYMB_32  {: RESULT = new ABS.Absyn.BuiltinFunBody(); :} 
  | PureExp:p_1  {: RESULT = new ABS.Absyn.NormalFunBody(p_1); :}
;
MethSignat ::= Type:p_1 LIdent:p_2 _SYMB_8 ListParam:p_4 _SYMB_9  {: RESULT = new ABS.Absyn.MethSig(p_1,p_2,p_4); :} 
;
ListMethSignat ::=  /* empty */  {: RESULT = new ABS.Absyn.ListMethSignat(); :} 
  | ListMethSignat:p_1 MethSignat:p_2 _SYMB_1  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ClassBody ::= Type:p_1 LIdent:p_2 _SYMB_1  {: RESULT = new ABS.Absyn.FieldClassBody(p_1,p_2); :} 
  | Type:p_1 LIdent:p_2 _SYMB_7 PureExp:p_4 _SYMB_1  {: RESULT = new ABS.Absyn.FieldAssignClassBody(p_1,p_2,p_4); :}
  | Type:p_1 LIdent:p_2 _SYMB_8 ListParam:p_4 _SYMB_9 Block:p_6  {: RESULT = new ABS.Absyn.MethClassBody(p_1,p_2,p_4,p_6); :}
;
ListClassBody ::=  /* empty */  {: RESULT = new ABS.Absyn.ListClassBody(); :} 
  | ListClassBody:p_1 ClassBody:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Block ::= _SYMB_11 ListStm:p_2 _SYMB_12  {: RESULT = new ABS.Absyn.Bloc(p_2); :} 
;
MaybeBlock ::= Block:p_1  {: RESULT = new ABS.Absyn.JustBlock(p_1); :} 
  |  /* empty */  {: RESULT = new ABS.Absyn.NoBlock(); :}
;
ListParam ::=  /* empty */  {: RESULT = new ABS.Absyn.ListParam(); :} 
  | Param:p_1  {: RESULT = new ABS.Absyn.ListParam(); RESULT.addLast(p_1); :}
  | Param:p_1 _SYMB_0 ListParam:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Param ::= Type:p_1 LIdent:p_2  {: RESULT = new ABS.Absyn.Par(p_1,p_2); :} 
;
ListStm ::=  /* empty */  {: RESULT = new ABS.Absyn.ListStm(); :} 
  | ListStm:p_1 Stm:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Stm ::= Exp:p_1 _SYMB_1  {: RESULT = new ABS.Absyn.SExp(p_1); :} 
  | _SYMB_11 ListStm:p_2 _SYMB_12  {: RESULT = new ABS.Absyn.SBlock(p_2); :}
  | _SYMB_67 _SYMB_8 PureExp:p_3 _SYMB_9 Stm:p_5  {: RESULT = new ABS.Absyn.SWhile(p_3,p_5); :}
  | _SYMB_57 Exp:p_2 _SYMB_1  {: RESULT = new ABS.Absyn.SReturn(p_2); :}
  | LIdent:p_1 _SYMB_7 Exp:p_3 _SYMB_1  {: RESULT = new ABS.Absyn.SAss(p_1,p_3); :}
  | _SYMB_62 _SYMB_6 LIdent:p_3 _SYMB_7 Exp:p_5 _SYMB_1  {: RESULT = new ABS.Absyn.SFieldAss(p_3,p_5); :}
  | Type:p_1 LIdent:p_2 _SYMB_1  {: RESULT = new ABS.Absyn.SDec(p_1,p_2); :}
  | Type:p_1 LIdent:p_2 _SYMB_7 Exp:p_4 _SYMB_1  {: RESULT = new ABS.Absyn.SDecAss(p_1,p_2,p_4); :}
  | _SYMB_46 _SYMB_8 PureExp:p_3 _SYMB_9 Stm:p_5  {: RESULT = new ABS.Absyn.SIf(p_3,p_5); :}
  | _SYMB_46 _SYMB_8 PureExp:p_3 _SYMB_9 Stm:p_5 _SYMB_38 Stm:p_7  {: RESULT = new ABS.Absyn.SIfElse(p_3,p_5,p_7); :}
  | _SYMB_60 _SYMB_1  {: RESULT = new ABS.Absyn.SSuspend(); :}
  | _SYMB_58 _SYMB_1  {: RESULT = new ABS.Absyn.SSkip(); :}
  | _SYMB_30 PureExp:p_2 _SYMB_1  {: RESULT = new ABS.Absyn.SAssert(p_2); :}
  | _SYMB_31 Guard:p_2 _SYMB_1  {: RESULT = new ABS.Absyn.SAwait(p_2); :}
  | _SYMB_64 PureExp:p_2 _SYMB_1  {: RESULT = new ABS.Absyn.SThrow(p_2); :}
  | _SYMB_65 Stm:p_2 _SYMB_34 _SYMB_11 ListCatchBranch:p_5 _SYMB_12 MaybeFinally:p_7  {: RESULT = new ABS.Absyn.STryCatchFinally(p_2,p_5,p_7); :}
  | _SYMB_56 PureExp:p_2 _SYMB_1  {: RESULT = new ABS.Absyn.SPrint(p_2); :}
;
CatchBranch ::= Pattern:p_1 _SYMB_13 Stm:p_3  {: RESULT = new ABS.Absyn.CatchBranc(p_1,p_3); :} 
;
ListCatchBranch ::=  /* empty */  {: RESULT = new ABS.Absyn.ListCatchBranch(); :} 
  | ListCatchBranch:p_1 CatchBranch:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
MaybeFinally ::= _SYMB_43 Stm:p_2  {: RESULT = new ABS.Absyn.JustFinally(p_2); :} 
  |  /* empty */  {: RESULT = new ABS.Absyn.NoFinally(); :}
;
Guard ::= LIdent:p_1 _SYMB_14  {: RESULT = new ABS.Absyn.VarGuard(p_1); :} 
  | _SYMB_62 _SYMB_6 LIdent:p_3 _SYMB_14  {: RESULT = new ABS.Absyn.FieldGuard(p_3); :}
  | PureExp:p_1  {: RESULT = new ABS.Absyn.ExpGuard(p_1); :}
  | Guard:p_1 _SYMB_15 Guard:p_3  {: RESULT = new ABS.Absyn.AndGuard(p_1,p_3); :}
;
Exp ::= PureExp:p_1  {: RESULT = new ABS.Absyn.ExpP(p_1); :} 
  | EffExp:p_1  {: RESULT = new ABS.Absyn.ExpE(p_1); :}
;
ListPureExp ::=  /* empty */  {: RESULT = new ABS.Absyn.ListPureExp(); :} 
  | PureExp:p_1  {: RESULT = new ABS.Absyn.ListPureExp(); RESULT.addLast(p_1); :}
  | PureExp:p_1 _SYMB_0 ListPureExp:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PureExp ::= PureExp:p_1 _SYMB_16 PureExp1:p_3  {: RESULT = new ABS.Absyn.EOr(p_1,p_3); :} 
  | PureExp1:p_1  {: RESULT = p_1; :}
  | _SYMB_51 _SYMB_8 Param:p_3 _SYMB_9 _SYMB_7 PureExp:p_6 _SYMB_49 PureExp:p_8  {: RESULT = new ABS.Absyn.Let(p_3,p_6,p_8); :}
  | _SYMB_46 PureExp:p_2 _SYMB_61 PureExp:p_4 _SYMB_38 PureExp:p_6  {: RESULT = new ABS.Absyn.If(p_2,p_4,p_6); :}
  | _SYMB_33 PureExp:p_2 _SYMB_11 ListCaseBranch:p_4 _SYMB_12  {: RESULT = new ABS.Absyn.Case(p_2,p_4); :}
;
PureExp1 ::= PureExp1:p_1 _SYMB_17 PureExp2:p_3  {: RESULT = new ABS.Absyn.EAnd(p_1,p_3); :} 
  | PureExp2:p_1  {: RESULT = p_1; :}
;
PureExp2 ::= PureExp2:p_1 _SYMB_18 PureExp3:p_3  {: RESULT = new ABS.Absyn.EEq(p_1,p_3); :} 
  | PureExp2:p_1 _SYMB_19 PureExp3:p_3  {: RESULT = new ABS.Absyn.ENeq(p_1,p_3); :}
  | PureExp3:p_1  {: RESULT = p_1; :}
;
PureExp3 ::= PureExp3:p_1 _SYMB_4 PureExp4:p_3  {: RESULT = new ABS.Absyn.ELt(p_1,p_3); :} 
  | PureExp3:p_1 _SYMB_20 PureExp4:p_3  {: RESULT = new ABS.Absyn.ELe(p_1,p_3); :}
  | PureExp3:p_1 _SYMB_5 PureExp4:p_3  {: RESULT = new ABS.Absyn.EGt(p_1,p_3); :}
  | PureExp3:p_1 _SYMB_21 PureExp4:p_3  {: RESULT = new ABS.Absyn.EGe(p_1,p_3); :}
  | PureExp4:p_1  {: RESULT = p_1; :}
;
PureExp4 ::= PureExp4:p_1 _SYMB_22 PureExp5:p_3  {: RESULT = new ABS.Absyn.EAdd(p_1,p_3); :} 
  | PureExp4:p_1 _SYMB_23 PureExp5:p_3  {: RESULT = new ABS.Absyn.ESub(p_1,p_3); :}
  | PureExp5:p_1  {: RESULT = p_1; :}
;
PureExp5 ::= PureExp5:p_1 _SYMB_2 PureExp6:p_3  {: RESULT = new ABS.Absyn.EMul(p_1,p_3); :} 
  | PureExp5:p_1 _SYMB_24 PureExp6:p_3  {: RESULT = new ABS.Absyn.EDiv(p_1,p_3); :}
  | PureExp5:p_1 _SYMB_25 PureExp6:p_3  {: RESULT = new ABS.Absyn.EMod(p_1,p_3); :}
  | PureExp6:p_1  {: RESULT = p_1; :}
;
PureExp6 ::= _SYMB_26 PureExp6:p_2  {: RESULT = new ABS.Absyn.ELogNeg(p_2); :} 
  | _SYMB_23 PureExp6:p_2  {: RESULT = new ABS.Absyn.EIntNeg(p_2); :}
  | PureExp7:p_1  {: RESULT = p_1; :}
;
PureExp7 ::= LIdent:p_1 _SYMB_8 ListPureExp:p_3 _SYMB_9  {: RESULT = new ABS.Absyn.EFunCall(p_1,p_3); :} 
  | TType:p_1 LIdent:p_2 _SYMB_8 ListPureExp:p_4 _SYMB_9  {: RESULT = new ABS.Absyn.EQualFunCall(p_1,p_2,p_4); :}
  | LIdent:p_1 _SYMB_27 ListPureExp:p_3 _SYMB_28  {: RESULT = new ABS.Absyn.ENaryFunCall(p_1,p_3); :}
  | TType:p_1 LIdent:p_2 _SYMB_27 ListPureExp:p_4 _SYMB_28  {: RESULT = new ABS.Absyn.ENaryQualFunCall(p_1,p_2,p_4); :}
  | LIdent:p_1  {: RESULT = new ABS.Absyn.EVar(p_1); :}
  | _SYMB_62 _SYMB_6 LIdent:p_3  {: RESULT = new ABS.Absyn.EThis(p_3); :}
  | TType:p_1 LIdent:p_2  {: RESULT = new ABS.Absyn.EQualVar(p_1,p_2); :}
  | QType:p_1  {: RESULT = new ABS.Absyn.ESinglConstr(p_1); :}
  | QType:p_1 _SYMB_8 ListPureExp:p_3 _SYMB_9  {: RESULT = new ABS.Absyn.EParamConstr(p_1,p_3); :}
  | Literal:p_1  {: RESULT = new ABS.Absyn.ELit(p_1); :}
  | _SYMB_8 PureExp:p_2 _SYMB_9  {: RESULT = p_2; :}
;
CaseBranch ::= Pattern:p_1 _SYMB_13 PureExp:p_3  {: RESULT = new ABS.Absyn.CaseBranc(p_1,p_3); :} 
;
ListCaseBranch ::= CaseBranch:p_1 _SYMB_1  {: RESULT = new ABS.Absyn.ListCaseBranch(); RESULT.addLast(p_1); :} 
  | CaseBranch:p_1 _SYMB_1 ListCaseBranch:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListPattern ::=  /* empty */  {: RESULT = new ABS.Absyn.ListPattern(); :} 
  | Pattern:p_1  {: RESULT = new ABS.Absyn.ListPattern(); RESULT.addLast(p_1); :}
  | Pattern:p_1 _SYMB_0 ListPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Pattern ::= LIdent:p_1  {: RESULT = new ABS.Absyn.PIdent(p_1); :} 
  | Literal:p_1  {: RESULT = new ABS.Absyn.PLit(p_1); :}
  | UIdent:p_1  {: RESULT = new ABS.Absyn.PSinglConstr(p_1); :}
  | UIdent:p_1 _SYMB_8 ListPattern:p_3 _SYMB_9  {: RESULT = new ABS.Absyn.PParamConstr(p_1,p_3); :}
  | _SYMB_3  {: RESULT = new ABS.Absyn.PUnderscore(); :}
;
Literal ::= _SYMB_55  {: RESULT = new ABS.Absyn.LNull(); :} 
  | _SYMB_62  {: RESULT = new ABS.Absyn.LThis(); :}
  | _SYMB_63  {: RESULT = new ABS.Absyn.LThisDC(); :}
  | _STRING_:p_1  {: RESULT = new ABS.Absyn.LStr(p_1); :}
  | _INTEGER_:p_1  {: RESULT = new ABS.Absyn.LInt(p_1); :}
;
EffExp ::= _SYMB_54 Type:p_2 _SYMB_8 ListPureExp:p_4 _SYMB_9  {: RESULT = new ABS.Absyn.New(p_2,p_4); :} 
  | _SYMB_54 _SYMB_52 Type:p_3 _SYMB_8 ListPureExp:p_5 _SYMB_9  {: RESULT = new ABS.Absyn.NewLocal(p_3,p_5); :}
  | PureExp:p_1 _SYMB_6 LIdent:p_3 _SYMB_8 ListPureExp:p_5 _SYMB_9  {: RESULT = new ABS.Absyn.SyncMethCall(p_1,p_3,p_5); :}
  | _SYMB_62 _SYMB_6 LIdent:p_3 _SYMB_8 ListPureExp:p_5 _SYMB_9  {: RESULT = new ABS.Absyn.ThisSyncMethCall(p_3,p_5); :}
  | PureExp:p_1 _SYMB_29 LIdent:p_3 _SYMB_8 ListPureExp:p_5 _SYMB_9  {: RESULT = new ABS.Absyn.AsyncMethCall(p_1,p_3,p_5); :}
  | _SYMB_62 _SYMB_29 LIdent:p_3 _SYMB_8 ListPureExp:p_5 _SYMB_9  {: RESULT = new ABS.Absyn.ThisAsyncMethCall(p_3,p_5); :}
  | PureExp:p_1 _SYMB_6 _SYMB_45  {: RESULT = new ABS.Absyn.Get(p_1); :}
  | PureExp:p_1 _SYMB_59 Type:p_3 _SYMB_8 ListPureExp:p_5 _SYMB_9  {: RESULT = new ABS.Absyn.Spawns(p_1,p_3,p_5); :}
;
Ann ::= _SYMB_27 PureExp:p_2 _SYMB_28  {: RESULT = new ABS.Absyn.SimpleAnn(p_2); :} 
;
ListAnn ::=  /* empty */  {: RESULT = new ABS.Absyn.ListAnn(); :} 
  | ListAnn:p_1 Ann:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
AnnDecl ::= ListAnn:p_1 Decl:p_2  {: RESULT = new ABS.Absyn.AnnDec(p_1,p_2); :} 
;
ListAnnDecl ::=  /* empty */  {: RESULT = new ABS.Absyn.ListAnnDecl(); :} 
  | ListAnnDecl:p_1 AnnDecl:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
AnnType ::= ListAnn:p_1 Type:p_2  {: RESULT = new ABS.Absyn.AnnTyp(p_1,p_2); :} 
;
ListAnnType ::=  /* empty */  {: RESULT = new ABS.Absyn.ListAnnType(); :} 
  | AnnType:p_1  {: RESULT = new ABS.Absyn.ListAnnType(); RESULT.addLast(p_1); :}
  | AnnType:p_1 _SYMB_0 ListAnnType:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

