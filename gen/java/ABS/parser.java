
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Wed Oct 08 18:07:06 CEST 2014
//----------------------------------------------------

package ABS;


/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Wed Oct 08 18:07:06 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\003" +
    "\000\002\005\002\000\002\005\004\000\002\006\011\000" +
    "\002\007\004\000\002\007\006\000\002\007\004\000\002" +
    "\007\006\000\002\010\002\000\002\010\005\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\012\002" +
    "\000\002\012\005\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\006\000\002" +
    "\015\003\000\002\015\005\000\002\016\003\000\002\016" +
    "\005\000\002\017\003\000\002\020\003\000\002\021\003" +
    "\000\002\021\005\000\002\022\002\000\002\022\004\000" +
    "\002\023\007\000\002\023\007\000\002\023\012\000\002" +
    "\023\013\000\002\023\016\000\002\023\007\000\002\023" +
    "\011\000\002\023\011\000\002\023\014\000\002\023\013" +
    "\000\002\023\016\000\002\024\003\000\002\024\006\000" +
    "\002\025\003\000\002\025\004\000\002\026\002\000\002" +
    "\026\003\000\002\026\005\000\002\027\003\000\002\027" +
    "\005\000\002\030\003\000\002\030\005\000\002\031\003" +
    "\000\002\031\003\000\002\032\007\000\002\033\002\000" +
    "\002\033\005\000\002\034\005\000\002\034\007\000\002" +
    "\034\010\000\002\035\002\000\002\035\004\000\002\036" +
    "\005\000\002\037\003\000\002\037\002\000\002\040\002" +
    "\000\002\040\003\000\002\040\005\000\002\041\004\000" +
    "\002\042\002\000\002\042\004\000\002\043\004\000\002" +
    "\043\005\000\002\043\007\000\002\043\005\000\002\043" +
    "\006\000\002\043\010\000\002\043\005\000\002\043\007" +
    "\000\002\043\007\000\002\043\011\000\002\043\004\000" +
    "\002\043\004\000\002\043\005\000\002\043\005\000\002" +
    "\044\004\000\002\044\006\000\002\044\003\000\002\044" +
    "\005\000\002\045\003\000\002\045\003\000\002\046\002" +
    "\000\002\046\003\000\002\046\005\000\002\047\005\000" +
    "\002\047\003\000\002\047\012\000\002\047\010\000\002" +
    "\047\007\000\002\050\005\000\002\050\003\000\002\051" +
    "\005\000\002\051\005\000\002\051\003\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\003\000\002\053\005\000\002\053\005\000\002" +
    "\053\003\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\003\000\002\055\004\000\002\055\004" +
    "\000\002\055\003\000\002\056\006\000\002\056\010\000" +
    "\002\056\006\000\002\056\010\000\002\056\003\000\002" +
    "\056\005\000\002\056\005\000\002\056\003\000\002\056" +
    "\006\000\002\056\003\000\002\056\005\000\002\057\005" +
    "\000\002\060\004\000\002\060\005\000\002\061\002\000" +
    "\002\061\003\000\002\061\005\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\006\000\002\062" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\064\007\000" +
    "\002\064\010\000\002\064\010\000\002\064\010\000\002" +
    "\064\010\000\002\064\010\000\002\064\005\000\002\064" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\006\002\ufffb\066\ufffb\001\002\000\004\002" +
    "\u017b\001\002\000\006\002\ufffc\066\007\001\002\000\006" +
    "\002\ufffa\066\ufffa\001\002\000\004\105\012\001\002\000" +
    "\070\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\037\uffe4\041\uffe4\051\uffe4\062\uffe4\073\uffe4\075" +
    "\uffe4\104\uffe4\001\002\000\070\004\uffe2\005\uffe2\006\uffe2" +
    "\007\u0179\011\uffe2\012\uffe2\014\uffe2\015\uffe2\017\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\037\uffe2\041\uffe2\051" +
    "\uffe2\062\uffe2\073\uffe2\075\uffe2\104\uffe2\001\002\000\070" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\014" +
    "\uffe3\015\uffe3\017\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\037\uffe3\041\uffe3\051\uffe3\062\uffe3\073\uffe3\075\uffe3" +
    "\104\uffe3\001\002\000\004\005\014\001\002\000\030\002" +
    "\ufff4\017\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4\054\ufff4" +
    "\061\ufff4\063\ufff4\066\ufff4\100\ufff4\001\002\000\030\002" +
    "\uffef\017\uffef\046\uffef\047\uffef\050\uffef\052\020\054\uffef" +
    "\061\uffef\063\uffef\066\uffef\100\uffef\001\002\000\026\002" +
    "\uffe0\017\uffe0\046\uffe0\047\uffe0\050\uffe0\054\041\061\035" +
    "\063\uffe0\066\uffe0\100\uffe0\001\002\000\004\005\034\001" +
    "\002\000\010\006\022\104\023\105\025\001\002\000\006" +
    "\005\ufff8\055\032\001\002\000\006\005\ufff6\055\030\001" +
    "\002\000\010\004\000\005\000\055\000\001\002\000\010" +
    "\004\026\005\ufffe\055\ufffe\001\002\000\010\004\uffff\005" +
    "\uffff\055\uffff\001\002\000\006\104\023\105\025\001\002" +
    "\000\006\005\ufffd\055\ufffd\001\002\000\004\105\012\001" +
    "\002\000\004\005\ufff5\001\002\000\004\105\012\001\002" +
    "\000\004\005\ufff7\001\002\000\030\002\ufff3\017\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\052\ufff3\054\ufff3\061\ufff3\063\ufff3" +
    "\066\ufff3\100\ufff3\001\002\000\010\006\uffec\104\uffec\105" +
    "\uffec\001\002\000\004\005\u0178\001\002\000\022\002\uffbc" +
    "\017\061\046\064\047\063\050\062\063\060\066\uffbc\100" +
    "\054\001\002\000\010\006\043\104\023\105\044\001\002" +
    "\000\010\006\uffed\104\uffed\105\uffed\001\002\000\004\055" +
    "\052\001\002\000\004\055\050\001\002\000\010\004\uffff" +
    "\007\uffe3\055\uffff\001\002\000\004\007\046\001\002\000" +
    "\006\104\023\105\025\001\002\000\004\005\ufff2\001\002" +
    "\000\004\105\012\001\002\000\004\005\ufff0\001\002\000" +
    "\004\105\012\001\002\000\004\005\ufff1\001\002\000\004" +
    "\105\u0174\001\002\000\022\002\uffdf\017\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\063\uffdf\066\uffdf\100\uffdf\001\002\000\014" +
    "\002\uffbd\010\uffbd\020\uffbd\066\uffbd\105\uffbd\001\002\000" +
    "\006\002\ufff9\066\ufff9\001\002\000\004\105\u0164\001\002" +
    "\000\060\010\uffb7\014\uffb7\017\uffb7\020\uffb7\032\uffb7\035" +
    "\uffb7\042\uffb7\043\uffb7\045\uffb7\057\uffb7\064\uffb7\067\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\074\uffb7\076\uffb7\077\uffb7\101" +
    "\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\001\002\000\006" +
    "\010\074\105\012\001\002\000\004\105\326\001\002\000" +
    "\004\105\065\001\002\000\010\014\067\017\070\060\066" +
    "\001\002\000\004\105\012\001\002\000\010\010\074\015" +
    "\uffbb\105\012\001\002\000\012\010\uffc0\017\uffc0\020\uffc0" +
    "\105\uffc0\001\002\000\012\010\074\017\061\020\uffbc\105" +
    "\012\001\002\000\004\104\107\001\002\000\010\010\uffc0" +
    "\020\uffc0\105\uffc0\001\002\000\016\004\uffeb\005\uffeb\012" +
    "\uffeb\014\uffeb\015\uffeb\104\uffeb\001\002\000\012\010\uffbf" +
    "\017\uffbf\020\uffbf\105\uffbf\001\002\000\020\004\uffea\005" +
    "\uffea\011\077\012\uffea\014\uffea\015\uffea\104\uffea\001\002" +
    "\000\006\010\074\105\012\001\002\000\006\004\103\012" +
    "\uffe8\001\002\000\004\012\102\001\002\000\016\004\uffe9" +
    "\005\uffe9\012\uffe9\014\uffe9\015\uffe9\104\uffe9\001\002\000" +
    "\006\010\074\105\012\001\002\000\004\012\uffe7\001\002" +
    "\000\010\010\074\020\106\105\012\001\002\000\022\002" +
    "\uffd7\017\uffd7\046\uffd7\047\uffd7\050\uffd7\063\uffd7\066\uffd7" +
    "\100\uffd7\001\002\000\010\005\110\013\112\014\111\001" +
    "\002\000\012\010\uffc3\017\uffc3\020\uffc3\105\uffc3\001\002" +
    "\000\010\010\074\015\uffbb\105\012\001\002\000\034\014" +
    "\122\032\127\035\125\045\115\057\121\064\120\070\130" +
    "\076\124\077\123\102\114\103\113\104\116\105\012\001" +
    "\002\000\066\004\uff6b\005\uff6b\006\uff6b\007\uff6b\011\uff6b" +
    "\012\uff6b\015\uff6b\017\uff6b\022\uff6b\023\uff6b\024\uff6b\025" +
    "\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b" +
    "\034\uff6b\037\uff6b\040\uff6b\041\uff6b\051\uff6b\062\uff6b\073" +
    "\uff6b\075\uff6b\001\002\000\066\004\uff6c\005\uff6c\006\uff6c" +
    "\007\uff6c\011\uff6c\012\uff6c\015\uff6c\017\uff6c\022\uff6c\023" +
    "\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c" +
    "\032\uff6c\033\uff6c\034\uff6c\037\uff6c\040\uff6c\041\uff6c\051" +
    "\uff6c\062\uff6c\073\uff6c\075\uff6c\001\002\000\034\014\122" +
    "\032\127\035\125\045\115\057\121\064\120\070\130\076" +
    "\124\077\123\102\114\103\113\104\116\105\012\001\002" +
    "\000\070\004\uff81\005\uff81\006\uff81\007\uff81\011\uff81\012" +
    "\uff81\014\236\015\uff81\017\uff81\022\uff81\023\uff81\024\uff81" +
    "\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033" +
    "\uff81\034\uff81\036\237\037\uff81\041\uff81\051\uff81\062\uff81" +
    "\073\uff81\075\uff81\001\002\000\066\004\uff7e\005\uff7e\006" +
    "\uff7e\007\220\011\uff7e\012\uff7e\014\221\015\uff7e\017\uff7e" +
    "\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030" +
    "\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\037\uff7e\041\uff7e" +
    "\051\uff7e\062\uff7e\073\uff7e\075\uff7e\001\002\000\004\014" +
    "\207\001\002\000\034\014\122\032\127\035\125\045\115" +
    "\057\121\064\120\070\130\076\124\077\123\102\114\103" +
    "\113\104\116\105\012\001\002\000\034\014\122\032\127" +
    "\035\125\045\115\057\121\064\120\070\130\076\124\077" +
    "\123\102\114\103\113\104\116\105\012\001\002\000\066" +
    "\004\uff6d\005\uff6d\006\uff6d\007\uff6d\011\uff6d\012\uff6d\015" +
    "\uff6d\017\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d" +
    "\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\037" +
    "\uff6d\040\uff6d\041\uff6d\051\uff6d\062\uff6d\073\uff6d\075\uff6d" +
    "\001\002\000\064\004\uff6e\005\uff6e\006\uff6e\007\176\011" +
    "\uff6e\012\uff6e\015\uff6e\017\uff6e\022\uff6e\023\uff6e\024\uff6e" +
    "\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033" +
    "\uff6e\034\uff6e\037\uff6e\041\uff6e\051\uff6e\062\uff6e\073\uff6e" +
    "\075\uff6e\001\002\000\026\014\122\032\127\035\125\070" +
    "\130\076\124\077\123\102\114\103\113\104\116\105\012" +
    "\001\002\000\006\005\172\023\173\001\002\000\026\014" +
    "\122\032\127\035\125\070\130\076\124\077\123\102\114" +
    "\103\113\104\116\105\012\001\002\000\066\004\uff6f\005" +
    "\uff6f\006\uff6f\007\uff6f\011\uff6f\012\uff6f\015\uff6f\017\uff6f" +
    "\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030" +
    "\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\037\uff6f\040\uff6f" +
    "\041\uff6f\051\uff6f\062\uff6f\073\uff6f\075\uff6f\001\002\000" +
    "\064\004\uff86\005\uff86\006\uff86\007\uff86\011\uff86\012\uff86" +
    "\015\uff86\017\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86" +
    "\037\uff86\041\uff86\051\uff86\062\uff86\073\uff86\075\uff86\001" +
    "\002\000\064\004\uff89\005\uff89\006\uff89\007\uff89\011\uff89" +
    "\012\uff89\015\uff89\017\uff89\022\uff89\023\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\034\uff89\037\uff89\041\uff89\051\uff89\062\uff89\073\uff89\075" +
    "\uff89\001\002\000\064\004\uff7c\005\uff7c\006\uff7c\007\uff7c" +
    "\011\uff7c\012\uff7c\015\uff7c\017\uff7c\022\uff7c\023\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c" +
    "\033\uff7c\034\uff7c\037\uff7c\041\uff7c\051\uff7c\062\uff7c\073" +
    "\uff7c\075\uff7c\001\002\000\064\004\uff8d\005\uff8d\006\156" +
    "\007\uff8d\011\uff8d\012\uff8d\015\uff8d\017\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\033\160\034\157\037\uff8d\041\uff8d\051\uff8d\062" +
    "\uff8d\073\uff8d\075\uff8d\001\002\000\056\004\uff90\005\uff90" +
    "\007\uff90\011\uff90\012\uff90\015\uff90\017\uff90\022\uff90\023" +
    "\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\154" +
    "\032\153\037\uff90\041\uff90\051\uff90\062\uff90\073\uff90\075" +
    "\uff90\001\002\000\052\004\uff95\005\uff95\007\uff95\011\151" +
    "\012\150\015\uff95\017\uff95\022\uff95\023\uff95\024\uff95\025" +
    "\uff95\026\uff95\027\146\030\147\037\uff95\041\uff95\051\uff95" +
    "\062\uff95\073\uff95\075\uff95\001\002\000\042\004\uff98\005" +
    "\uff98\007\uff98\015\uff98\017\uff98\022\uff98\023\uff98\024\uff98" +
    "\025\144\026\143\037\uff98\041\uff98\051\uff98\062\uff98\073" +
    "\uff98\075\uff98\001\002\000\036\004\uff9d\005\uff9d\007\uff9d" +
    "\015\uff9d\017\uff9d\022\uff9d\023\uff9d\024\141\037\uff9d\041" +
    "\uff9d\051\uff9d\062\uff9d\073\uff9d\075\uff9d\001\002\000\026" +
    "\014\122\032\127\035\125\070\130\076\124\077\123\102" +
    "\114\103\113\104\116\105\012\001\002\000\042\004\uff99" +
    "\005\uff99\007\uff99\015\uff99\017\uff99\022\uff99\023\uff99\024" +
    "\uff99\025\144\026\143\037\uff99\041\uff99\051\uff99\062\uff99" +
    "\073\uff99\075\uff99\001\002\000\026\014\122\032\127\035" +
    "\125\070\130\076\124\077\123\102\114\103\113\104\116" +
    "\105\012\001\002\000\026\014\122\032\127\035\125\070" +
    "\130\076\124\077\123\102\114\103\113\104\116\105\012" +
    "\001\002\000\052\004\uff97\005\uff97\007\uff97\011\151\012" +
    "\150\015\uff97\017\uff97\022\uff97\023\uff97\024\uff97\025\uff97" +
    "\026\uff97\027\146\030\147\037\uff97\041\uff97\051\uff97\062" +
    "\uff97\073\uff97\075\uff97\001\002\000\026\014\122\032\127" +
    "\035\125\070\130\076\124\077\123\102\114\103\113\104" +
    "\116\105\012\001\002\000\026\014\122\032\127\035\125" +
    "\070\130\076\124\077\123\102\114\103\113\104\116\105" +
    "\012\001\002\000\026\014\122\032\127\035\125\070\130" +
    "\076\124\077\123\102\114\103\113\104\116\105\012\001" +
    "\002\000\026\014\122\032\127\035\125\070\130\076\124" +
    "\077\123\102\114\103\113\104\116\105\012\001\002\000" +
    "\056\004\uff94\005\uff94\007\uff94\011\uff94\012\uff94\015\uff94" +
    "\017\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027" +
    "\uff94\030\uff94\031\154\032\153\037\uff94\041\uff94\051\uff94" +
    "\062\uff94\073\uff94\075\uff94\001\002\000\026\014\122\032" +
    "\127\035\125\070\130\076\124\077\123\102\114\103\113" +
    "\104\116\105\012\001\002\000\026\014\122\032\127\035" +
    "\125\070\130\076\124\077\123\102\114\103\113\104\116" +
    "\105\012\001\002\000\064\004\uff8f\005\uff8f\006\156\007" +
    "\uff8f\011\uff8f\012\uff8f\015\uff8f\017\uff8f\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\033\160\034\157\037\uff8f\041\uff8f\051\uff8f\062\uff8f" +
    "\073\uff8f\075\uff8f\001\002\000\026\014\122\032\127\035" +
    "\125\070\130\076\124\077\123\102\114\103\113\104\116" +
    "\105\012\001\002\000\026\014\122\032\127\035\125\070" +
    "\130\076\124\077\123\102\114\103\113\104\116\105\012" +
    "\001\002\000\026\014\122\032\127\035\125\070\130\076" +
    "\124\077\123\102\114\103\113\104\116\105\012\001\002" +
    "\000\064\004\uff8b\005\uff8b\006\uff8b\007\uff8b\011\uff8b\012" +
    "\uff8b\015\uff8b\017\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034" +
    "\uff8b\037\uff8b\041\uff8b\051\uff8b\062\uff8b\073\uff8b\075\uff8b" +
    "\001\002\000\064\004\uff8a\005\uff8a\006\uff8a\007\uff8a\011" +
    "\uff8a\012\uff8a\015\uff8a\017\uff8a\022\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\037\uff8a\041\uff8a\051\uff8a\062\uff8a\073\uff8a" +
    "\075\uff8a\001\002\000\064\004\uff8c\005\uff8c\006\uff8c\007" +
    "\uff8c\011\uff8c\012\uff8c\015\uff8c\017\uff8c\022\uff8c\023\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\037\uff8c\041\uff8c\051\uff8c\062\uff8c" +
    "\073\uff8c\075\uff8c\001\002\000\064\004\uff8e\005\uff8e\006" +
    "\156\007\uff8e\011\uff8e\012\uff8e\015\uff8e\017\uff8e\022\uff8e" +
    "\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\033\160\034\157\037\uff8e\041\uff8e\051\uff8e" +
    "\062\uff8e\073\uff8e\075\uff8e\001\002\000\056\004\uff92\005" +
    "\uff92\007\uff92\011\uff92\012\uff92\015\uff92\017\uff92\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\154\032\153\037\uff92\041\uff92\051\uff92\062\uff92\073\uff92" +
    "\075\uff92\001\002\000\056\004\uff91\005\uff91\007\uff91\011" +
    "\uff91\012\uff91\015\uff91\017\uff91\022\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\027\uff91\030\uff91\031\154\032\153\037" +
    "\uff91\041\uff91\051\uff91\062\uff91\073\uff91\075\uff91\001\002" +
    "\000\056\004\uff93\005\uff93\007\uff93\011\uff93\012\uff93\015" +
    "\uff93\017\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93" +
    "\027\uff93\030\uff93\031\154\032\153\037\uff93\041\uff93\051" +
    "\uff93\062\uff93\073\uff93\075\uff93\001\002\000\052\004\uff96" +
    "\005\uff96\007\uff96\011\151\012\150\015\uff96\017\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\146\030\147" +
    "\037\uff96\041\uff96\051\uff96\062\uff96\073\uff96\075\uff96\001" +
    "\002\000\064\004\uff87\005\uff87\006\uff87\007\uff87\011\uff87" +
    "\012\uff87\015\uff87\017\uff87\022\uff87\023\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87" +
    "\034\uff87\037\uff87\041\uff87\051\uff87\062\uff87\073\uff87\075" +
    "\uff87\001\002\000\012\010\uffc2\017\uffc2\020\uffc2\105\uffc2" +
    "\001\002\000\026\014\122\032\127\035\125\070\130\076" +
    "\124\077\123\102\114\103\113\104\116\105\012\001\002" +
    "\000\036\004\uff9e\005\uff9e\007\uff9e\015\uff9e\017\uff9e\022" +
    "\uff9e\023\uff9e\024\141\037\uff9e\041\uff9e\051\uff9e\062\uff9e" +
    "\073\uff9e\075\uff9e\001\002\000\064\004\uff88\005\uff88\006" +
    "\uff88\007\uff88\011\uff88\012\uff88\015\uff88\017\uff88\022\uff88" +
    "\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031" +
    "\uff88\032\uff88\033\uff88\034\uff88\037\uff88\041\uff88\051\uff88" +
    "\062\uff88\073\uff88\075\uff88\001\002\000\004\104\177\001" +
    "\002\000\064\004\uff80\005\uff80\006\uff80\007\uff80\011\uff80" +
    "\012\uff80\015\uff80\017\uff80\022\uff80\023\uff80\024\uff80\025" +
    "\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80" +
    "\034\uff80\037\uff80\041\uff80\051\uff80\062\uff80\073\uff80\075" +
    "\uff80\001\002\000\006\015\201\023\173\001\002\000\064" +
    "\004\uff7b\005\uff7b\006\uff7b\007\uff7b\011\uff7b\012\uff7b\015" +
    "\uff7b\017\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\037" +
    "\uff7b\041\uff7b\051\uff7b\062\uff7b\073\uff7b\075\uff7b\001\002" +
    "\000\006\023\173\075\203\001\002\000\034\014\122\032" +
    "\127\035\125\045\115\057\121\064\120\070\130\076\124" +
    "\077\123\102\114\103\113\104\116\105\012\001\002\000" +
    "\006\023\173\051\205\001\002\000\034\014\122\032\127" +
    "\035\125\045\115\057\121\064\120\070\130\076\124\077" +
    "\123\102\114\103\113\104\116\105\012\001\002\000\034" +
    "\004\uff9b\005\uff9b\007\uff9b\015\uff9b\017\uff9b\022\uff9b\023" +
    "\173\037\uff9b\041\uff9b\051\uff9b\062\uff9b\073\uff9b\075\uff9b" +
    "\001\002\000\006\010\074\105\012\001\002\000\004\104" +
    "\217\001\002\000\004\015\212\001\002\000\004\013\213" +
    "\001\002\000\034\014\122\032\127\035\125\045\115\057" +
    "\121\064\120\070\130\076\124\077\123\102\114\103\113" +
    "\104\116\105\012\001\002\000\006\023\173\062\215\001" +
    "\002\000\034\014\122\032\127\035\125\045\115\057\121" +
    "\064\120\070\130\076\124\077\123\102\114\103\113\104" +
    "\116\105\012\001\002\000\034\004\uff9c\005\uff9c\007\uff9c" +
    "\015\uff9c\017\uff9c\022\uff9c\023\173\037\uff9c\041\uff9c\051" +
    "\uff9c\062\uff9c\073\uff9c\075\uff9c\001\002\000\006\004\uffb8" +
    "\015\uffb8\001\002\000\004\104\227\001\002\000\036\014" +
    "\122\015\uffa1\032\127\035\125\045\115\057\121\064\120" +
    "\070\130\076\124\077\123\102\114\103\113\104\116\105" +
    "\012\001\002\000\004\015\226\001\002\000\012\004\224" +
    "\015\uffa0\023\173\037\uffa0\001\002\000\040\014\122\015" +
    "\uffa1\032\127\035\125\037\uffa1\045\115\057\121\064\120" +
    "\070\130\076\124\077\123\102\114\103\113\104\116\105" +
    "\012\001\002\000\006\015\uff9f\037\uff9f\001\002\000\064" +
    "\004\uff7d\005\uff7d\006\uff7d\007\uff7d\011\uff7d\012\uff7d\015" +
    "\uff7d\017\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d" +
    "\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\037" +
    "\uff7d\041\uff7d\051\uff7d\062\uff7d\073\uff7d\075\uff7d\001\002" +
    "\000\070\004\uff7f\005\uff7f\006\uff7f\007\uff7f\011\uff7f\012" +
    "\uff7f\014\231\015\uff7f\017\uff7f\022\uff7f\023\uff7f\024\uff7f" +
    "\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033" +
    "\uff7f\034\uff7f\036\230\037\uff7f\041\uff7f\051\uff7f\062\uff7f" +
    "\073\uff7f\075\uff7f\001\002\000\036\014\122\032\127\035" +
    "\125\037\uffa1\045\115\057\121\064\120\070\130\076\124" +
    "\077\123\102\114\103\113\104\116\105\012\001\002\000" +
    "\036\014\122\015\uffa1\032\127\035\125\045\115\057\121" +
    "\064\120\070\130\076\124\077\123\102\114\103\113\104" +
    "\116\105\012\001\002\000\004\015\233\001\002\000\064" +
    "\004\uff84\005\uff84\006\uff84\007\uff84\011\uff84\012\uff84\015" +
    "\uff84\017\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84" +
    "\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\037" +
    "\uff84\041\uff84\051\uff84\062\uff84\073\uff84\075\uff84\001\002" +
    "\000\004\037\235\001\002\000\064\004\uff82\005\uff82\006" +
    "\uff82\007\uff82\011\uff82\012\uff82\015\uff82\017\uff82\022\uff82" +
    "\023\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031" +
    "\uff82\032\uff82\033\uff82\034\uff82\037\uff82\041\uff82\051\uff82" +
    "\062\uff82\073\uff82\075\uff82\001\002\000\036\014\122\015" +
    "\uffa1\032\127\035\125\045\115\057\121\064\120\070\130" +
    "\076\124\077\123\102\114\103\113\104\116\105\012\001" +
    "\002\000\036\014\122\032\127\035\125\037\uffa1\045\115" +
    "\057\121\064\120\070\130\076\124\077\123\102\114\103" +
    "\113\104\116\105\012\001\002\000\004\037\241\001\002" +
    "\000\064\004\uff83\005\uff83\006\uff83\007\uff83\011\uff83\012" +
    "\uff83\015\uff83\017\uff83\022\uff83\023\uff83\024\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034" +
    "\uff83\037\uff83\041\uff83\051\uff83\062\uff83\073\uff83\075\uff83" +
    "\001\002\000\004\015\243\001\002\000\064\004\uff85\005" +
    "\uff85\006\uff85\007\uff85\011\uff85\012\uff85\015\uff85\017\uff85" +
    "\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030" +
    "\uff85\031\uff85\032\uff85\033\uff85\034\uff85\037\uff85\041\uff85" +
    "\051\uff85\062\uff85\073\uff85\075\uff85\001\002\000\006\017" +
    "\245\023\173\001\002\000\022\010\250\070\130\076\246" +
    "\077\123\102\114\103\113\104\253\105\254\001\002\000" +
    "\010\004\uff6e\015\uff6e\040\uff6e\001\002\000\004\020\270" +
    "\001\002\000\010\004\uff70\015\uff70\040\uff70\001\002\000" +
    "\010\004\uff73\015\uff73\040\uff73\001\002\000\004\040\266" +
    "\001\002\000\010\004\uff74\015\uff74\040\uff74\001\002\000" +
    "\012\004\uff72\014\260\015\uff72\040\uff72\001\002\000\004" +
    "\005\256\001\002\000\024\010\250\020\uff79\070\130\076" +
    "\246\077\123\102\114\103\113\104\253\105\254\001\002" +
    "\000\004\020\uff78\001\002\000\024\010\250\015\uff77\070" +
    "\130\076\246\077\123\102\114\103\113\104\253\105\254" +
    "\001\002\000\006\004\264\015\uff76\001\002\000\004\015" +
    "\263\001\002\000\010\004\uff71\015\uff71\040\uff71\001\002" +
    "\000\024\010\250\015\uff77\070\130\076\246\077\123\102" +
    "\114\103\113\104\253\105\254\001\002\000\004\015\uff75" +
    "\001\002\000\034\014\122\032\127\035\125\045\115\057" +
    "\121\064\120\070\130\076\124\077\123\102\114\103\113" +
    "\104\116\105\012\001\002\000\006\005\uff7a\023\173\001" +
    "\002\000\034\004\uff9a\005\uff9a\007\uff9a\015\uff9a\017\uff9a" +
    "\022\uff9a\023\uff9a\037\uff9a\041\uff9a\051\uff9a\062\uff9a\073" +
    "\uff9a\075\uff9a\001\002\000\004\015\275\001\002\000\006" +
    "\004\273\015\uffba\001\002\000\010\010\074\015\uffbb\105" +
    "\012\001\002\000\004\015\uffb9\001\002\000\004\017\061" +
    "\001\002\000\012\010\uffc1\017\uffc1\020\uffc1\105\uffc1\001" +
    "\002\000\004\015\300\001\002\000\006\017\302\060\301" +
    "\001\002\000\004\105\012\001\002\000\012\010\uffc0\017" +
    "\uffc0\020\uffc0\105\uffc0\001\002\000\012\010\074\017\061" +
    "\020\uffbc\105\012\001\002\000\010\010\uffc0\020\uffc0\105" +
    "\uffc0\001\002\000\010\010\074\020\306\105\012\001\002" +
    "\000\022\002\uffd6\017\uffd6\046\uffd6\047\uffd6\050\uffd6\063" +
    "\uffd6\066\uffd6\100\uffd6\001\002\000\004\017\313\001\002" +
    "\000\006\004\311\017\uffe6\001\002\000\004\105\012\001" +
    "\002\000\004\017\uffe5\001\002\000\012\010\uffc0\017\uffc0" +
    "\020\uffc0\105\uffc0\001\002\000\012\010\074\017\061\020" +
    "\uffbc\105\012\001\002\000\010\010\uffc0\020\uffc0\105\uffc0" +
    "\001\002\000\010\010\074\020\317\105\012\001\002\000" +
    "\022\002\uffd4\017\uffd4\046\uffd4\047\uffd4\050\uffd4\063\uffd4" +
    "\066\uffd4\100\uffd4\001\002\000\004\017\321\001\002\000" +
    "\012\010\uffc0\017\uffc0\020\uffc0\105\uffc0\001\002\000\012" +
    "\010\074\017\061\020\uffbc\105\012\001\002\000\010\010" +
    "\uffc0\020\uffc0\105\uffc0\001\002\000\010\010\074\020\325" +
    "\105\012\001\002\000\022\002\uffd5\017\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\063\uffd5\066\uffd5\100\uffd5\001\002\000\006" +
    "\011\330\013\327\001\002\000\004\105\336\001\002\000" +
    "\004\105\331\001\002\000\006\004\353\012\uffcc\001\002" +
    "\000\004\012\333\001\002\000\004\013\334\001\002\000" +
    "\004\105\336\001\002\000\006\005\uffca\016\351\001\002" +
    "\000\010\005\uffd3\014\341\016\uffd3\001\002\000\004\005" +
    "\340\001\002\000\022\002\uffdc\017\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\063\uffdc\066\uffdc\100\uffdc\001\002\000\010\010" +
    "\074\015\uffcf\105\012\001\002\000\004\015\350\001\002" +
    "\000\010\004\uffd1\015\uffd1\104\347\001\002\000\006\004" +
    "\345\015\uffce\001\002\000\010\010\074\015\uffcf\105\012" +
    "\001\002\000\004\015\uffcd\001\002\000\006\004\uffd0\015" +
    "\uffd0\001\002\000\006\005\uffd2\016\uffd2\001\002\000\004" +
    "\105\336\001\002\000\004\005\uffc9\001\002\000\004\105" +
    "\331\001\002\000\004\012\uffcb\001\002\000\004\005\356" +
    "\001\002\000\022\002\uffdd\017\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\063\uffdd\066\uffdd\100\uffdd\001\002\000\004\104\360" +
    "\001\002\000\006\011\362\014\361\001\002\000\010\010" +
    "\074\015\uffbb\105\012\001\002\000\004\105\331\001\002" +
    "\000\004\012\364\001\002\000\004\014\365\001\002\000" +
    "\010\010\074\015\uffbb\105\012\001\002\000\004\015\367" +
    "\001\002\000\004\013\370\001\002\000\036\014\122\032" +
    "\127\035\125\044\371\045\115\057\121\064\120\070\130" +
    "\076\124\077\123\102\114\103\113\104\116\105\012\001" +
    "\002\000\004\005\uffc8\001\002\000\006\005\uffc7\023\173" +
    "\001\002\000\004\005\374\001\002\000\022\002\uffda\017" +
    "\uffda\046\uffda\047\uffda\050\uffda\063\uffda\066\uffda\100\uffda" +
    "\001\002\000\004\015\376\001\002\000\004\013\377\001" +
    "\002\000\036\014\122\032\127\035\125\044\371\045\115" +
    "\057\121\064\120\070\130\076\124\077\123\102\114\103" +
    "\113\104\116\105\012\001\002\000\004\005\u0101\001\002" +
    "\000\022\002\uffdb\017\uffdb\046\uffdb\047\uffdb\050\uffdb\063" +
    "\uffdb\066\uffdb\100\uffdb\001\002\000\060\010\074\014\122" +
    "\017\u0104\020\u0103\032\127\035\125\042\u010a\043\u0109\045" +
    "\115\057\u0105\064\120\067\u0112\070\130\071\u0111\072\u0110" +
    "\074\u010f\076\u010e\077\123\101\u010b\102\114\103\113\104" +
    "\u0106\105\012\001\002\000\016\002\uffbe\010\uffbe\017\uffbe" +
    "\020\uffbe\066\uffbe\105\uffbe\001\002\000\060\010\uffb7\014" +
    "\uffb7\017\uffb7\020\uffb7\032\uffb7\035\uffb7\042\uffb7\043\uffb7" +
    "\045\uffb7\057\uffb7\064\uffb7\067\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\074\uffb7\076\uffb7\077\uffb7\101\uffb7\102\uffb7\103\uffb7" +
    "\104\uffb7\105\uffb7\001\002\000\034\014\u015c\032\127\035" +
    "\125\045\115\057\121\064\120\070\130\076\124\077\123" +
    "\102\114\103\113\104\116\105\012\001\002\000\052\005" +
    "\uff81\006\uff81\007\uff81\011\uff81\012\uff81\013\u0159\014\236" +
    "\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\033\uff81\034\uff81\036\237\041\uff81\073\uff81" +
    "\001\002\000\004\005\uffa2\001\002\000\060\010\uffb6\014" +
    "\uffb6\017\uffb6\020\uffb6\032\uffb6\035\uffb6\042\uffb6\043\uffb6" +
    "\045\uffb6\057\uffb6\064\uffb6\067\uffb6\070\uffb6\071\uffb6\072" +
    "\uffb6\074\uffb6\076\uffb6\077\uffb6\101\uffb6\102\uffb6\103\uffb6" +
    "\104\uffb6\105\uffb6\001\002\000\034\014\122\032\127\035" +
    "\125\045\115\057\121\064\120\070\130\076\u0150\077\123" +
    "\102\114\103\113\104\u014e\105\012\001\002\000\034\014" +
    "\122\032\127\035\125\045\115\057\121\064\120\070\130" +
    "\076\124\077\123\102\114\103\113\104\116\105\012\001" +
    "\002\000\004\014\u0148\001\002\000\014\005\uffa3\007\u0138" +
    "\023\173\041\u013a\073\u0139\001\002\000\004\005\u0137\001" +
    "\002\000\044\005\uff6e\006\uff6e\007\u0132\011\uff6e\012\uff6e" +
    "\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031" +
    "\uff6e\032\uff6e\033\uff6e\034\uff6e\041\u011b\073\uff6e\001\002" +
    "\000\004\005\u0131\001\002\000\004\005\u0130\001\002\000" +
    "\036\014\122\032\127\035\125\045\115\057\121\064\120" +
    "\067\u0112\070\130\076\u0119\077\123\102\114\103\113\104" +
    "\116\105\012\001\002\000\010\010\074\065\u0126\105\012" +
    "\001\002\000\004\104\u0115\001\002\000\050\005\uff7e\006" +
    "\uff7e\007\220\011\077\012\uff7e\014\221\023\uff7e\024\uff7e" +
    "\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\034\uff7e\041\uff7e\073\uff7e\104\uffea\001\002\000\006" +
    "\005\u0116\013\u0117\001\002\000\062\010\uffaf\014\uffaf\017" +
    "\uffaf\020\uffaf\032\uffaf\035\uffaf\042\uffaf\043\uffaf\045\uffaf" +
    "\051\uffaf\057\uffaf\064\uffaf\067\uffaf\070\uffaf\071\uffaf\072" +
    "\uffaf\074\uffaf\076\uffaf\077\uffaf\101\uffaf\102\uffaf\103\uffaf" +
    "\104\uffaf\105\uffaf\001\002\000\036\014\122\032\127\035" +
    "\125\045\115\057\121\064\120\067\u0112\070\130\076\u0119" +
    "\077\123\102\114\103\113\104\116\105\012\001\002\000" +
    "\004\005\u0124\001\002\000\044\005\uff6e\006\uff6e\007\u011a" +
    "\011\uff6e\012\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027" +
    "\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\041\u011b" +
    "\073\uff6e\001\002\000\004\104\u0120\001\002\000\004\104" +
    "\u011c\001\002\000\004\014\u011d\001\002\000\036\014\122" +
    "\015\uffa1\032\127\035\125\045\115\057\121\064\120\070" +
    "\130\076\124\077\123\102\114\103\113\104\116\105\012" +
    "\001\002\000\004\015\u011f\001\002\000\004\005\uff65\001" +
    "\002\000\046\005\uff80\006\uff80\007\uff80\011\uff80\012\uff80" +
    "\014\u0121\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\034\uff80\041\uff80\073\uff80" +
    "\001\002\000\036\014\122\015\uffa1\032\127\035\125\045" +
    "\115\057\121\064\120\070\130\076\124\077\123\102\114" +
    "\103\113\104\116\105\012\001\002\000\004\015\u0123\001" +
    "\002\000\004\005\uff67\001\002\000\062\010\uffae\014\uffae" +
    "\017\uffae\020\uffae\032\uffae\035\uffae\042\uffae\043\uffae\045" +
    "\uffae\051\uffae\057\uffae\064\uffae\067\uffae\070\uffae\071\uffae" +
    "\072\uffae\074\uffae\076\uffae\077\uffae\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\001\002\000\004\014\u012b\001\002" +
    "\000\006\010\074\105\012\001\002\000\004\014\u0128\001" +
    "\002\000\036\014\122\015\uffa1\032\127\035\125\045\115" +
    "\057\121\064\120\070\130\076\124\077\123\102\114\103" +
    "\113\104\116\105\012\001\002\000\004\015\u012a\001\002" +
    "\000\004\005\uff69\001\002\000\036\014\122\015\uffa1\032" +
    "\127\035\125\045\115\057\121\064\120\070\130\076\124" +
    "\077\123\102\114\103\113\104\116\105\012\001\002\000" +
    "\004\015\u012d\001\002\000\004\005\uff6a\001\002\000\004" +
    "\005\u012f\001\002\000\062\010\uffb2\014\uffb2\017\uffb2\020" +
    "\uffb2\032\uffb2\035\uffb2\042\uffb2\043\uffb2\045\uffb2\051\uffb2" +
    "\057\uffb2\064\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\074" +
    "\uffb2\076\uffb2\077\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2" +
    "\105\uffb2\001\002\000\062\010\uffaa\014\uffaa\017\uffaa\020" +
    "\uffaa\032\uffaa\035\uffaa\042\uffaa\043\uffaa\045\uffaa\051\uffaa" +
    "\057\uffaa\064\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\074" +
    "\uffaa\076\uffaa\077\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa" +
    "\105\uffaa\001\002\000\062\010\uffab\014\uffab\017\uffab\020" +
    "\uffab\032\uffab\035\uffab\042\uffab\043\uffab\045\uffab\051\uffab" +
    "\057\uffab\064\uffab\067\uffab\070\uffab\071\uffab\072\uffab\074" +
    "\uffab\076\uffab\077\uffab\101\uffab\102\uffab\103\uffab\104\uffab" +
    "\105\uffab\001\002\000\004\104\u0133\001\002\000\050\005" +
    "\uff80\006\uff80\007\uff80\011\uff80\012\uff80\013\u0134\014\u0121" +
    "\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031" +
    "\uff80\032\uff80\033\uff80\034\uff80\041\uff80\073\uff80\001\002" +
    "\000\036\014\122\032\127\035\125\045\115\057\121\064" +
    "\120\067\u0112\070\130\076\u0119\077\123\102\114\103\113" +
    "\104\116\105\012\001\002\000\004\005\u0136\001\002\000" +
    "\062\010\uffb0\014\uffb0\017\uffb0\020\uffb0\032\uffb0\035\uffb0" +
    "\042\uffb0\043\uffb0\045\uffb0\051\uffb0\057\uffb0\064\uffb0\067" +
    "\uffb0\070\uffb0\071\uffb0\072\uffb0\074\uffb0\076\uffb0\077\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\001\002\000" +
    "\062\010\uffb5\014\uffb5\017\uffb5\020\uffb5\032\uffb5\035\uffb5" +
    "\042\uffb5\043\uffb5\045\uffb5\051\uffb5\057\uffb5\064\uffb5\067" +
    "\uffb5\070\uffb5\071\uffb5\072\uffb5\074\uffb5\076\uffb5\077\uffb5" +
    "\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\001\002\000" +
    "\006\056\u0143\104\u0144\001\002\000\006\010\074\105\012" +
    "\001\002\000\004\104\u013b\001\002\000\004\014\u013c\001" +
    "\002\000\036\014\122\015\uffa1\032\127\035\125\045\115" +
    "\057\121\064\120\070\130\076\124\077\123\102\114\103" +
    "\113\104\116\105\012\001\002\000\004\015\u013e\001\002" +
    "\000\004\005\uff66\001\002\000\004\014\u0140\001\002\000" +
    "\036\014\122\015\uffa1\032\127\035\125\045\115\057\121" +
    "\064\120\070\130\076\124\077\123\102\114\103\113\104" +
    "\116\105\012\001\002\000\004\015\u0142\001\002\000\004" +
    "\005\uff63\001\002\000\004\005\uff64\001\002\000\004\014" +
    "\u0145\001\002\000\036\014\122\015\uffa1\032\127\035\125" +
    "\045\115\057\121\064\120\070\130\076\124\077\123\102" +
    "\114\103\113\104\116\105\012\001\002\000\004\015\u0147" +
    "\001\002\000\004\005\uff68\001\002\000\034\014\122\032" +
    "\127\035\125\045\115\057\121\064\120\070\130\076\124" +
    "\077\123\102\114\103\113\104\116\105\012\001\002\000" +
    "\006\015\u014a\023\173\001\002\000\056\010\074\014\122" +
    "\017\u0104\032\127\035\125\042\u010a\043\u0109\045\115\057" +
    "\u0105\064\120\067\u0112\070\130\071\u0111\072\u0110\074\u010f" +
    "\076\u010e\077\123\101\u010b\102\114\103\113\104\u0106\105" +
    "\012\001\002\000\062\010\uffb3\014\uffb3\017\uffb3\020\uffb3" +
    "\032\uffb3\035\uffb3\042\uffb3\043\uffb3\045\uffb3\051\uffb3\057" +
    "\uffb3\064\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\074\uffb3" +
    "\076\uffb3\077\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105" +
    "\uffb3\001\002\000\006\005\u014d\023\173\001\002\000\062" +
    "\010\uffa9\014\uffa9\017\uffa9\020\uffa9\032\uffa9\035\uffa9\042" +
    "\uffa9\043\uffa9\045\uffa9\051\uffa9\057\uffa9\064\uffa9\067\uffa9" +
    "\070\uffa9\071\uffa9\072\uffa9\074\uffa9\076\uffa9\077\uffa9\101" +
    "\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\001\002\000\046" +
    "\005\uff81\006\uff81\011\uff81\012\uff81\014\236\021\u0158\022" +
    "\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81" +
    "\031\uff81\032\uff81\033\uff81\034\uff81\036\237\001\002\000" +
    "\006\005\u0155\022\u0156\001\002\000\042\005\uff6e\006\uff6e" +
    "\007\u0152\011\uff6e\012\uff6e\022\uff6e\023\uff6e\024\uff6e\025" +
    "\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e" +
    "\034\uff6e\001\002\000\010\005\uffa5\022\uffa5\023\173\001" +
    "\002\000\004\104\u0153\001\002\000\042\005\uff80\006\uff80" +
    "\011\uff80\012\uff80\021\u0154\022\uff80\023\uff80\024\uff80\025" +
    "\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80" +
    "\034\uff80\001\002\000\006\005\uffa6\022\uffa6\001\002\000" +
    "\062\010\uffa8\014\uffa8\017\uffa8\020\uffa8\032\uffa8\035\uffa8" +
    "\042\uffa8\043\uffa8\045\uffa8\051\uffa8\057\uffa8\064\uffa8\067" +
    "\uffa8\070\uffa8\071\uffa8\072\uffa8\074\uffa8\076\uffa8\077\uffa8" +
    "\101\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\001\002\000" +
    "\034\014\122\032\127\035\125\045\115\057\121\064\120" +
    "\070\130\076\u0150\077\123\102\114\103\113\104\u014e\105" +
    "\012\001\002\000\006\005\uffa4\022\u0156\001\002\000\006" +
    "\005\uffa7\022\uffa7\001\002\000\036\014\122\032\127\035" +
    "\125\045\115\057\121\064\120\067\u0112\070\130\076\u0119" +
    "\077\123\102\114\103\113\104\116\105\012\001\002\000" +
    "\004\005\u015b\001\002\000\062\010\uffb1\014\uffb1\017\uffb1" +
    "\020\uffb1\032\uffb1\035\uffb1\042\uffb1\043\uffb1\045\uffb1\051" +
    "\uffb1\057\uffb1\064\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1" +
    "\074\uffb1\076\uffb1\077\uffb1\101\uffb1\102\uffb1\103\uffb1\104" +
    "\uffb1\105\uffb1\001\002\000\034\014\122\032\127\035\125" +
    "\045\115\057\121\064\120\070\130\076\124\077\123\102" +
    "\114\103\113\104\116\105\012\001\002\000\006\015\u015e" +
    "\023\173\001\002\000\110\006\uff7b\010\074\011\uff7b\012" +
    "\uff7b\014\122\017\u0104\023\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\027\uff7b\030\uff7b\031\uff7b\032\127\033\uff7b\034\uff7b\035" +
    "\125\042\u010a\043\u0109\045\115\057\u0105\064\120\067\u0112" +
    "\070\130\071\u0111\072\u0110\074\u010f\075\uff7b\076\u010e\077" +
    "\123\101\u010b\102\114\103\113\104\u0106\105\012\001\002" +
    "\000\062\010\uffad\014\uffad\017\uffad\020\uffad\032\uffad\035" +
    "\uffad\042\uffad\043\uffad\045\uffad\051\u0160\057\uffad\064\uffad" +
    "\067\uffad\070\uffad\071\uffad\072\uffad\074\uffad\076\uffad\077" +
    "\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105\uffad\001\002" +
    "\000\056\010\074\014\122\017\u0104\032\127\035\125\042" +
    "\u010a\043\u0109\045\115\057\u0105\064\120\067\u0112\070\130" +
    "\071\u0111\072\u0110\074\u010f\076\u010e\077\123\101\u010b\102" +
    "\114\103\113\104\u0106\105\012\001\002\000\062\010\uffac" +
    "\014\uffac\017\uffac\020\uffac\032\uffac\035\uffac\042\uffac\043" +
    "\uffac\045\uffac\051\uffac\057\uffac\064\uffac\067\uffac\070\uffac" +
    "\071\uffac\072\uffac\074\uffac\076\uffac\077\uffac\101\uffac\102" +
    "\uffac\103\uffac\104\uffac\105\uffac\001\002\000\060\010\074" +
    "\014\122\017\u0104\020\u0163\032\127\035\125\042\u010a\043" +
    "\u0109\045\115\057\u0105\064\120\067\u0112\070\130\071\u0111" +
    "\072\u0110\074\u010f\076\u010e\077\123\101\u010b\102\114\103" +
    "\113\104\u0106\105\012\001\002\000\062\010\uffb4\014\uffb4" +
    "\017\uffb4\020\uffb4\032\uffb4\035\uffb4\042\uffb4\043\uffb4\045" +
    "\uffb4\051\uffb4\057\uffb4\064\uffb4\067\uffb4\070\uffb4\071\uffb4" +
    "\072\uffb4\074\uffb4\076\uffb4\077\uffb4\101\uffb4\102\uffb4\103" +
    "\uffb4\104\uffb4\105\uffb4\001\002\000\006\017\u0166\053\u0165" +
    "\001\002\000\004\105\012\001\002\000\010\010\uffc5\020" +
    "\uffc5\105\uffc5\001\002\000\010\010\074\020\u016a\105\012" +
    "\001\002\000\004\005\u016f\001\002\000\004\104\u016b\001" +
    "\002\000\022\002\uffd9\017\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\063\uffd9\066\uffd9\100\uffd9\001\002\000\004\014\u016c\001" +
    "\002\000\010\010\074\015\uffbb\105\012\001\002\000\004" +
    "\015\u016e\001\002\000\004\005\uffc6\001\002\000\010\010" +
    "\uffc4\020\uffc4\105\uffc4\001\002\000\004\017\u0171\001\002" +
    "\000\010\010\uffc5\020\uffc5\105\uffc5\001\002\000\010\010" +
    "\074\020\u0173\105\012\001\002\000\022\002\uffd8\017\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\063\uffd8\066\uffd8\100\uffd8\001" +
    "\002\000\004\013\u0175\001\002\000\006\010\074\105\012" +
    "\001\002\000\004\005\u0177\001\002\000\022\002\uffde\017" +
    "\uffde\046\uffde\047\uffde\050\uffde\063\uffde\066\uffde\100\uffde" +
    "\001\002\000\026\002\uffee\017\uffee\046\uffee\047\uffee\050" +
    "\uffee\054\uffee\061\uffee\063\uffee\066\uffee\100\uffee\001\002" +
    "\000\004\105\012\001\002\000\070\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\017\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\037\uffe1\041\uffe1" +
    "\051\uffe1\062\uffe1\073\uffe1\075\uffe1\104\uffe1\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\006\004\003\005\004\001\001\000\002\001" +
    "\001\000\004\006\005\001\001\000\002\001\001\000\010" +
    "\017\012\020\010\021\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\014\001\001\000\006\007\016\012\015\001\001\000" +
    "\010\011\035\013\037\022\036\001\001\000\002\001\001" +
    "\000\006\002\023\003\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\023\003\026\001\001\000\002\001" +
    "\001\000\010\017\030\020\010\021\007\001\001\000\002" +
    "\001\001\000\010\017\032\020\010\021\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\054\036\055\037\056\001\001\000" +
    "\014\002\023\003\041\017\044\020\010\021\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\046\001\001" +
    "\000\002\001\001\000\010\017\050\020\010\021\007\001" +
    "\001\000\002\001\001\000\010\017\052\020\010\021\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u0101\001\001\000\012\014\356\017\075\020" +
    "\010\021\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\317\017\307\020\010\021" +
    "\007\001\001\000\016\014\207\017\075\020\010\021\007" +
    "\040\276\041\271\001\001\000\004\035\070\001\001\000" +
    "\020\014\071\017\075\020\010\021\007\034\074\036\055" +
    "\037\072\001\001\000\002\001\001\000\004\035\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\077\015\100\017\075\020\010\021\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\077\015\103\017\075\020\010\021\007\001" +
    "\001\000\002\001\001\000\014\014\071\017\075\020\010" +
    "\021\007\034\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\207\017\075\020\010" +
    "\021\007\040\270\041\271\001\001\000\032\017\116\020" +
    "\010\021\007\047\125\050\137\051\136\052\135\053\134" +
    "\054\133\055\131\056\130\063\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\017\116\020\010\021\007" +
    "\047\243\050\137\051\136\052\135\053\134\054\133\055" +
    "\131\056\130\063\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\017\116\020\010\021" +
    "\007\047\201\050\137\051\136\052\135\053\134\054\133" +
    "\055\131\056\130\063\132\001\001\000\032\017\116\020" +
    "\010\021\007\047\177\050\137\051\136\052\135\053\134" +
    "\054\133\055\131\056\130\063\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\116\020\010\021\007" +
    "\055\174\056\130\063\132\001\001\000\002\001\001\000" +
    "\016\017\116\020\010\021\007\055\170\056\130\063\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\017\116\020\010\021\007\051\141\052\135\053\134" +
    "\054\133\055\131\056\130\063\132\001\001\000\002\001" +
    "\001\000\024\017\116\020\010\021\007\052\167\053\134" +
    "\054\133\055\131\056\130\063\132\001\001\000\024\017" +
    "\116\020\010\021\007\052\144\053\134\054\133\055\131" +
    "\056\130\063\132\001\001\000\002\001\001\000\022\017" +
    "\116\020\010\021\007\053\166\054\133\055\131\056\130" +
    "\063\132\001\001\000\022\017\116\020\010\021\007\053" +
    "\165\054\133\055\131\056\130\063\132\001\001\000\022" +
    "\017\116\020\010\021\007\053\164\054\133\055\131\056" +
    "\130\063\132\001\001\000\022\017\116\020\010\021\007" +
    "\053\151\054\133\055\131\056\130\063\132\001\001\000" +
    "\002\001\001\000\020\017\116\020\010\021\007\054\163" +
    "\055\131\056\130\063\132\001\001\000\020\017\116\020" +
    "\010\021\007\054\154\055\131\056\130\063\132\001\001" +
    "\000\002\001\001\000\016\017\116\020\010\021\007\055" +
    "\162\056\130\063\132\001\001\000\016\017\116\020\010" +
    "\021\007\055\161\056\130\063\132\001\001\000\016\017" +
    "\116\020\010\021\007\055\160\056\130\063\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\017\116\020\010\021\007\050\173\051\136" +
    "\052\135\053\134\054\133\055\131\056\130\063\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\017\116\020\010\021\007\047\203" +
    "\050\137\051\136\052\135\053\134\054\133\055\131\056" +
    "\130\063\132\001\001\000\002\001\001\000\032\017\116" +
    "\020\010\021\007\047\205\050\137\051\136\052\135\053" +
    "\134\054\133\055\131\056\130\063\132\001\001\000\002" +
    "\001\001\000\014\014\207\017\075\020\010\021\007\041" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\017\116\020\010\021\007\047\213\050" +
    "\137\051\136\052\135\053\134\054\133\055\131\056\130" +
    "\063\132\001\001\000\002\001\001\000\032\017\116\020" +
    "\010\021\007\047\215\050\137\051\136\052\135\053\134" +
    "\054\133\055\131\056\130\063\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\017\116" +
    "\020\010\021\007\046\221\047\222\050\137\051\136\052" +
    "\135\053\134\054\133\055\131\056\130\063\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\017\116\020" +
    "\010\021\007\046\224\047\222\050\137\051\136\052\135" +
    "\053\134\054\133\055\131\056\130\063\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\017\116\020\010\021\007\046\233\047\222\050\137\051" +
    "\136\052\135\053\134\054\133\055\131\056\130\063\132" +
    "\001\001\000\034\017\116\020\010\021\007\046\231\047" +
    "\222\050\137\051\136\052\135\053\134\054\133\055\131" +
    "\056\130\063\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\017\116" +
    "\020\010\021\007\046\241\047\222\050\137\051\136\052" +
    "\135\053\134\054\133\055\131\056\130\063\132\001\001" +
    "\000\034\017\116\020\010\021\007\046\237\047\222\050" +
    "\137\051\136\052\135\053\134\054\133\055\131\056\130" +
    "\063\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\057\254\060\246\062\251\063\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\057\254\060\256\062\251\063\250" +
    "\001\001\000\002\001\001\000\010\061\261\062\260\063" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\061\264\062\260\063\250\001\001\000" +
    "\002\001\001\000\032\017\116\020\010\021\007\047\266" +
    "\050\137\051\136\052\135\053\134\054\133\055\131\056" +
    "\130\063\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\207\017" +
    "\075\020\010\021\007\040\273\041\271\001\001\000\002" +
    "\001\001\000\004\036\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\306\017\307" +
    "\020\010\021\007\001\001\000\004\035\302\001\001\000" +
    "\020\014\071\017\075\020\010\021\007\034\074\036\055" +
    "\037\303\001\001\000\004\035\304\001\001\000\014\014" +
    "\071\017\075\020\010\021\007\034\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\311\017\307\020\010\021\007\001\001\000\002\001\001" +
    "\000\004\035\313\001\001\000\020\014\071\017\075\020" +
    "\010\021\007\034\074\036\055\037\314\001\001\000\004" +
    "\035\315\001\001\000\014\014\071\017\075\020\010\021" +
    "\007\034\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\321\001\001\000\020\014\071\017\075\020" +
    "\010\021\007\034\074\036\055\037\322\001\001\000\004" +
    "\035\323\001\001\000\014\014\071\017\075\020\010\021" +
    "\007\034\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\334\030\354\001\001\000\004\027\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\334\030\336\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\342\017\075\020\010\021\007\025\343\026\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\342\017\075\020\010\021\007\025\343\026" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\334\030\351\001\001\000\002\001" +
    "\001\000\004\027\353\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\207\017\075\020\010\021\007\040\374" +
    "\041\271\001\001\000\004\027\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\207\017\075\020\010" +
    "\021\007\040\365\041\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\017\116\020\010\021\007\031\372" +
    "\047\371\050\137\051\136\052\135\053\134\054\133\055" +
    "\131\056\130\063\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\017\116\020\010\021\007" +
    "\031\377\047\371\050\137\051\136\052\135\053\134\054" +
    "\133\055\131\056\130\063\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\014\u0112\017\u0113\020\010\021" +
    "\007\043\u0107\045\u010c\047\u010b\050\137\051\136\052\135" +
    "\053\134\054\133\055\131\056\130\063\132\064\u0106\001" +
    "\001\000\002\001\001\000\004\042\u0161\001\001\000\032" +
    "\017\116\020\010\021\007\047\201\050\137\051\136\052" +
    "\135\053\134\054\133\055\131\056\130\063\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\017\116\020\010\021\007\044\u014e\047\u0150\050\137" +
    "\051\136\052\135\053\134\054\133\055\131\056\130\063" +
    "\132\001\001\000\032\017\116\020\010\021\007\047\u014b" +
    "\050\137\051\136\052\135\053\134\054\133\055\131\056" +
    "\130\063\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\017\116\020\010\021\007\045\u012d" +
    "\047\u010b\050\137\051\136\052\135\053\134\054\133\055" +
    "\131\056\130\063\132\064\u0106\001\001\000\012\014\u0124" +
    "\017\075\020\010\021\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\017\116\020\010\021\007\045\u0117\047\u010b\050\137\051" +
    "\136\052\135\053\134\054\133\055\131\056\130\063\132" +
    "\064\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\017\116\020\010\021\007\046\u011d\047\222\050\137\051" +
    "\136\052\135\053\134\054\133\055\131\056\130\063\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\017\116\020\010\021\007\046\u0121\047\222" +
    "\050\137\051\136\052\135\053\134\054\133\055\131\056" +
    "\130\063\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\u0126\017" +
    "\075\020\010\021\007\001\001\000\002\001\001\000\034" +
    "\017\116\020\010\021\007\046\u0128\047\222\050\137\051" +
    "\136\052\135\053\134\054\133\055\131\056\130\063\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\017" +
    "\116\020\010\021\007\046\u012b\047\222\050\137\051\136" +
    "\052\135\053\134\054\133\055\131\056\130\063\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\017\116\020\010" +
    "\021\007\045\u0134\047\u010b\050\137\051\136\052\135\053" +
    "\134\054\133\055\131\056\130\063\132\064\u0106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\u013e\017\075\020\010\021\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\017" +
    "\116\020\010\021\007\046\u013c\047\222\050\137\051\136" +
    "\052\135\053\134\054\133\055\131\056\130\063\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\017\116\020\010\021\007\046\u0140\047\222\050" +
    "\137\051\136\052\135\053\134\054\133\055\131\056\130" +
    "\063\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\017\116\020\010" +
    "\021\007\046\u0145\047\222\050\137\051\136\052\135\053" +
    "\134\054\133\055\131\056\130\063\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\017\116\020\010\021" +
    "\007\047\u0148\050\137\051\136\052\135\053\134\054\133" +
    "\055\131\056\130\063\132\001\001\000\002\001\001\000" +
    "\042\014\u0112\017\u0113\020\010\021\007\043\u014a\045\u010c" +
    "\047\u010b\050\137\051\136\052\135\053\134\054\133\055" +
    "\131\056\130\063\132\064\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\017\116\020\010\021\007\044\u0156\047\u0150" +
    "\050\137\051\136\052\135\053\134\054\133\055\131\056" +
    "\130\063\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\017\116\020\010\021\007\045\u0159\047\u010b\050" +
    "\137\051\136\052\135\053\134\054\133\055\131\056\130" +
    "\063\132\064\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\017\116\020\010\021\007\047\u015c\050\137" +
    "\051\136\052\135\053\134\054\133\055\131\056\130\063" +
    "\132\001\001\000\002\001\001\000\042\014\u0112\017\u0113" +
    "\020\010\021\007\043\u015e\045\u010c\047\u010b\050\137\051" +
    "\136\052\135\053\134\054\133\055\131\056\130\063\132" +
    "\064\u0106\001\001\000\002\001\001\000\042\014\u0112\017" +
    "\u0113\020\010\021\007\043\u0160\045\u010c\047\u010b\050\137" +
    "\051\136\052\135\053\134\054\133\055\131\056\130\063" +
    "\132\064\u0106\001\001\000\002\001\001\000\042\014\u0112" +
    "\017\u0113\020\010\021\007\043\u0107\045\u010c\047\u010b\050" +
    "\137\051\136\052\135\053\134\054\133\055\131\056\130" +
    "\063\132\064\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\u016f\017\307\020\010\021\007\001\001" +
    "\000\004\033\u0166\001\001\000\014\014\u0168\017\075\020" +
    "\010\021\007\032\u0167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\207\017\075\020\010\021\007\040\u016c\041\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0171\001\001\000\014\014\u0168" +
    "\017\075\020\010\021\007\032\u0167\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\u0175\017\075\020\010" +
    "\021\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\010\021\u0179\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public ABS.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (ABS.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		ABS.Absyn.Program start_val = (ABS.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // AnyIdent ::= _IDENT_ 
            {
              ABS.Absyn.AnyIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyIden(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnyIdent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // AnyIdent ::= TypeIdent 
            {
              ABS.Absyn.AnyIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyTyIden(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnyIdent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListAnyIdent ::= AnyIdent 
            {
              ABS.Absyn.ListAnyIdent RESULT =null;
		ABS.Absyn.AnyIdent p_1 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListAnyIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnyIdent",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListAnyIdent ::= AnyIdent _SYMB_0 ListAnyIdent 
            {
              ABS.Absyn.ListAnyIdent RESULT =null;
		ABS.Absyn.AnyIdent p_1 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListAnyIdent p_3 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnyIdent",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= ListModule 
            {
              ABS.Absyn.Program RESULT =null;
		ABS.Absyn.ListModule p_1 = (ABS.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Prog(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListModule ::= 
            {
              ABS.Absyn.ListModule RESULT =null;
		 RESULT = new ABS.Absyn.ListModule(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListModule ::= ListModule Module 
            {
              ABS.Absyn.ListModule RESULT =null;
		ABS.Absyn.ListModule p_1 = (ABS.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Module p_2 = (ABS.Absyn.Module)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Module ::= _SYMB_50 QualType _SYMB_1 ListExport ListImport ListDecl MaybeBlock 
            {
              ABS.Absyn.Module RESULT =null;
		ABS.Absyn.QualType p_2 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListExport p_4 = (ABS.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListImport p_5 = (ABS.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListDecl p_6 = (ABS.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.MaybeBlock p_7 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Modul(p_2,p_4,p_5,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Module",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Export ::= _SYMB_38 ListAnyIdent 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyExport(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Export ::= _SYMB_38 ListAnyIdent _SYMB_41 QualType 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.QualType p_4 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyFromExport(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Export ::= _SYMB_38 _SYMB_2 
            {
              ABS.Absyn.Export RESULT =null;
		 RESULT = new ABS.Absyn.StarExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Export ::= _SYMB_38 _SYMB_2 _SYMB_41 QualType 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.QualType p_4 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.StarFromExport(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListExport ::= 
            {
              ABS.Absyn.ListExport RESULT =null;
		 RESULT = new ABS.Absyn.ListExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListExport ::= ListExport Export _SYMB_1 
            {
              ABS.Absyn.ListExport RESULT =null;
		ABS.Absyn.ListExport p_1 = (ABS.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Export p_2 = (ABS.Absyn.Export)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Import ::= ImportType QualType _SYMB_3 AnyIdent 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.QualType p_2 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.AnyIdent p_4 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyImport(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Import ::= ImportType ListAnyIdent _SYMB_41 QualType 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.QualType p_4 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyFromImport(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Import ::= ImportType _SYMB_2 _SYMB_41 QualType 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.QualType p_4 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.StarFromImport(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListImport ::= 
            {
              ABS.Absyn.ListImport RESULT =null;
		 RESULT = new ABS.Absyn.ListImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListImport ::= ListImport Import _SYMB_1 
            {
              ABS.Absyn.ListImport RESULT =null;
		ABS.Absyn.ListImport p_1 = (ABS.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Import p_2 = (ABS.Absyn.Import)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ImportType ::= _SYMB_40 
            {
              ABS.Absyn.ImportType RESULT =null;
		 RESULT = new ABS.Absyn.ForeignImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportType",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ImportType ::= _SYMB_45 
            {
              ABS.Absyn.ImportType RESULT =null;
		 RESULT = new ABS.Absyn.NormalImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportType",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= _SYMB_4 
            {
              ABS.Absyn.Type RESULT =null;
		 RESULT = new ABS.Absyn.TUnderscore(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= QualType 
            {
              ABS.Absyn.Type RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.TSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= QualType _SYMB_5 ListType _SYMB_6 
            {
              ABS.Absyn.Type RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListType p_3 = (ABS.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.TGen(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListType ::= Type 
            {
              ABS.Absyn.ListType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListType ::= Type _SYMB_0 ListType 
            {
              ABS.Absyn.ListType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListType p_3 = (ABS.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListQualType ::= QualType 
            {
              ABS.Absyn.ListQualType RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListQualType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQualType",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListQualType ::= QualType _SYMB_0 ListQualType 
            {
              ABS.Absyn.ListQualType RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListQualType p_3 = (ABS.Absyn.ListQualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQualType",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // QualType ::= ListQualTypeSegment 
            {
              ABS.Absyn.QualType RESULT =null;
		ABS.Absyn.ListQualTypeSegment p_1 = (ABS.Absyn.ListQualTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.QType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QualType",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // QualTypeSegment ::= TypeIdent 
            {
              ABS.Absyn.QualTypeSegment RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.QTypeSegment(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QualTypeSegment",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListQualTypeSegment ::= QualTypeSegment 
            {
              ABS.Absyn.ListQualTypeSegment RESULT =null;
		ABS.Absyn.QualTypeSegment p_1 = (ABS.Absyn.QualTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListQualTypeSegment(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQualTypeSegment",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListQualTypeSegment ::= QualTypeSegment _SYMB_3 ListQualTypeSegment 
            {
              ABS.Absyn.ListQualTypeSegment RESULT =null;
		ABS.Absyn.QualTypeSegment p_1 = (ABS.Absyn.QualTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListQualTypeSegment p_3 = (ABS.Absyn.ListQualTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQualTypeSegment",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListDecl ::= 
            {
              ABS.Absyn.ListDecl RESULT =null;
		 RESULT = new ABS.Absyn.ListDecl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListDecl ::= ListDecl Decl 
            {
              ABS.Absyn.ListDecl RESULT =null;
		ABS.Absyn.ListDecl p_1 = (ABS.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Decl p_2 = (ABS.Absyn.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Decl ::= _SYMB_60 TypeIdent _SYMB_7 Type _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Type p_4 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.TypeDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Decl ::= _SYMB_35 TypeIdent _SYMB_7 ListConstrIdent _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListConstrIdent p_4 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.DataDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Decl ::= _SYMB_35 TypeIdent _SYMB_5 ListTypeIdent _SYMB_6 _SYMB_7 ListConstrIdent _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListTypeIdent p_4 = (ABS.Absyn.ListTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.ListConstrIdent p_7 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.DataParDecl(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Decl ::= _SYMB_36 Type _IDENT_ _SYMB_8 ListParam _SYMB_9 _SYMB_7 FunBody _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListParam p_5 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.FunBody p_8 = (ABS.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FunDecl(p_2,p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Decl ::= _SYMB_36 Type _IDENT_ _SYMB_5 ListTypeIdent _SYMB_6 _SYMB_8 ListParam _SYMB_9 _SYMB_7 FunBody _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		ABS.Absyn.ListTypeIdent p_5 = (ABS.Absyn.ListTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		ABS.Absyn.ListParam p_8 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.FunBody p_11 = (ABS.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FunParDecl(p_2,p_3,p_5,p_8,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Decl ::= _SYMB_47 TypeIdent _SYMB_11 ListMethSignat _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListMethSignat p_4 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.InterfDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Decl ::= _SYMB_47 TypeIdent _SYMB_39 ListQualType _SYMB_11 ListMethSignat _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListQualType p_4 = (ABS.Absyn.ListQualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListMethSignat p_6 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ExtendsDecl(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Decl ::= _SYMB_34 TypeIdent _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_4 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_5 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_6 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassDecl(p_2,p_4,p_5,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Decl ::= _SYMB_34 TypeIdent _SYMB_8 ListParam _SYMB_9 _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListClassBody p_7 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_8 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_9 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassParamDecl(p_2,p_4,p_7,p_8,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Decl ::= _SYMB_34 TypeIdent _SYMB_44 ListQualType _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		ABS.Absyn.ListQualType p_4 = (ABS.Absyn.ListQualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_6 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_7 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_8 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassImplements(p_2,p_4,p_6,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Decl ::= _SYMB_34 TypeIdent _SYMB_8 ListParam _SYMB_9 _SYMB_44 ListQualType _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ABS.Absyn.ListQualType p_7 = (ABS.Absyn.ListQualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_9 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_10 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_11 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassParamImplements(p_2,p_4,p_7,p_9,p_10,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ConstrIdent ::= TypeIdent 
            {
              ABS.Absyn.ConstrIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SinglConstrIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ConstrIdent ::= TypeIdent _SYMB_8 ListConstrType _SYMB_9 
            {
              ABS.Absyn.ConstrIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListConstrType p_3 = (ABS.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ParamConstrIdent(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ConstrType ::= Type 
            {
              ABS.Absyn.ConstrType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EmptyConstrType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ConstrType ::= Type _IDENT_ 
            {
              ABS.Absyn.ConstrType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.RecordConstrType(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListConstrType ::= 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		 RESULT = new ABS.Absyn.ListConstrType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListConstrType ::= ConstrType 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		ABS.Absyn.ConstrType p_1 = (ABS.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListConstrType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListConstrType ::= ConstrType _SYMB_0 ListConstrType 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		ABS.Absyn.ConstrType p_1 = (ABS.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListConstrType p_3 = (ABS.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListTypeIdent ::= TypeIdent 
            {
              ABS.Absyn.ListTypeIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListTypeIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypeIdent",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListTypeIdent ::= TypeIdent _SYMB_0 ListTypeIdent 
            {
              ABS.Absyn.ListTypeIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListTypeIdent p_3 = (ABS.Absyn.ListTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypeIdent",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListConstrIdent ::= ConstrIdent 
            {
              ABS.Absyn.ListConstrIdent RESULT =null;
		ABS.Absyn.ConstrIdent p_1 = (ABS.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListConstrIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListConstrIdent ::= ConstrIdent _SYMB_10 ListConstrIdent 
            {
              ABS.Absyn.ListConstrIdent RESULT =null;
		ABS.Absyn.ConstrIdent p_1 = (ABS.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListConstrIdent p_3 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FunBody ::= _SYMB_32 
            {
              ABS.Absyn.FunBody RESULT =null;
		 RESULT = new ABS.Absyn.BuiltinFunBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FunBody ::= PureExp 
            {
              ABS.Absyn.FunBody RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.NormalFunBody(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MethSignat ::= Type _IDENT_ _SYMB_8 ListParam _SYMB_9 
            {
              ABS.Absyn.MethSignat RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.MethSig(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethSignat",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListMethSignat ::= 
            {
              ABS.Absyn.ListMethSignat RESULT =null;
		 RESULT = new ABS.Absyn.ListMethSignat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSignat",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListMethSignat ::= ListMethSignat MethSignat _SYMB_1 
            {
              ABS.Absyn.ListMethSignat RESULT =null;
		ABS.Absyn.ListMethSignat p_1 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.MethSignat p_2 = (ABS.Absyn.MethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSignat",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ClassBody ::= Type _IDENT_ _SYMB_1 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldClassBody(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ClassBody ::= Type _IDENT_ _SYMB_7 PureExp _SYMB_1 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.PureExp p_4 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldAssignClassBody(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ClassBody ::= Type _IDENT_ _SYMB_8 ListParam _SYMB_9 Block 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Block p_6 = (ABS.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.MethClassBody(p_1,p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListClassBody ::= 
            {
              ABS.Absyn.ListClassBody RESULT =null;
		 RESULT = new ABS.Absyn.ListClassBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListClassBody ::= ListClassBody ClassBody 
            {
              ABS.Absyn.ListClassBody RESULT =null;
		ABS.Absyn.ListClassBody p_1 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.ClassBody p_2 = (ABS.Absyn.ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Block ::= _SYMB_11 ListStm _SYMB_12 
            {
              ABS.Absyn.Block RESULT =null;
		ABS.Absyn.ListStm p_2 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Bloc(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MaybeBlock ::= Block 
            {
              ABS.Absyn.MaybeBlock RESULT =null;
		ABS.Absyn.Block p_1 = (ABS.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.JustBlock(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MaybeBlock ::= 
            {
              ABS.Absyn.MaybeBlock RESULT =null;
		 RESULT = new ABS.Absyn.NoBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListParam ::= 
            {
              ABS.Absyn.ListParam RESULT =null;
		 RESULT = new ABS.Absyn.ListParam(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListParam ::= Param 
            {
              ABS.Absyn.ListParam RESULT =null;
		ABS.Absyn.Param p_1 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListParam(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListParam ::= Param _SYMB_0 ListParam 
            {
              ABS.Absyn.ListParam RESULT =null;
		ABS.Absyn.Param p_1 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListParam p_3 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Param ::= Type _IDENT_ 
            {
              ABS.Absyn.Param RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Par(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Param",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListStm ::= 
            {
              ABS.Absyn.ListStm RESULT =null;
		 RESULT = new ABS.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListStm ::= ListStm Stm 
            {
              ABS.Absyn.ListStm RESULT =null;
		ABS.Absyn.ListStm p_1 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Stm p_2 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Stm ::= Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Exp p_1 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Stm ::= _SYMB_11 ListStm _SYMB_12 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.ListStm p_2 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Stm ::= _SYMB_61 _SYMB_8 PureExp _SYMB_9 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Stm ::= _SYMB_53 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Exp p_2 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SReturn(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Stm ::= _IDENT_ _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_3 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Stm ::= _SYMB_58 _SYMB_3 _IDENT_ _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_5 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SFieldAss(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Stm ::= Type _IDENT_ _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SDec(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Stm ::= Type _IDENT_ _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_4 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SDecAss(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Stm ::= _SYMB_43 _SYMB_8 PureExp _SYMB_9 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SIf(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stm ::= _SYMB_43 _SYMB_8 PureExp _SYMB_9 Stm _SYMB_37 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_7 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stm ::= _SYMB_56 _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		 RESULT = new ABS.Absyn.SSuspend(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stm ::= _SYMB_54 _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		 RESULT = new ABS.Absyn.SSkip(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stm ::= _SYMB_30 PureExp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAssert(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stm ::= _SYMB_31 Guard _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Guard p_2 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAwait(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Guard ::= _IDENT_ _SYMB_13 
            {
              ABS.Absyn.Guard RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.VarGuard(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Guard ::= _SYMB_58 _SYMB_3 _IDENT_ _SYMB_13 
            {
              ABS.Absyn.Guard RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldGuard(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Guard ::= PureExp 
            {
              ABS.Absyn.Guard RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpGuard(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Guard ::= Guard _SYMB_14 Guard 
            {
              ABS.Absyn.Guard RESULT =null;
		ABS.Absyn.Guard p_1 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Guard p_3 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AndGuard(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp ::= PureExp 
            {
              ABS.Absyn.Exp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpP(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp ::= EffExp 
            {
              ABS.Absyn.Exp RESULT =null;
		ABS.Absyn.EffExp p_1 = (ABS.Absyn.EffExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpE(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ListPureExp ::= 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		 RESULT = new ABS.Absyn.ListPureExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ListPureExp ::= PureExp 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListPureExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ListPureExp ::= PureExp _SYMB_0 ListPureExp 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PureExp ::= PureExp _SYMB_15 PureExp1 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PureExp ::= PureExp1 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PureExp ::= _SYMB_48 _SYMB_8 Param _SYMB_9 _SYMB_7 PureExp _SYMB_46 PureExp 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Param p_3 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.PureExp p_6 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_8 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Let(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PureExp ::= _SYMB_43 PureExp _SYMB_57 PureExp _SYMB_37 PureExp 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.PureExp p_4 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_6 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PureExp ::= _SYMB_33 PureExp _SYMB_11 ListCaseBranch _SYMB_12 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListCaseBranch p_4 = (ABS.Absyn.ListCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Case(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PureExp1 ::= PureExp1 _SYMB_16 PureExp2 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PureExp1 ::= PureExp2 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PureExp2 ::= PureExp2 _SYMB_17 PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PureExp2 ::= PureExp2 _SYMB_18 PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ENeq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PureExp2 ::= PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PureExp3 ::= PureExp3 _SYMB_5 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PureExp3 ::= PureExp3 _SYMB_19 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PureExp3 ::= PureExp3 _SYMB_6 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EGt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PureExp3 ::= PureExp3 _SYMB_20 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EGe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PureExp3 ::= PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PureExp4 ::= PureExp4 _SYMB_21 PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PureExp4 ::= PureExp4 _SYMB_22 PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PureExp4 ::= PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PureExp5 ::= PureExp5 _SYMB_2 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PureExp5 ::= PureExp5 _SYMB_23 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PureExp5 ::= PureExp5 _SYMB_24 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EMod(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PureExp5 ::= PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PureExp6 ::= _SYMB_25 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELogNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PureExp6 ::= _SYMB_22 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EIntNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PureExp6 ::= PureExp7 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PureExp7 ::= _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PureExp7 ::= QualType _SYMB_3 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EQualFunCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PureExp7 ::= _IDENT_ _SYMB_26 ListPureExp _SYMB_27 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ENaryFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PureExp7 ::= QualType _SYMB_3 _IDENT_ _SYMB_26 ListPureExp _SYMB_27 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ENaryQualFunCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PureExp7 ::= _IDENT_ 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PureExp7 ::= _SYMB_58 _SYMB_3 _IDENT_ 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EThis(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PureExp7 ::= QualType _SYMB_3 _IDENT_ 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EQualVar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PureExp7 ::= QualType 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ESinglConstr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PureExp7 ::= QualType _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EParamConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PureExp7 ::= Literal 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Literal p_1 = (ABS.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PureExp7 ::= _SYMB_8 PureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CaseBranch ::= Pattern _SYMB_28 PureExp 
            {
              ABS.Absyn.CaseBranch RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.CaseBranc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseBranch",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ListCaseBranch ::= CaseBranch _SYMB_1 
            {
              ABS.Absyn.ListCaseBranch RESULT =null;
		ABS.Absyn.CaseBranch p_1 = (ABS.Absyn.CaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ListCaseBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCaseBranch",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ListCaseBranch ::= CaseBranch _SYMB_1 ListCaseBranch 
            {
              ABS.Absyn.ListCaseBranch RESULT =null;
		ABS.Absyn.CaseBranch p_1 = (ABS.Absyn.CaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListCaseBranch p_3 = (ABS.Absyn.ListCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCaseBranch",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ListPattern ::= 
            {
              ABS.Absyn.ListPattern RESULT =null;
		 RESULT = new ABS.Absyn.ListPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ListPattern ::= Pattern 
            {
              ABS.Absyn.ListPattern RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ListPattern ::= Pattern _SYMB_0 ListPattern 
            {
              ABS.Absyn.ListPattern RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListPattern p_3 = (ABS.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Pattern ::= _IDENT_ 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.PIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Pattern ::= Literal 
            {
              ABS.Absyn.Pattern RESULT =null;
		ABS.Absyn.Literal p_1 = (ABS.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.PLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Pattern ::= TypeIdent 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.PSinglConstr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Pattern ::= TypeIdent _SYMB_8 ListPattern _SYMB_9 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPattern p_3 = (ABS.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.PParamConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Pattern ::= _SYMB_4 
            {
              ABS.Absyn.Pattern RESULT =null;
		 RESULT = new ABS.Absyn.PUnderscore(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Literal ::= _SYMB_52 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LNull(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Literal ::= _SYMB_58 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LThis(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Literal ::= _SYMB_59 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LThisDC(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Literal ::= _STRING_ 
            {
              ABS.Absyn.Literal RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.LStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Literal ::= _INTEGER_ 
            {
              ABS.Absyn.Literal RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.LInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EffExp ::= _SYMB_51 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_4 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.New(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EffExp ::= _SYMB_51 _SYMB_49 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.Type p_3 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.NewLocal(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EffExp ::= PureExp _SYMB_3 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EffExp ::= _SYMB_58 _SYMB_3 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ThisSyncMethCall(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EffExp ::= PureExp _SYMB_29 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.AsyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EffExp ::= _SYMB_58 _SYMB_29 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ThisAsyncMethCall(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EffExp ::= PureExp _SYMB_3 _SYMB_42 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ABS.Absyn.Get(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EffExp ::= PureExp _SYMB_55 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.Type p_3 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Spawns(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",50, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

