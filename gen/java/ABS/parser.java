
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Mon Oct 06 16:36:31 CEST 2014
//----------------------------------------------------

package ABS;


/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Mon Oct 06 16:36:31 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\003" +
    "\000\002\005\002\000\002\005\004\000\002\006\011\000" +
    "\002\007\004\000\002\007\006\000\002\007\004\000\002" +
    "\007\006\000\002\010\002\000\002\010\005\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\012\002" +
    "\000\002\012\005\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\006\000\002" +
    "\015\003\000\002\015\005\000\002\016\003\000\002\017" +
    "\003\000\002\017\005\000\002\020\002\000\002\020\004" +
    "\000\002\021\007\000\002\021\007\000\002\021\012\000" +
    "\002\021\013\000\002\021\016\000\002\021\007\000\002" +
    "\021\011\000\002\021\011\000\002\021\014\000\002\021" +
    "\013\000\002\021\016\000\002\022\003\000\002\022\006" +
    "\000\002\023\003\000\002\023\004\000\002\024\002\000" +
    "\002\024\003\000\002\024\005\000\002\025\003\000\002" +
    "\025\005\000\002\026\003\000\002\026\005\000\002\027" +
    "\003\000\002\027\003\000\002\030\007\000\002\031\002" +
    "\000\002\031\005\000\002\032\005\000\002\032\007\000" +
    "\002\032\010\000\002\033\002\000\002\033\004\000\002" +
    "\034\005\000\002\035\003\000\002\035\002\000\002\036" +
    "\002\000\002\036\003\000\002\036\005\000\002\037\004" +
    "\000\002\040\002\000\002\040\004\000\002\041\004\000" +
    "\002\041\005\000\002\041\007\000\002\041\005\000\002" +
    "\041\006\000\002\041\010\000\002\041\005\000\002\041" +
    "\007\000\002\041\007\000\002\041\011\000\002\041\004" +
    "\000\002\041\004\000\002\041\005\000\002\041\005\000" +
    "\002\042\004\000\002\042\006\000\002\042\003\000\002" +
    "\042\005\000\002\043\003\000\002\043\003\000\002\044" +
    "\002\000\002\044\003\000\002\044\005\000\002\045\005" +
    "\000\002\045\003\000\002\045\012\000\002\045\010\000" +
    "\002\045\007\000\002\046\005\000\002\046\003\000\002" +
    "\047\005\000\002\047\005\000\002\047\003\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\003\000\002\051\005\000\002\051\005\000" +
    "\002\051\003\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\003\000\002\053\004\000\002\053" +
    "\004\000\002\053\003\000\002\054\006\000\002\054\010" +
    "\000\002\054\006\000\002\054\010\000\002\054\003\000" +
    "\002\054\005\000\002\054\005\000\002\054\003\000\002" +
    "\054\006\000\002\054\003\000\002\054\005\000\002\055" +
    "\005\000\002\056\004\000\002\056\005\000\002\057\002" +
    "\000\002\057\003\000\002\057\005\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\006\000\002" +
    "\060\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\062\007" +
    "\000\002\062\010\000\002\062\010\000\002\062\010\000" +
    "\002\062\010\000\002\062\010\000\002\062\005\000\002" +
    "\062\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0174\000\006\002\ufffb\066\ufffb\001\002\000\004\002" +
    "\u0176\001\002\000\006\002\ufffc\066\007\001\002\000\006" +
    "\002\ufffa\066\ufffa\001\002\000\006\010\010\105\014\001" +
    "\002\000\070\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb" +
    "\012\uffeb\014\uffeb\015\uffeb\017\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\037\uffeb\041\uffeb\051\uffeb\062\uffeb\073" +
    "\uffeb\075\uffeb\104\uffeb\001\002\000\004\005\025\001\002" +
    "\000\070\004\uffe5\005\uffe5\006\uffe5\007\023\011\uffe5\012" +
    "\uffe5\014\uffe5\015\uffe5\017\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\037\uffe5\041\uffe5\051\uffe5\062\uffe5\073\uffe5" +
    "\075\uffe5\104\uffe5\001\002\000\070\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\011\015\012\uffea\014\uffea\015\uffea\017\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\037\uffea\041\uffea" +
    "\051\uffea\062\uffea\073\uffea\075\uffea\104\uffea\001\002\000" +
    "\070\004\uffe6\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6" +
    "\014\uffe6\015\uffe6\017\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\037\uffe6\041\uffe6\051\uffe6\062\uffe6\073\uffe6\075" +
    "\uffe6\104\uffe6\001\002\000\006\010\010\105\014\001\002" +
    "\000\010\004\021\012\uffe8\017\uffe8\001\002\000\004\012" +
    "\020\001\002\000\070\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\011\uffe9\012\uffe9\014\uffe9\015\uffe9\017\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\037\uffe9\041\uffe9\051\uffe9\062" +
    "\uffe9\073\uffe9\075\uffe9\104\uffe9\001\002\000\006\010\010" +
    "\105\014\001\002\000\006\012\uffe7\017\uffe7\001\002\000" +
    "\004\105\014\001\002\000\070\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\011\uffe4\012\uffe4\014\uffe4\015\uffe4\017\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\037\uffe4\041\uffe4\051" +
    "\uffe4\062\uffe4\073\uffe4\075\uffe4\104\uffe4\001\002\000\030" +
    "\002\ufff4\017\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4\054" +
    "\ufff4\061\ufff4\063\ufff4\066\ufff4\100\ufff4\001\002\000\030" +
    "\002\uffef\017\uffef\046\uffef\047\uffef\050\uffef\052\031\054" +
    "\uffef\061\uffef\063\uffef\066\uffef\100\uffef\001\002\000\026" +
    "\002\uffe3\017\uffe3\046\uffe3\047\uffe3\050\uffe3\054\052\061" +
    "\046\063\uffe3\066\uffe3\100\uffe3\001\002\000\004\005\045" +
    "\001\002\000\010\006\033\104\034\105\036\001\002\000" +
    "\006\005\ufff8\055\043\001\002\000\006\005\ufff6\055\041" +
    "\001\002\000\010\004\000\005\000\055\000\001\002\000" +
    "\010\004\037\005\ufffe\055\ufffe\001\002\000\010\004\uffff" +
    "\005\uffff\055\uffff\001\002\000\006\104\034\105\036\001" +
    "\002\000\006\005\ufffd\055\ufffd\001\002\000\006\010\010" +
    "\105\014\001\002\000\004\005\ufff5\001\002\000\006\010" +
    "\010\105\014\001\002\000\004\005\ufff7\001\002\000\030" +
    "\002\ufff3\017\ufff3\046\ufff3\047\ufff3\050\ufff3\052\ufff3\054" +
    "\ufff3\061\ufff3\063\ufff3\066\ufff3\100\ufff3\001\002\000\012" +
    "\006\uffec\010\uffec\104\uffec\105\uffec\001\002\000\004\005" +
    "\u0175\001\002\000\022\002\uffbf\017\072\046\075\047\074" +
    "\050\073\063\071\066\uffbf\100\065\001\002\000\012\006" +
    "\054\010\010\104\034\105\056\001\002\000\012\006\uffed" +
    "\010\uffed\104\uffed\105\uffed\001\002\000\004\007\063\001" +
    "\002\000\004\055\061\001\002\000\004\055\057\001\002" +
    "\000\012\004\uffff\007\uffe6\011\uffe6\055\uffff\001\002\000" +
    "\006\010\010\105\014\001\002\000\004\005\ufff1\001\002" +
    "\000\006\010\010\105\014\001\002\000\004\005\ufff0\001" +
    "\002\000\006\104\034\105\036\001\002\000\004\005\ufff2" +
    "\001\002\000\004\105\u0171\001\002\000\022\002\uffe2\017" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\063\uffe2\066\uffe2\100\uffe2" +
    "\001\002\000\014\002\uffc0\010\uffc0\020\uffc0\066\uffc0\105" +
    "\uffc0\001\002\000\006\002\ufff9\066\ufff9\001\002\000\004" +
    "\105\u0161\001\002\000\060\010\uffba\014\uffba\017\uffba\020" +
    "\uffba\032\uffba\035\uffba\042\uffba\043\uffba\045\uffba\057\uffba" +
    "\064\uffba\067\uffba\070\uffba\071\uffba\072\uffba\074\uffba\076" +
    "\uffba\077\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba" +
    "\001\002\000\006\010\010\105\014\001\002\000\004\105" +
    "\324\001\002\000\004\105\076\001\002\000\010\014\100" +
    "\017\101\060\077\001\002\000\006\010\010\105\014\001" +
    "\002\000\010\010\010\015\uffbe\105\014\001\002\000\012" +
    "\010\uffc3\017\uffc3\020\uffc3\105\uffc3\001\002\000\012\010" +
    "\010\017\072\020\uffbf\105\014\001\002\000\004\104\110" +
    "\001\002\000\010\010\uffc3\020\uffc3\105\uffc3\001\002\000" +
    "\012\010\uffc2\017\uffc2\020\uffc2\105\uffc2\001\002\000\010" +
    "\010\010\020\107\105\014\001\002\000\022\002\uffda\017" +
    "\uffda\046\uffda\047\uffda\050\uffda\063\uffda\066\uffda\100\uffda" +
    "\001\002\000\010\005\111\013\113\014\112\001\002\000" +
    "\012\010\uffc6\017\uffc6\020\uffc6\105\uffc6\001\002\000\010" +
    "\010\010\015\uffbe\105\014\001\002\000\036\010\010\014" +
    "\123\032\130\035\126\045\116\057\121\064\120\070\131" +
    "\076\125\077\124\102\115\103\114\104\117\105\014\001" +
    "\002\000\066\004\uff6e\005\uff6e\006\uff6e\007\uff6e\011\uff6e" +
    "\012\uff6e\015\uff6e\017\uff6e\022\uff6e\023\uff6e\024\uff6e\025" +
    "\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e" +
    "\034\uff6e\037\uff6e\040\uff6e\041\uff6e\051\uff6e\062\uff6e\073" +
    "\uff6e\075\uff6e\001\002\000\066\004\uff6f\005\uff6f\006\uff6f" +
    "\007\uff6f\011\uff6f\012\uff6f\015\uff6f\017\uff6f\022\uff6f\023" +
    "\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\033\uff6f\034\uff6f\037\uff6f\040\uff6f\041\uff6f\051" +
    "\uff6f\062\uff6f\073\uff6f\075\uff6f\001\002\000\036\010\010" +
    "\014\123\032\130\035\126\045\116\057\121\064\120\070" +
    "\131\076\125\077\124\102\115\103\114\104\117\105\014" +
    "\001\002\000\070\004\uff84\005\uff84\006\uff84\007\uff84\011" +
    "\uff84\012\uff84\014\237\015\uff84\017\uff84\022\uff84\023\uff84" +
    "\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032" +
    "\uff84\033\uff84\034\uff84\036\240\037\uff84\041\uff84\051\uff84" +
    "\062\uff84\073\uff84\075\uff84\001\002\000\004\014\226\001" +
    "\002\000\036\010\010\014\123\032\130\035\126\045\116" +
    "\057\121\064\120\070\131\076\125\077\124\102\115\103" +
    "\114\104\117\105\014\001\002\000\066\004\uff81\005\uff81" +
    "\006\uff81\007\203\011\uff81\012\uff81\014\204\015\uff81\017" +
    "\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81" +
    "\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\037\uff81\041" +
    "\uff81\051\uff81\062\uff81\073\uff81\075\uff81\001\002\000\036" +
    "\010\010\014\123\032\130\035\126\045\116\057\121\064" +
    "\120\070\131\076\125\077\124\102\115\103\114\104\117" +
    "\105\014\001\002\000\066\004\uff70\005\uff70\006\uff70\007" +
    "\uff70\011\uff70\012\uff70\015\uff70\017\uff70\022\uff70\023\uff70" +
    "\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70\032" +
    "\uff70\033\uff70\034\uff70\037\uff70\040\uff70\041\uff70\051\uff70" +
    "\062\uff70\073\uff70\075\uff70\001\002\000\064\004\uff71\005" +
    "\uff71\006\uff71\007\177\011\uff71\012\uff71\015\uff71\017\uff71" +
    "\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030" +
    "\uff71\031\uff71\032\uff71\033\uff71\034\uff71\037\uff71\041\uff71" +
    "\051\uff71\062\uff71\073\uff71\075\uff71\001\002\000\030\010" +
    "\010\014\123\032\130\035\126\070\131\076\125\077\124" +
    "\102\115\103\114\104\117\105\014\001\002\000\006\005" +
    "\173\023\174\001\002\000\030\010\010\014\123\032\130" +
    "\035\126\070\131\076\125\077\124\102\115\103\114\104" +
    "\117\105\014\001\002\000\066\004\uff72\005\uff72\006\uff72" +
    "\007\uff72\011\uff72\012\uff72\015\uff72\017\uff72\022\uff72\023" +
    "\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72" +
    "\032\uff72\033\uff72\034\uff72\037\uff72\040\uff72\041\uff72\051" +
    "\uff72\062\uff72\073\uff72\075\uff72\001\002\000\064\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\011\uff89\012\uff89\015\uff89\017" +
    "\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89" +
    "\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\037\uff89\041" +
    "\uff89\051\uff89\062\uff89\073\uff89\075\uff89\001\002\000\064" +
    "\004\uff8c\005\uff8c\006\uff8c\007\uff8c\011\uff8c\012\uff8c\015" +
    "\uff8c\017\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\037" +
    "\uff8c\041\uff8c\051\uff8c\062\uff8c\073\uff8c\075\uff8c\001\002" +
    "\000\064\004\uff7f\005\uff7f\006\uff7f\007\uff7f\011\uff7f\012" +
    "\uff7f\015\uff7f\017\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f" +
    "\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\037\uff7f\041\uff7f\051\uff7f\062\uff7f\073\uff7f\075\uff7f" +
    "\001\002\000\064\004\uff90\005\uff90\006\157\007\uff90\011" +
    "\uff90\012\uff90\015\uff90\017\uff90\022\uff90\023\uff90\024\uff90" +
    "\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033" +
    "\161\034\160\037\uff90\041\uff90\051\uff90\062\uff90\073\uff90" +
    "\075\uff90\001\002\000\056\004\uff93\005\uff93\007\uff93\011" +
    "\uff93\012\uff93\015\uff93\017\uff93\022\uff93\023\uff93\024\uff93" +
    "\025\uff93\026\uff93\027\uff93\030\uff93\031\155\032\154\037" +
    "\uff93\041\uff93\051\uff93\062\uff93\073\uff93\075\uff93\001\002" +
    "\000\052\004\uff98\005\uff98\007\uff98\011\152\012\151\015" +
    "\uff98\017\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98" +
    "\027\147\030\150\037\uff98\041\uff98\051\uff98\062\uff98\073" +
    "\uff98\075\uff98\001\002\000\042\004\uff9b\005\uff9b\007\uff9b" +
    "\015\uff9b\017\uff9b\022\uff9b\023\uff9b\024\uff9b\025\145\026" +
    "\144\037\uff9b\041\uff9b\051\uff9b\062\uff9b\073\uff9b\075\uff9b" +
    "\001\002\000\036\004\uffa0\005\uffa0\007\uffa0\015\uffa0\017" +
    "\uffa0\022\uffa0\023\uffa0\024\142\037\uffa0\041\uffa0\051\uffa0" +
    "\062\uffa0\073\uffa0\075\uffa0\001\002\000\030\010\010\014" +
    "\123\032\130\035\126\070\131\076\125\077\124\102\115" +
    "\103\114\104\117\105\014\001\002\000\042\004\uff9c\005" +
    "\uff9c\007\uff9c\015\uff9c\017\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\025\145\026\144\037\uff9c\041\uff9c\051\uff9c\062\uff9c\073" +
    "\uff9c\075\uff9c\001\002\000\030\010\010\014\123\032\130" +
    "\035\126\070\131\076\125\077\124\102\115\103\114\104" +
    "\117\105\014\001\002\000\030\010\010\014\123\032\130" +
    "\035\126\070\131\076\125\077\124\102\115\103\114\104" +
    "\117\105\014\001\002\000\052\004\uff9a\005\uff9a\007\uff9a" +
    "\011\152\012\151\015\uff9a\017\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\147\030\150\037\uff9a\041\uff9a" +
    "\051\uff9a\062\uff9a\073\uff9a\075\uff9a\001\002\000\030\010" +
    "\010\014\123\032\130\035\126\070\131\076\125\077\124" +
    "\102\115\103\114\104\117\105\014\001\002\000\030\010" +
    "\010\014\123\032\130\035\126\070\131\076\125\077\124" +
    "\102\115\103\114\104\117\105\014\001\002\000\030\010" +
    "\010\014\123\032\130\035\126\070\131\076\125\077\124" +
    "\102\115\103\114\104\117\105\014\001\002\000\030\010" +
    "\010\014\123\032\130\035\126\070\131\076\125\077\124" +
    "\102\115\103\114\104\117\105\014\001\002\000\056\004" +
    "\uff97\005\uff97\007\uff97\011\uff97\012\uff97\015\uff97\017\uff97" +
    "\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030" +
    "\uff97\031\155\032\154\037\uff97\041\uff97\051\uff97\062\uff97" +
    "\073\uff97\075\uff97\001\002\000\030\010\010\014\123\032" +
    "\130\035\126\070\131\076\125\077\124\102\115\103\114" +
    "\104\117\105\014\001\002\000\030\010\010\014\123\032" +
    "\130\035\126\070\131\076\125\077\124\102\115\103\114" +
    "\104\117\105\014\001\002\000\064\004\uff92\005\uff92\006" +
    "\157\007\uff92\011\uff92\012\uff92\015\uff92\017\uff92\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\032\uff92\033\161\034\160\037\uff92\041\uff92\051\uff92" +
    "\062\uff92\073\uff92\075\uff92\001\002\000\030\010\010\014" +
    "\123\032\130\035\126\070\131\076\125\077\124\102\115" +
    "\103\114\104\117\105\014\001\002\000\030\010\010\014" +
    "\123\032\130\035\126\070\131\076\125\077\124\102\115" +
    "\103\114\104\117\105\014\001\002\000\030\010\010\014" +
    "\123\032\130\035\126\070\131\076\125\077\124\102\115" +
    "\103\114\104\117\105\014\001\002\000\064\004\uff8e\005" +
    "\uff8e\006\uff8e\007\uff8e\011\uff8e\012\uff8e\015\uff8e\017\uff8e" +
    "\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\037\uff8e\041\uff8e" +
    "\051\uff8e\062\uff8e\073\uff8e\075\uff8e\001\002\000\064\004" +
    "\uff8d\005\uff8d\006\uff8d\007\uff8d\011\uff8d\012\uff8d\015\uff8d" +
    "\017\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\037\uff8d" +
    "\041\uff8d\051\uff8d\062\uff8d\073\uff8d\075\uff8d\001\002\000" +
    "\064\004\uff8f\005\uff8f\006\uff8f\007\uff8f\011\uff8f\012\uff8f" +
    "\015\uff8f\017\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f" +
    "\037\uff8f\041\uff8f\051\uff8f\062\uff8f\073\uff8f\075\uff8f\001" +
    "\002\000\064\004\uff91\005\uff91\006\157\007\uff91\011\uff91" +
    "\012\uff91\015\uff91\017\uff91\022\uff91\023\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\161" +
    "\034\160\037\uff91\041\uff91\051\uff91\062\uff91\073\uff91\075" +
    "\uff91\001\002\000\056\004\uff95\005\uff95\007\uff95\011\uff95" +
    "\012\uff95\015\uff95\017\uff95\022\uff95\023\uff95\024\uff95\025" +
    "\uff95\026\uff95\027\uff95\030\uff95\031\155\032\154\037\uff95" +
    "\041\uff95\051\uff95\062\uff95\073\uff95\075\uff95\001\002\000" +
    "\056\004\uff94\005\uff94\007\uff94\011\uff94\012\uff94\015\uff94" +
    "\017\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027" +
    "\uff94\030\uff94\031\155\032\154\037\uff94\041\uff94\051\uff94" +
    "\062\uff94\073\uff94\075\uff94\001\002\000\056\004\uff96\005" +
    "\uff96\007\uff96\011\uff96\012\uff96\015\uff96\017\uff96\022\uff96" +
    "\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\155\032\154\037\uff96\041\uff96\051\uff96\062\uff96\073\uff96" +
    "\075\uff96\001\002\000\052\004\uff99\005\uff99\007\uff99\011" +
    "\152\012\151\015\uff99\017\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\026\uff99\027\147\030\150\037\uff99\041\uff99\051" +
    "\uff99\062\uff99\073\uff99\075\uff99\001\002\000\064\004\uff8a" +
    "\005\uff8a\006\uff8a\007\uff8a\011\uff8a\012\uff8a\015\uff8a\017" +
    "\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\037\uff8a\041" +
    "\uff8a\051\uff8a\062\uff8a\073\uff8a\075\uff8a\001\002\000\012" +
    "\010\uffc5\017\uffc5\020\uffc5\105\uffc5\001\002\000\030\010" +
    "\010\014\123\032\130\035\126\070\131\076\125\077\124" +
    "\102\115\103\114\104\117\105\014\001\002\000\036\004" +
    "\uffa1\005\uffa1\007\uffa1\015\uffa1\017\uffa1\022\uffa1\023\uffa1" +
    "\024\142\037\uffa1\041\uffa1\051\uffa1\062\uffa1\073\uffa1\075" +
    "\uffa1\001\002\000\064\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\011\uff8b\012\uff8b\015\uff8b\017\uff8b\022\uff8b\023\uff8b\024" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\037\uff8b\041\uff8b\051\uff8b\062\uff8b\073" +
    "\uff8b\075\uff8b\001\002\000\004\104\200\001\002\000\064" +
    "\004\uff83\005\uff83\006\uff83\007\uff83\011\uff83\012\uff83\015" +
    "\uff83\017\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83" +
    "\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\037" +
    "\uff83\041\uff83\051\uff83\062\uff83\073\uff83\075\uff83\001\002" +
    "\000\006\015\202\023\174\001\002\000\064\004\uff7e\005" +
    "\uff7e\006\uff7e\007\uff7e\011\uff7e\012\uff7e\015\uff7e\017\uff7e" +
    "\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030" +
    "\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\037\uff7e\041\uff7e" +
    "\051\uff7e\062\uff7e\073\uff7e\075\uff7e\001\002\000\004\104" +
    "\212\001\002\000\040\010\010\014\123\015\uffa4\032\130" +
    "\035\126\045\116\057\121\064\120\070\131\076\125\077" +
    "\124\102\115\103\114\104\117\105\014\001\002\000\004" +
    "\015\211\001\002\000\012\004\207\015\uffa3\023\174\037" +
    "\uffa3\001\002\000\042\010\010\014\123\015\uffa4\032\130" +
    "\035\126\037\uffa4\045\116\057\121\064\120\070\131\076" +
    "\125\077\124\102\115\103\114\104\117\105\014\001\002" +
    "\000\006\015\uffa2\037\uffa2\001\002\000\064\004\uff80\005" +
    "\uff80\006\uff80\007\uff80\011\uff80\012\uff80\015\uff80\017\uff80" +
    "\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\034\uff80\037\uff80\041\uff80" +
    "\051\uff80\062\uff80\073\uff80\075\uff80\001\002\000\070\004" +
    "\uff82\005\uff82\006\uff82\007\uff82\011\uff82\012\uff82\014\214" +
    "\015\uff82\017\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82" +
    "\036\213\037\uff82\041\uff82\051\uff82\062\uff82\073\uff82\075" +
    "\uff82\001\002\000\040\010\010\014\123\032\130\035\126" +
    "\037\uffa4\045\116\057\121\064\120\070\131\076\125\077" +
    "\124\102\115\103\114\104\117\105\014\001\002\000\040" +
    "\010\010\014\123\015\uffa4\032\130\035\126\045\116\057" +
    "\121\064\120\070\131\076\125\077\124\102\115\103\114" +
    "\104\117\105\014\001\002\000\004\015\216\001\002\000" +
    "\064\004\uff87\005\uff87\006\uff87\007\uff87\011\uff87\012\uff87" +
    "\015\uff87\017\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026" +
    "\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87" +
    "\037\uff87\041\uff87\051\uff87\062\uff87\073\uff87\075\uff87\001" +
    "\002\000\004\037\220\001\002\000\064\004\uff85\005\uff85" +
    "\006\uff85\007\uff85\011\uff85\012\uff85\015\uff85\017\uff85\022" +
    "\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\034\uff85\037\uff85\041\uff85\051" +
    "\uff85\062\uff85\073\uff85\075\uff85\001\002\000\006\023\174" +
    "\075\222\001\002\000\036\010\010\014\123\032\130\035" +
    "\126\045\116\057\121\064\120\070\131\076\125\077\124" +
    "\102\115\103\114\104\117\105\014\001\002\000\006\023" +
    "\174\051\224\001\002\000\036\010\010\014\123\032\130" +
    "\035\126\045\116\057\121\064\120\070\131\076\125\077" +
    "\124\102\115\103\114\104\117\105\014\001\002\000\034" +
    "\004\uff9e\005\uff9e\007\uff9e\015\uff9e\017\uff9e\022\uff9e\023" +
    "\174\037\uff9e\041\uff9e\051\uff9e\062\uff9e\073\uff9e\075\uff9e" +
    "\001\002\000\006\010\010\105\014\001\002\000\004\104" +
    "\236\001\002\000\004\015\231\001\002\000\004\013\232" +
    "\001\002\000\036\010\010\014\123\032\130\035\126\045" +
    "\116\057\121\064\120\070\131\076\125\077\124\102\115" +
    "\103\114\104\117\105\014\001\002\000\006\023\174\062" +
    "\234\001\002\000\036\010\010\014\123\032\130\035\126" +
    "\045\116\057\121\064\120\070\131\076\125\077\124\102" +
    "\115\103\114\104\117\105\014\001\002\000\034\004\uff9f" +
    "\005\uff9f\007\uff9f\015\uff9f\017\uff9f\022\uff9f\023\174\037" +
    "\uff9f\041\uff9f\051\uff9f\062\uff9f\073\uff9f\075\uff9f\001\002" +
    "\000\006\004\uffbb\015\uffbb\001\002\000\040\010\010\014" +
    "\123\015\uffa4\032\130\035\126\045\116\057\121\064\120" +
    "\070\131\076\125\077\124\102\115\103\114\104\117\105" +
    "\014\001\002\000\040\010\010\014\123\032\130\035\126" +
    "\037\uffa4\045\116\057\121\064\120\070\131\076\125\077" +
    "\124\102\115\103\114\104\117\105\014\001\002\000\004" +
    "\037\242\001\002\000\064\004\uff86\005\uff86\006\uff86\007" +
    "\uff86\011\uff86\012\uff86\015\uff86\017\uff86\022\uff86\023\uff86" +
    "\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032" +
    "\uff86\033\uff86\034\uff86\037\uff86\041\uff86\051\uff86\062\uff86" +
    "\073\uff86\075\uff86\001\002\000\004\015\244\001\002\000" +
    "\064\004\uff88\005\uff88\006\uff88\007\uff88\011\uff88\012\uff88" +
    "\015\uff88\017\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88" +
    "\037\uff88\041\uff88\051\uff88\062\uff88\073\uff88\075\uff88\001" +
    "\002\000\006\017\246\023\174\001\002\000\022\010\251" +
    "\070\131\076\247\077\124\102\115\103\114\104\254\105" +
    "\255\001\002\000\010\004\uff71\015\uff71\040\uff71\001\002" +
    "\000\004\020\271\001\002\000\010\004\uff73\015\uff73\040" +
    "\uff73\001\002\000\010\004\uff76\015\uff76\040\uff76\001\002" +
    "\000\004\040\267\001\002\000\010\004\uff77\015\uff77\040" +
    "\uff77\001\002\000\012\004\uff75\014\261\015\uff75\040\uff75" +
    "\001\002\000\004\005\257\001\002\000\024\010\251\020" +
    "\uff7c\070\131\076\247\077\124\102\115\103\114\104\254" +
    "\105\255\001\002\000\004\020\uff7b\001\002\000\024\010" +
    "\251\015\uff7a\070\131\076\247\077\124\102\115\103\114" +
    "\104\254\105\255\001\002\000\006\004\265\015\uff79\001" +
    "\002\000\004\015\264\001\002\000\010\004\uff74\015\uff74" +
    "\040\uff74\001\002\000\024\010\251\015\uff7a\070\131\076" +
    "\247\077\124\102\115\103\114\104\254\105\255\001\002" +
    "\000\004\015\uff78\001\002\000\036\010\010\014\123\032" +
    "\130\035\126\045\116\057\121\064\120\070\131\076\125" +
    "\077\124\102\115\103\114\104\117\105\014\001\002\000" +
    "\006\005\uff7d\023\174\001\002\000\034\004\uff9d\005\uff9d" +
    "\007\uff9d\015\uff9d\017\uff9d\022\uff9d\023\uff9d\037\uff9d\041" +
    "\uff9d\051\uff9d\062\uff9d\073\uff9d\075\uff9d\001\002\000\004" +
    "\015\276\001\002\000\006\004\274\015\uffbd\001\002\000" +
    "\010\010\010\015\uffbe\105\014\001\002\000\004\015\uffbc" +
    "\001\002\000\004\017\072\001\002\000\012\010\uffc4\017" +
    "\uffc4\020\uffc4\105\uffc4\001\002\000\004\015\301\001\002" +
    "\000\006\017\303\060\302\001\002\000\006\010\010\105" +
    "\014\001\002\000\012\010\uffc3\017\uffc3\020\uffc3\105\uffc3" +
    "\001\002\000\012\010\010\017\072\020\uffbf\105\014\001" +
    "\002\000\010\010\uffc3\020\uffc3\105\uffc3\001\002\000\010" +
    "\010\010\020\307\105\014\001\002\000\022\002\uffd9\017" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\063\uffd9\066\uffd9\100\uffd9" +
    "\001\002\000\004\017\311\001\002\000\012\010\uffc3\017" +
    "\uffc3\020\uffc3\105\uffc3\001\002\000\012\010\010\017\072" +
    "\020\uffbf\105\014\001\002\000\010\010\uffc3\020\uffc3\105" +
    "\uffc3\001\002\000\010\010\010\020\315\105\014\001\002" +
    "\000\022\002\uffd7\017\uffd7\046\uffd7\047\uffd7\050\uffd7\063" +
    "\uffd7\066\uffd7\100\uffd7\001\002\000\004\017\317\001\002" +
    "\000\012\010\uffc3\017\uffc3\020\uffc3\105\uffc3\001\002\000" +
    "\012\010\010\017\072\020\uffbf\105\014\001\002\000\010" +
    "\010\uffc3\020\uffc3\105\uffc3\001\002\000\010\010\010\020" +
    "\323\105\014\001\002\000\022\002\uffd8\017\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\063\uffd8\066\uffd8\100\uffd8\001\002\000" +
    "\006\011\326\013\325\001\002\000\004\105\333\001\002" +
    "\000\004\105\327\001\002\000\006\004\351\012\uffcf\001" +
    "\002\000\004\012\331\001\002\000\004\013\332\001\002" +
    "\000\004\105\333\001\002\000\010\005\uffd6\014\341\016" +
    "\uffd6\001\002\000\006\005\uffcd\016\337\001\002\000\004" +
    "\005\336\001\002\000\022\002\uffdf\017\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\063\uffdf\066\uffdf\100\uffdf\001\002\000\004" +
    "\105\333\001\002\000\004\005\uffcc\001\002\000\010\010" +
    "\010\015\uffd2\105\014\001\002\000\004\015\350\001\002" +
    "\000\010\004\uffd4\015\uffd4\104\347\001\002\000\006\004" +
    "\345\015\uffd1\001\002\000\010\010\010\015\uffd2\105\014" +
    "\001\002\000\004\015\uffd0\001\002\000\006\004\uffd3\015" +
    "\uffd3\001\002\000\006\005\uffd5\016\uffd5\001\002\000\004" +
    "\105\327\001\002\000\004\012\uffce\001\002\000\004\005" +
    "\354\001\002\000\022\002\uffe0\017\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\063\uffe0\066\uffe0\100\uffe0\001\002\000\004\104" +
    "\356\001\002\000\006\011\360\014\357\001\002\000\010" +
    "\010\010\015\uffbe\105\014\001\002\000\004\105\327\001" +
    "\002\000\004\012\362\001\002\000\004\014\363\001\002" +
    "\000\010\010\010\015\uffbe\105\014\001\002\000\004\015" +
    "\365\001\002\000\004\013\366\001\002\000\040\010\010" +
    "\014\123\032\130\035\126\044\367\045\116\057\121\064" +
    "\120\070\131\076\125\077\124\102\115\103\114\104\117" +
    "\105\014\001\002\000\004\005\uffcb\001\002\000\006\005" +
    "\uffca\023\174\001\002\000\004\005\372\001\002\000\022" +
    "\002\uffdd\017\uffdd\046\uffdd\047\uffdd\050\uffdd\063\uffdd\066" +
    "\uffdd\100\uffdd\001\002\000\004\015\374\001\002\000\004" +
    "\013\375\001\002\000\040\010\010\014\123\032\130\035" +
    "\126\044\367\045\116\057\121\064\120\070\131\076\125" +
    "\077\124\102\115\103\114\104\117\105\014\001\002\000" +
    "\004\005\377\001\002\000\022\002\uffde\017\uffde\046\uffde" +
    "\047\uffde\050\uffde\063\uffde\066\uffde\100\uffde\001\002\000" +
    "\060\010\010\014\123\017\u0102\020\u0101\032\130\035\126" +
    "\042\u0108\043\u0107\045\116\057\u0103\064\120\067\u0110\070" +
    "\131\071\u010f\072\u010e\074\u010d\076\u010c\077\124\101\u0109" +
    "\102\115\103\114\104\u0104\105\014\001\002\000\016\002" +
    "\uffc1\010\uffc1\017\uffc1\020\uffc1\066\uffc1\105\uffc1\001\002" +
    "\000\060\010\uffba\014\uffba\017\uffba\020\uffba\032\uffba\035" +
    "\uffba\042\uffba\043\uffba\045\uffba\057\uffba\064\uffba\067\uffba" +
    "\070\uffba\071\uffba\072\uffba\074\uffba\076\uffba\077\uffba\101" +
    "\uffba\102\uffba\103\uffba\104\uffba\105\uffba\001\002\000\036" +
    "\010\010\014\u0159\032\130\035\126\045\116\057\121\064" +
    "\120\070\131\076\125\077\124\102\115\103\114\104\117" +
    "\105\014\001\002\000\052\005\uff84\006\uff84\007\uff84\011" +
    "\uff84\012\uff84\013\u0156\014\237\023\uff84\024\uff84\025\uff84" +
    "\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034" +
    "\uff84\036\240\041\uff84\073\uff84\001\002\000\004\005\uffa5" +
    "\001\002\000\060\010\uffb9\014\uffb9\017\uffb9\020\uffb9\032" +
    "\uffb9\035\uffb9\042\uffb9\043\uffb9\045\uffb9\057\uffb9\064\uffb9" +
    "\067\uffb9\070\uffb9\071\uffb9\072\uffb9\074\uffb9\076\uffb9\077" +
    "\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\001\002" +
    "\000\036\010\010\014\123\032\130\035\126\045\116\057" +
    "\121\064\120\070\131\076\u014d\077\124\102\115\103\114" +
    "\104\u014b\105\014\001\002\000\036\010\010\014\123\032" +
    "\130\035\126\045\116\057\121\064\120\070\131\076\125" +
    "\077\124\102\115\103\114\104\117\105\014\001\002\000" +
    "\004\014\u0145\001\002\000\014\005\uffa6\007\u0135\023\174" +
    "\041\u0137\073\u0136\001\002\000\004\005\u0134\001\002\000" +
    "\044\005\uff71\006\uff71\007\u012f\011\uff71\012\uff71\023\uff71" +
    "\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032" +
    "\uff71\033\uff71\034\uff71\041\u0118\073\uff71\001\002\000\004" +
    "\005\u012e\001\002\000\004\005\u012d\001\002\000\040\010" +
    "\010\014\123\032\130\035\126\045\116\057\121\064\120" +
    "\067\u0110\070\131\076\u0116\077\124\102\115\103\114\104" +
    "\117\105\014\001\002\000\010\010\010\065\u0123\105\014" +
    "\001\002\000\050\005\uff81\006\uff81\007\203\011\uff81\012" +
    "\uff81\014\204\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81" +
    "\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\041\uff81\073" +
    "\uff81\104\u0112\001\002\000\006\005\u0113\013\u0114\001\002" +
    "\000\062\010\uffb2\014\uffb2\017\uffb2\020\uffb2\032\uffb2\035" +
    "\uffb2\042\uffb2\043\uffb2\045\uffb2\051\uffb2\057\uffb2\064\uffb2" +
    "\067\uffb2\070\uffb2\071\uffb2\072\uffb2\074\uffb2\076\uffb2\077" +
    "\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\001\002" +
    "\000\040\010\010\014\123\032\130\035\126\045\116\057" +
    "\121\064\120\067\u0110\070\131\076\u0116\077\124\102\115" +
    "\103\114\104\117\105\014\001\002\000\004\005\u0121\001" +
    "\002\000\044\005\uff71\006\uff71\007\u0117\011\uff71\012\uff71" +
    "\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031" +
    "\uff71\032\uff71\033\uff71\034\uff71\041\u0118\073\uff71\001\002" +
    "\000\004\104\u011d\001\002\000\004\104\u0119\001\002\000" +
    "\004\014\u011a\001\002\000\040\010\010\014\123\015\uffa4" +
    "\032\130\035\126\045\116\057\121\064\120\070\131\076" +
    "\125\077\124\102\115\103\114\104\117\105\014\001\002" +
    "\000\004\015\u011c\001\002\000\004\005\uff68\001\002\000" +
    "\046\005\uff83\006\uff83\007\uff83\011\uff83\012\uff83\014\u011e" +
    "\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031" +
    "\uff83\032\uff83\033\uff83\034\uff83\041\uff83\073\uff83\001\002" +
    "\000\040\010\010\014\123\015\uffa4\032\130\035\126\045" +
    "\116\057\121\064\120\070\131\076\125\077\124\102\115" +
    "\103\114\104\117\105\014\001\002\000\004\015\u0120\001" +
    "\002\000\004\005\uff6a\001\002\000\062\010\uffb1\014\uffb1" +
    "\017\uffb1\020\uffb1\032\uffb1\035\uffb1\042\uffb1\043\uffb1\045" +
    "\uffb1\051\uffb1\057\uffb1\064\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\074\uffb1\076\uffb1\077\uffb1\101\uffb1\102\uffb1\103" +
    "\uffb1\104\uffb1\105\uffb1\001\002\000\004\014\u0128\001\002" +
    "\000\006\010\010\105\014\001\002\000\004\014\u0125\001" +
    "\002\000\040\010\010\014\123\015\uffa4\032\130\035\126" +
    "\045\116\057\121\064\120\070\131\076\125\077\124\102" +
    "\115\103\114\104\117\105\014\001\002\000\004\015\u0127" +
    "\001\002\000\004\005\uff6c\001\002\000\040\010\010\014" +
    "\123\015\uffa4\032\130\035\126\045\116\057\121\064\120" +
    "\070\131\076\125\077\124\102\115\103\114\104\117\105" +
    "\014\001\002\000\004\015\u012a\001\002\000\004\005\uff6d" +
    "\001\002\000\004\005\u012c\001\002\000\062\010\uffb5\014" +
    "\uffb5\017\uffb5\020\uffb5\032\uffb5\035\uffb5\042\uffb5\043\uffb5" +
    "\045\uffb5\051\uffb5\057\uffb5\064\uffb5\067\uffb5\070\uffb5\071" +
    "\uffb5\072\uffb5\074\uffb5\076\uffb5\077\uffb5\101\uffb5\102\uffb5" +
    "\103\uffb5\104\uffb5\105\uffb5\001\002\000\062\010\uffad\014" +
    "\uffad\017\uffad\020\uffad\032\uffad\035\uffad\042\uffad\043\uffad" +
    "\045\uffad\051\uffad\057\uffad\064\uffad\067\uffad\070\uffad\071" +
    "\uffad\072\uffad\074\uffad\076\uffad\077\uffad\101\uffad\102\uffad" +
    "\103\uffad\104\uffad\105\uffad\001\002\000\062\010\uffae\014" +
    "\uffae\017\uffae\020\uffae\032\uffae\035\uffae\042\uffae\043\uffae" +
    "\045\uffae\051\uffae\057\uffae\064\uffae\067\uffae\070\uffae\071" +
    "\uffae\072\uffae\074\uffae\076\uffae\077\uffae\101\uffae\102\uffae" +
    "\103\uffae\104\uffae\105\uffae\001\002\000\004\104\u0130\001" +
    "\002\000\050\005\uff83\006\uff83\007\uff83\011\uff83\012\uff83" +
    "\013\u0131\014\u011e\023\uff83\024\uff83\025\uff83\026\uff83\027" +
    "\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\041\uff83" +
    "\073\uff83\001\002\000\040\010\010\014\123\032\130\035" +
    "\126\045\116\057\121\064\120\067\u0110\070\131\076\u0116" +
    "\077\124\102\115\103\114\104\117\105\014\001\002\000" +
    "\004\005\u0133\001\002\000\062\010\uffb3\014\uffb3\017\uffb3" +
    "\020\uffb3\032\uffb3\035\uffb3\042\uffb3\043\uffb3\045\uffb3\051" +
    "\uffb3\057\uffb3\064\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\074\uffb3\076\uffb3\077\uffb3\101\uffb3\102\uffb3\103\uffb3\104" +
    "\uffb3\105\uffb3\001\002\000\062\010\uffb8\014\uffb8\017\uffb8" +
    "\020\uffb8\032\uffb8\035\uffb8\042\uffb8\043\uffb8\045\uffb8\051" +
    "\uffb8\057\uffb8\064\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8" +
    "\074\uffb8\076\uffb8\077\uffb8\101\uffb8\102\uffb8\103\uffb8\104" +
    "\uffb8\105\uffb8\001\002\000\006\056\u0140\104\u0141\001\002" +
    "\000\006\010\010\105\014\001\002\000\004\104\u0138\001" +
    "\002\000\004\014\u0139\001\002\000\040\010\010\014\123" +
    "\015\uffa4\032\130\035\126\045\116\057\121\064\120\070" +
    "\131\076\125\077\124\102\115\103\114\104\117\105\014" +
    "\001\002\000\004\015\u013b\001\002\000\004\005\uff69\001" +
    "\002\000\004\014\u013d\001\002\000\040\010\010\014\123" +
    "\015\uffa4\032\130\035\126\045\116\057\121\064\120\070" +
    "\131\076\125\077\124\102\115\103\114\104\117\105\014" +
    "\001\002\000\004\015\u013f\001\002\000\004\005\uff66\001" +
    "\002\000\004\005\uff67\001\002\000\004\014\u0142\001\002" +
    "\000\040\010\010\014\123\015\uffa4\032\130\035\126\045" +
    "\116\057\121\064\120\070\131\076\125\077\124\102\115" +
    "\103\114\104\117\105\014\001\002\000\004\015\u0144\001" +
    "\002\000\004\005\uff6b\001\002\000\036\010\010\014\123" +
    "\032\130\035\126\045\116\057\121\064\120\070\131\076" +
    "\125\077\124\102\115\103\114\104\117\105\014\001\002" +
    "\000\006\015\u0147\023\174\001\002\000\056\010\010\014" +
    "\123\017\u0102\032\130\035\126\042\u0108\043\u0107\045\116" +
    "\057\u0103\064\120\067\u0110\070\131\071\u010f\072\u010e\074" +
    "\u010d\076\u010c\077\124\101\u0109\102\115\103\114\104\u0104" +
    "\105\014\001\002\000\062\010\uffb6\014\uffb6\017\uffb6\020" +
    "\uffb6\032\uffb6\035\uffb6\042\uffb6\043\uffb6\045\uffb6\051\uffb6" +
    "\057\uffb6\064\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\074" +
    "\uffb6\076\uffb6\077\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6" +
    "\105\uffb6\001\002\000\006\005\u014a\023\174\001\002\000" +
    "\062\010\uffac\014\uffac\017\uffac\020\uffac\032\uffac\035\uffac" +
    "\042\uffac\043\uffac\045\uffac\051\uffac\057\uffac\064\uffac\067" +
    "\uffac\070\uffac\071\uffac\072\uffac\074\uffac\076\uffac\077\uffac" +
    "\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac\001\002\000" +
    "\046\005\uff84\006\uff84\011\uff84\012\uff84\014\237\021\u0155" +
    "\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030" +
    "\uff84\031\uff84\032\uff84\033\uff84\034\uff84\036\240\001\002" +
    "\000\006\005\u0152\022\u0153\001\002\000\042\005\uff71\006" +
    "\uff71\007\u014f\011\uff71\012\uff71\022\uff71\023\uff71\024\uff71" +
    "\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033" +
    "\uff71\034\uff71\001\002\000\010\005\uffa8\022\uffa8\023\174" +
    "\001\002\000\004\104\u0150\001\002\000\042\005\uff83\006" +
    "\uff83\011\uff83\012\uff83\021\u0151\022\uff83\023\uff83\024\uff83" +
    "\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033" +
    "\uff83\034\uff83\001\002\000\006\005\uffa9\022\uffa9\001\002" +
    "\000\062\010\uffab\014\uffab\017\uffab\020\uffab\032\uffab\035" +
    "\uffab\042\uffab\043\uffab\045\uffab\051\uffab\057\uffab\064\uffab" +
    "\067\uffab\070\uffab\071\uffab\072\uffab\074\uffab\076\uffab\077" +
    "\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab\001\002" +
    "\000\036\010\010\014\123\032\130\035\126\045\116\057" +
    "\121\064\120\070\131\076\u014d\077\124\102\115\103\114" +
    "\104\u014b\105\014\001\002\000\006\005\uffa7\022\u0153\001" +
    "\002\000\006\005\uffaa\022\uffaa\001\002\000\040\010\010" +
    "\014\123\032\130\035\126\045\116\057\121\064\120\067" +
    "\u0110\070\131\076\u0116\077\124\102\115\103\114\104\117" +
    "\105\014\001\002\000\004\005\u0158\001\002\000\062\010" +
    "\uffb4\014\uffb4\017\uffb4\020\uffb4\032\uffb4\035\uffb4\042\uffb4" +
    "\043\uffb4\045\uffb4\051\uffb4\057\uffb4\064\uffb4\067\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\074\uffb4\076\uffb4\077\uffb4\101\uffb4" +
    "\102\uffb4\103\uffb4\104\uffb4\105\uffb4\001\002\000\036\010" +
    "\010\014\123\032\130\035\126\045\116\057\121\064\120" +
    "\070\131\076\125\077\124\102\115\103\114\104\117\105" +
    "\014\001\002\000\006\015\u015b\023\174\001\002\000\110" +
    "\006\uff7e\010\010\011\uff7e\012\uff7e\014\123\017\u0102\023" +
    "\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e" +
    "\032\130\033\uff7e\034\uff7e\035\126\042\u0108\043\u0107\045" +
    "\116\057\u0103\064\120\067\u0110\070\131\071\u010f\072\u010e" +
    "\074\u010d\075\uff7e\076\u010c\077\124\101\u0109\102\115\103" +
    "\114\104\u0104\105\014\001\002\000\062\010\uffb0\014\uffb0" +
    "\017\uffb0\020\uffb0\032\uffb0\035\uffb0\042\uffb0\043\uffb0\045" +
    "\uffb0\051\u015d\057\uffb0\064\uffb0\067\uffb0\070\uffb0\071\uffb0" +
    "\072\uffb0\074\uffb0\076\uffb0\077\uffb0\101\uffb0\102\uffb0\103" +
    "\uffb0\104\uffb0\105\uffb0\001\002\000\056\010\010\014\123" +
    "\017\u0102\032\130\035\126\042\u0108\043\u0107\045\116\057" +
    "\u0103\064\120\067\u0110\070\131\071\u010f\072\u010e\074\u010d" +
    "\076\u010c\077\124\101\u0109\102\115\103\114\104\u0104\105" +
    "\014\001\002\000\062\010\uffaf\014\uffaf\017\uffaf\020\uffaf" +
    "\032\uffaf\035\uffaf\042\uffaf\043\uffaf\045\uffaf\051\uffaf\057" +
    "\uffaf\064\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\074\uffaf" +
    "\076\uffaf\077\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105" +
    "\uffaf\001\002\000\060\010\010\014\123\017\u0102\020\u0160" +
    "\032\130\035\126\042\u0108\043\u0107\045\116\057\u0103\064" +
    "\120\067\u0110\070\131\071\u010f\072\u010e\074\u010d\076\u010c" +
    "\077\124\101\u0109\102\115\103\114\104\u0104\105\014\001" +
    "\002\000\062\010\uffb7\014\uffb7\017\uffb7\020\uffb7\032\uffb7" +
    "\035\uffb7\042\uffb7\043\uffb7\045\uffb7\051\uffb7\057\uffb7\064" +
    "\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\074\uffb7\076\uffb7" +
    "\077\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\001" +
    "\002\000\006\017\u0163\053\u0162\001\002\000\006\010\010" +
    "\105\014\001\002\000\010\010\uffc8\020\uffc8\105\uffc8\001" +
    "\002\000\010\010\010\020\u0167\105\014\001\002\000\004" +
    "\005\u016c\001\002\000\004\104\u0168\001\002\000\022\002" +
    "\uffdc\017\uffdc\046\uffdc\047\uffdc\050\uffdc\063\uffdc\066\uffdc" +
    "\100\uffdc\001\002\000\004\014\u0169\001\002\000\010\010" +
    "\010\015\uffbe\105\014\001\002\000\004\015\u016b\001\002" +
    "\000\004\005\uffc9\001\002\000\010\010\uffc7\020\uffc7\105" +
    "\uffc7\001\002\000\004\017\u016e\001\002\000\010\010\uffc8" +
    "\020\uffc8\105\uffc8\001\002\000\010\010\010\020\u0170\105" +
    "\014\001\002\000\022\002\uffdb\017\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\063\uffdb\066\uffdb\100\uffdb\001\002\000\004\013" +
    "\u0172\001\002\000\006\010\010\105\014\001\002\000\004" +
    "\005\u0174\001\002\000\022\002\uffe1\017\uffe1\046\uffe1\047" +
    "\uffe1\050\uffe1\063\uffe1\066\uffe1\100\uffe1\001\002\000\026" +
    "\002\uffee\017\uffee\046\uffee\047\uffee\050\uffee\054\uffee\061" +
    "\uffee\063\uffee\066\uffee\100\uffee\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0174\000\006\004\003\005\004\001\001\000\002\001" +
    "\001\000\004\006\005\001\001\000\002\001\001\000\010" +
    "\014\010\016\011\017\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\015\015\016\016\011\017\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\015\015\021\016\011\017\012\001\001\000" +
    "\002\001\001\000\006\016\011\017\023\001\001\000\002" +
    "\001\001\000\004\010\025\001\001\000\006\007\027\012" +
    "\026\001\001\000\010\011\046\013\050\020\047\001\001" +
    "\000\002\001\001\000\006\002\034\003\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\034\003\037\001" +
    "\001\000\002\001\001\000\010\014\041\016\011\017\012" +
    "\001\001\000\002\001\001\000\010\014\043\016\011\017" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\065\034\066\035" +
    "\067\001\001\000\014\002\034\003\054\014\052\016\011" +
    "\017\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\057\016\011\017\012\001\001\000\002\001\001\000" +
    "\010\014\061\016\011\017\012\001\001\000\002\001\001" +
    "\000\004\002\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\377\001\001\000\010\014" +
    "\354\016\011\017\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\015\015\315\016" +
    "\011\017\012\001\001\000\014\014\226\016\011\017\012" +
    "\036\277\037\272\001\001\000\004\033\101\001\001\000" +
    "\016\014\102\016\011\017\012\032\104\034\066\035\103" +
    "\001\001\000\002\001\001\000\004\033\105\001\001\000" +
    "\002\001\001\000\012\014\102\016\011\017\012\032\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\226\016\011\017\012\036\271\037\272" +
    "\001\001\000\032\014\121\016\011\017\012\045\126\046" +
    "\140\047\137\050\136\051\135\052\134\053\132\054\131" +
    "\061\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\014\121\016\011\017\012\045\244\046\140\047\137" +
    "\050\136\051\135\052\134\053\132\054\131\061\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\014\121" +
    "\016\011\017\012\045\220\046\140\047\137\050\136\051" +
    "\135\052\134\053\132\054\131\061\133\001\001\000\002" +
    "\001\001\000\032\014\121\016\011\017\012\045\200\046" +
    "\140\047\137\050\136\051\135\052\134\053\132\054\131" +
    "\061\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\121\016\011\017\012\053\175\054\131\061\133" +
    "\001\001\000\002\001\001\000\016\014\121\016\011\017" +
    "\012\053\171\054\131\061\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\121\016\011\017" +
    "\012\047\142\050\136\051\135\052\134\053\132\054\131" +
    "\061\133\001\001\000\002\001\001\000\024\014\121\016" +
    "\011\017\012\050\170\051\135\052\134\053\132\054\131" +
    "\061\133\001\001\000\024\014\121\016\011\017\012\050" +
    "\145\051\135\052\134\053\132\054\131\061\133\001\001" +
    "\000\002\001\001\000\022\014\121\016\011\017\012\051" +
    "\167\052\134\053\132\054\131\061\133\001\001\000\022" +
    "\014\121\016\011\017\012\051\166\052\134\053\132\054" +
    "\131\061\133\001\001\000\022\014\121\016\011\017\012" +
    "\051\165\052\134\053\132\054\131\061\133\001\001\000" +
    "\022\014\121\016\011\017\012\051\152\052\134\053\132" +
    "\054\131\061\133\001\001\000\002\001\001\000\020\014" +
    "\121\016\011\017\012\052\164\053\132\054\131\061\133" +
    "\001\001\000\020\014\121\016\011\017\012\052\155\053" +
    "\132\054\131\061\133\001\001\000\002\001\001\000\016" +
    "\014\121\016\011\017\012\053\163\054\131\061\133\001" +
    "\001\000\016\014\121\016\011\017\012\053\162\054\131" +
    "\061\133\001\001\000\016\014\121\016\011\017\012\053" +
    "\161\054\131\061\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\121\016" +
    "\011\017\012\046\174\047\137\050\136\051\135\052\134" +
    "\053\132\054\131\061\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\014" +
    "\121\016\011\017\012\044\204\045\205\046\140\047\137" +
    "\050\136\051\135\052\134\053\132\054\131\061\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\014\121" +
    "\016\011\017\012\044\207\045\205\046\140\047\137\050" +
    "\136\051\135\052\134\053\132\054\131\061\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\014\121\016\011\017\012\044\216\045\205\046\140" +
    "\047\137\050\136\051\135\052\134\053\132\054\131\061" +
    "\133\001\001\000\034\014\121\016\011\017\012\044\214" +
    "\045\205\046\140\047\137\050\136\051\135\052\134\053" +
    "\132\054\131\061\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\014\121\016\011\017\012\045\222\046\140" +
    "\047\137\050\136\051\135\052\134\053\132\054\131\061" +
    "\133\001\001\000\002\001\001\000\032\014\121\016\011" +
    "\017\012\045\224\046\140\047\137\050\136\051\135\052" +
    "\134\053\132\054\131\061\133\001\001\000\002\001\001" +
    "\000\012\014\226\016\011\017\012\037\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\014\121\016\011\017\012\045\232\046\140\047\137\050" +
    "\136\051\135\052\134\053\132\054\131\061\133\001\001" +
    "\000\002\001\001\000\032\014\121\016\011\017\012\045" +
    "\234\046\140\047\137\050\136\051\135\052\134\053\132" +
    "\054\131\061\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\014\121\016\011\017\012\044\242\045\205" +
    "\046\140\047\137\050\136\051\135\052\134\053\132\054" +
    "\131\061\133\001\001\000\034\014\121\016\011\017\012" +
    "\044\240\045\205\046\140\047\137\050\136\051\135\052" +
    "\134\053\132\054\131\061\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\055\255\056\247\060\252\061\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\055\255\056" +
    "\257\060\252\061\251\001\001\000\002\001\001\000\010" +
    "\057\262\060\261\061\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\057\265\060\261" +
    "\061\251\001\001\000\002\001\001\000\032\014\121\016" +
    "\011\017\012\045\267\046\140\047\137\050\136\051\135" +
    "\052\134\053\132\054\131\061\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\226\016\011\017\012\036\274\037\272\001" +
    "\001\000\002\001\001\000\004\034\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\015\015\307\016\011\017\012\001\001\000\004\033\303" +
    "\001\001\000\016\014\102\016\011\017\012\032\104\034" +
    "\066\035\304\001\001\000\004\033\305\001\001\000\012" +
    "\014\102\016\011\017\012\032\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\311\001\001\000\016" +
    "\014\102\016\011\017\012\032\104\034\066\035\312\001" +
    "\001\000\004\033\313\001\001\000\012\014\102\016\011" +
    "\017\012\032\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\317\001\001\000\016\014\102\016\011" +
    "\017\012\032\104\034\066\035\320\001\001\000\004\033" +
    "\321\001\001\000\012\014\102\016\011\017\012\032\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\333\026\352\001\001\000\004\025\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\333\026\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\333\026" +
    "\337\001\001\000\002\001\001\000\014\014\342\016\011" +
    "\017\012\023\343\024\341\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\342\016\011" +
    "\017\012\023\343\024\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\351\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\226\016\011" +
    "\017\012\036\372\037\272\001\001\000\004\025\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\226" +
    "\016\011\017\012\036\363\037\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\014\121\016\011\017\012" +
    "\027\370\045\367\046\140\047\137\050\136\051\135\052" +
    "\134\053\132\054\131\061\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\014\121\016\011" +
    "\017\012\027\375\045\367\046\140\047\137\050\136\051" +
    "\135\052\134\053\132\054\131\061\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\014\u0110\016\011\017" +
    "\012\041\u0105\043\u010a\045\u0109\046\140\047\137\050\136" +
    "\051\135\052\134\053\132\054\131\061\133\062\u0104\001" +
    "\001\000\002\001\001\000\004\040\u015e\001\001\000\032" +
    "\014\121\016\011\017\012\045\220\046\140\047\137\050" +
    "\136\051\135\052\134\053\132\054\131\061\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\014\121\016\011\017\012\042\u014b\045\u014d\046\140" +
    "\047\137\050\136\051\135\052\134\053\132\054\131\061" +
    "\133\001\001\000\032\014\121\016\011\017\012\045\u0148" +
    "\046\140\047\137\050\136\051\135\052\134\053\132\054" +
    "\131\061\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\014\121\016\011\017\012\043\u012a" +
    "\045\u0109\046\140\047\137\050\136\051\135\052\134\053" +
    "\132\054\131\061\133\062\u0104\001\001\000\010\014\u0121" +
    "\016\011\017\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\014\121\016\011\017\012" +
    "\043\u0114\045\u0109\046\140\047\137\050\136\051\135\052" +
    "\134\053\132\054\131\061\133\062\u0104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\014\121\016\011\017\012" +
    "\044\u011a\045\205\046\140\047\137\050\136\051\135\052" +
    "\134\053\132\054\131\061\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\014\121\016" +
    "\011\017\012\044\u011e\045\205\046\140\047\137\050\136" +
    "\051\135\052\134\053\132\054\131\061\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\u0123\016\011\017\012\001\001\000" +
    "\002\001\001\000\034\014\121\016\011\017\012\044\u0125" +
    "\045\205\046\140\047\137\050\136\051\135\052\134\053" +
    "\132\054\131\061\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\014\121\016\011\017\012\044\u0128\045" +
    "\205\046\140\047\137\050\136\051\135\052\134\053\132" +
    "\054\131\061\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\014\121\016\011\017\012\043\u0131\045\u0109\046\140" +
    "\047\137\050\136\051\135\052\134\053\132\054\131\061" +
    "\133\062\u0104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\u013b\016" +
    "\011\017\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\014\121\016\011\017\012\044\u0139\045\205\046" +
    "\140\047\137\050\136\051\135\052\134\053\132\054\131" +
    "\061\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\014\121\016\011\017\012\044\u013d" +
    "\045\205\046\140\047\137\050\136\051\135\052\134\053" +
    "\132\054\131\061\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\014" +
    "\121\016\011\017\012\044\u0142\045\205\046\140\047\137" +
    "\050\136\051\135\052\134\053\132\054\131\061\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\014\121" +
    "\016\011\017\012\045\u0145\046\140\047\137\050\136\051" +
    "\135\052\134\053\132\054\131\061\133\001\001\000\002" +
    "\001\001\000\040\014\u0110\016\011\017\012\041\u0147\043" +
    "\u010a\045\u0109\046\140\047\137\050\136\051\135\052\134" +
    "\053\132\054\131\061\133\062\u0104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\014\121\016\011\017\012\042\u0153\045" +
    "\u014d\046\140\047\137\050\136\051\135\052\134\053\132" +
    "\054\131\061\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\014\121\016\011\017\012\043\u0156\045\u0109" +
    "\046\140\047\137\050\136\051\135\052\134\053\132\054" +
    "\131\061\133\062\u0104\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\014\121\016\011\017\012\045\u0159\046" +
    "\140\047\137\050\136\051\135\052\134\053\132\054\131" +
    "\061\133\001\001\000\002\001\001\000\040\014\u0110\016" +
    "\011\017\012\041\u015b\043\u010a\045\u0109\046\140\047\137" +
    "\050\136\051\135\052\134\053\132\054\131\061\133\062" +
    "\u0104\001\001\000\002\001\001\000\040\014\u0110\016\011" +
    "\017\012\041\u015d\043\u010a\045\u0109\046\140\047\137\050" +
    "\136\051\135\052\134\053\132\054\131\061\133\062\u0104" +
    "\001\001\000\002\001\001\000\040\014\u0110\016\011\017" +
    "\012\041\u0105\043\u010a\045\u0109\046\140\047\137\050\136" +
    "\051\135\052\134\053\132\054\131\061\133\062\u0104\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\015" +
    "\015\u016c\016\011\017\012\001\001\000\004\031\u0163\001" +
    "\001\000\012\014\u0165\016\011\017\012\030\u0164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\226\016\011\017\012\036\u0169" +
    "\037\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u016e\001\001" +
    "\000\012\014\u0165\016\011\017\012\030\u0164\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\u0172\016\011" +
    "\017\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public ABS.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (ABS.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		ABS.Absyn.Program start_val = (ABS.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // AnyIdent ::= _IDENT_ 
            {
              ABS.Absyn.AnyIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyIden(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnyIdent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // AnyIdent ::= TypeIdent 
            {
              ABS.Absyn.AnyIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyTyIden(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnyIdent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListAnyIdent ::= AnyIdent 
            {
              ABS.Absyn.ListAnyIdent RESULT =null;
		ABS.Absyn.AnyIdent p_1 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListAnyIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnyIdent",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListAnyIdent ::= AnyIdent _SYMB_0 ListAnyIdent 
            {
              ABS.Absyn.ListAnyIdent RESULT =null;
		ABS.Absyn.AnyIdent p_1 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListAnyIdent p_3 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnyIdent",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= ListModule 
            {
              ABS.Absyn.Program RESULT =null;
		ABS.Absyn.ListModule p_1 = (ABS.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Prog(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListModule ::= 
            {
              ABS.Absyn.ListModule RESULT =null;
		 RESULT = new ABS.Absyn.ListModule(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListModule ::= ListModule Module 
            {
              ABS.Absyn.ListModule RESULT =null;
		ABS.Absyn.ListModule p_1 = (ABS.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Module p_2 = (ABS.Absyn.Module)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Module ::= _SYMB_50 Type _SYMB_1 ListExport ListImport ListDecl MaybeBlock 
            {
              ABS.Absyn.Module RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListExport p_4 = (ABS.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListImport p_5 = (ABS.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListDecl p_6 = (ABS.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.MaybeBlock p_7 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Modul(p_2,p_4,p_5,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Module",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Export ::= _SYMB_38 ListAnyIdent 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyExport(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Export ::= _SYMB_38 ListAnyIdent _SYMB_41 Type 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Type p_4 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyFromExport(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Export ::= _SYMB_38 _SYMB_2 
            {
              ABS.Absyn.Export RESULT =null;
		 RESULT = new ABS.Absyn.StarExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Export ::= _SYMB_38 _SYMB_2 _SYMB_41 Type 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.Type p_4 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.StarFromExport(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListExport ::= 
            {
              ABS.Absyn.ListExport RESULT =null;
		 RESULT = new ABS.Absyn.ListExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListExport ::= ListExport Export _SYMB_1 
            {
              ABS.Absyn.ListExport RESULT =null;
		ABS.Absyn.ListExport p_1 = (ABS.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Export p_2 = (ABS.Absyn.Export)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Import ::= ImportType Type _SYMB_3 AnyIdent 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.AnyIdent p_4 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyImport(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Import ::= ImportType ListAnyIdent _SYMB_41 Type 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Type p_4 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyFromImport(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Import ::= ImportType _SYMB_2 _SYMB_41 Type 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Type p_4 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.StarFromImport(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListImport ::= 
            {
              ABS.Absyn.ListImport RESULT =null;
		 RESULT = new ABS.Absyn.ListImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListImport ::= ListImport Import _SYMB_1 
            {
              ABS.Absyn.ListImport RESULT =null;
		ABS.Absyn.ListImport p_1 = (ABS.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Import p_2 = (ABS.Absyn.Import)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ImportType ::= _SYMB_40 
            {
              ABS.Absyn.ImportType RESULT =null;
		 RESULT = new ABS.Absyn.ForeignImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportType",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ImportType ::= _SYMB_45 
            {
              ABS.Absyn.ImportType RESULT =null;
		 RESULT = new ABS.Absyn.NormalImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportType",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= _SYMB_4 
            {
              ABS.Absyn.Type RESULT =null;
		 RESULT = new ABS.Absyn.UnderscoreType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= ListQualTypeIdent 
            {
              ABS.Absyn.Type RESULT =null;
		ABS.Absyn.ListQualTypeIdent p_1 = (ABS.Absyn.ListQualTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SimpleType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= ListQualTypeIdent _SYMB_5 ListType _SYMB_6 
            {
              ABS.Absyn.Type RESULT =null;
		ABS.Absyn.ListQualTypeIdent p_1 = (ABS.Absyn.ListQualTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListType p_3 = (ABS.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ParType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListType ::= Type 
            {
              ABS.Absyn.ListType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListType ::= Type _SYMB_0 ListType 
            {
              ABS.Absyn.ListType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListType p_3 = (ABS.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // QualTypeIdent ::= TypeIdent 
            {
              ABS.Absyn.QualTypeIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.QualTypeIden(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QualTypeIdent",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListQualTypeIdent ::= QualTypeIdent 
            {
              ABS.Absyn.ListQualTypeIdent RESULT =null;
		ABS.Absyn.QualTypeIdent p_1 = (ABS.Absyn.QualTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListQualTypeIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQualTypeIdent",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListQualTypeIdent ::= QualTypeIdent _SYMB_3 ListQualTypeIdent 
            {
              ABS.Absyn.ListQualTypeIdent RESULT =null;
		ABS.Absyn.QualTypeIdent p_1 = (ABS.Absyn.QualTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListQualTypeIdent p_3 = (ABS.Absyn.ListQualTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQualTypeIdent",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListDecl ::= 
            {
              ABS.Absyn.ListDecl RESULT =null;
		 RESULT = new ABS.Absyn.ListDecl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListDecl ::= ListDecl Decl 
            {
              ABS.Absyn.ListDecl RESULT =null;
		ABS.Absyn.ListDecl p_1 = (ABS.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Decl p_2 = (ABS.Absyn.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Decl ::= _SYMB_60 TypeIdent _SYMB_7 Type _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Type p_4 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.TypeDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Decl ::= _SYMB_35 TypeIdent _SYMB_7 ListConstrIdent _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListConstrIdent p_4 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.DataDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Decl ::= _SYMB_35 TypeIdent _SYMB_5 ListTypeIdent _SYMB_6 _SYMB_7 ListConstrIdent _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListTypeIdent p_4 = (ABS.Absyn.ListTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.ListConstrIdent p_7 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.DataParDecl(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Decl ::= _SYMB_36 Type _IDENT_ _SYMB_8 ListParam _SYMB_9 _SYMB_7 FunBody _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListParam p_5 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.FunBody p_8 = (ABS.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FunDecl(p_2,p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Decl ::= _SYMB_36 Type _IDENT_ _SYMB_5 ListTypeIdent _SYMB_6 _SYMB_8 ListParam _SYMB_9 _SYMB_7 FunBody _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		ABS.Absyn.ListTypeIdent p_5 = (ABS.Absyn.ListTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		ABS.Absyn.ListParam p_8 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.FunBody p_11 = (ABS.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FunParDecl(p_2,p_3,p_5,p_8,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Decl ::= _SYMB_47 TypeIdent _SYMB_11 ListMethSignat _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListMethSignat p_4 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.InterfDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Decl ::= _SYMB_47 TypeIdent _SYMB_39 ListType _SYMB_11 ListMethSignat _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListType p_4 = (ABS.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListMethSignat p_6 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ExtendsDecl(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Decl ::= _SYMB_34 TypeIdent _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_4 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_5 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_6 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassDecl(p_2,p_4,p_5,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Decl ::= _SYMB_34 TypeIdent _SYMB_8 ListParam _SYMB_9 _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListClassBody p_7 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_8 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_9 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassParamDecl(p_2,p_4,p_7,p_8,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Decl ::= _SYMB_34 TypeIdent _SYMB_44 ListType _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		ABS.Absyn.ListType p_4 = (ABS.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_6 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_7 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_8 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassImplements(p_2,p_4,p_6,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Decl ::= _SYMB_34 TypeIdent _SYMB_8 ListParam _SYMB_9 _SYMB_44 ListType _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ABS.Absyn.ListType p_7 = (ABS.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_9 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_10 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_11 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassParamImplements(p_2,p_4,p_7,p_9,p_10,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ConstrIdent ::= TypeIdent 
            {
              ABS.Absyn.ConstrIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SinglConstrIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ConstrIdent ::= TypeIdent _SYMB_8 ListConstrType _SYMB_9 
            {
              ABS.Absyn.ConstrIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListConstrType p_3 = (ABS.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ParamConstrIdent(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ConstrType ::= Type 
            {
              ABS.Absyn.ConstrType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EmptyConstrType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ConstrType ::= Type _IDENT_ 
            {
              ABS.Absyn.ConstrType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.RecordConstrType(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListConstrType ::= 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		 RESULT = new ABS.Absyn.ListConstrType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListConstrType ::= ConstrType 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		ABS.Absyn.ConstrType p_1 = (ABS.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListConstrType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListConstrType ::= ConstrType _SYMB_0 ListConstrType 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		ABS.Absyn.ConstrType p_1 = (ABS.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListConstrType p_3 = (ABS.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListTypeIdent ::= TypeIdent 
            {
              ABS.Absyn.ListTypeIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListTypeIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypeIdent",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListTypeIdent ::= TypeIdent _SYMB_0 ListTypeIdent 
            {
              ABS.Absyn.ListTypeIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListTypeIdent p_3 = (ABS.Absyn.ListTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypeIdent",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListConstrIdent ::= ConstrIdent 
            {
              ABS.Absyn.ListConstrIdent RESULT =null;
		ABS.Absyn.ConstrIdent p_1 = (ABS.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListConstrIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListConstrIdent ::= ConstrIdent _SYMB_10 ListConstrIdent 
            {
              ABS.Absyn.ListConstrIdent RESULT =null;
		ABS.Absyn.ConstrIdent p_1 = (ABS.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListConstrIdent p_3 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FunBody ::= _SYMB_32 
            {
              ABS.Absyn.FunBody RESULT =null;
		 RESULT = new ABS.Absyn.BuiltinFunBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FunBody ::= PureExp 
            {
              ABS.Absyn.FunBody RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.NormalFunBody(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MethSignat ::= Type _IDENT_ _SYMB_8 ListParam _SYMB_9 
            {
              ABS.Absyn.MethSignat RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.MethSig(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethSignat",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListMethSignat ::= 
            {
              ABS.Absyn.ListMethSignat RESULT =null;
		 RESULT = new ABS.Absyn.ListMethSignat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSignat",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListMethSignat ::= ListMethSignat MethSignat _SYMB_1 
            {
              ABS.Absyn.ListMethSignat RESULT =null;
		ABS.Absyn.ListMethSignat p_1 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.MethSignat p_2 = (ABS.Absyn.MethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSignat",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ClassBody ::= Type _IDENT_ _SYMB_1 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldClassBody(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ClassBody ::= Type _IDENT_ _SYMB_7 PureExp _SYMB_1 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.PureExp p_4 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldAssignClassBody(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ClassBody ::= Type _IDENT_ _SYMB_8 ListParam _SYMB_9 Block 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Block p_6 = (ABS.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.MethClassBody(p_1,p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListClassBody ::= 
            {
              ABS.Absyn.ListClassBody RESULT =null;
		 RESULT = new ABS.Absyn.ListClassBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListClassBody ::= ListClassBody ClassBody 
            {
              ABS.Absyn.ListClassBody RESULT =null;
		ABS.Absyn.ListClassBody p_1 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.ClassBody p_2 = (ABS.Absyn.ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Block ::= _SYMB_11 ListStm _SYMB_12 
            {
              ABS.Absyn.Block RESULT =null;
		ABS.Absyn.ListStm p_2 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Bloc(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MaybeBlock ::= Block 
            {
              ABS.Absyn.MaybeBlock RESULT =null;
		ABS.Absyn.Block p_1 = (ABS.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.JustBlock(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MaybeBlock ::= 
            {
              ABS.Absyn.MaybeBlock RESULT =null;
		 RESULT = new ABS.Absyn.NoBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListParam ::= 
            {
              ABS.Absyn.ListParam RESULT =null;
		 RESULT = new ABS.Absyn.ListParam(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListParam ::= Param 
            {
              ABS.Absyn.ListParam RESULT =null;
		ABS.Absyn.Param p_1 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListParam(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListParam ::= Param _SYMB_0 ListParam 
            {
              ABS.Absyn.ListParam RESULT =null;
		ABS.Absyn.Param p_1 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListParam p_3 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Param ::= Type _IDENT_ 
            {
              ABS.Absyn.Param RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Par(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Param",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListStm ::= 
            {
              ABS.Absyn.ListStm RESULT =null;
		 RESULT = new ABS.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListStm ::= ListStm Stm 
            {
              ABS.Absyn.ListStm RESULT =null;
		ABS.Absyn.ListStm p_1 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Stm p_2 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Stm ::= Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Exp p_1 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Stm ::= _SYMB_11 ListStm _SYMB_12 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.ListStm p_2 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Stm ::= _SYMB_61 _SYMB_8 PureExp _SYMB_9 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Stm ::= _SYMB_53 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Exp p_2 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SReturn(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Stm ::= _IDENT_ _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_3 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Stm ::= _SYMB_58 _SYMB_3 _IDENT_ _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_5 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SFieldAss(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Stm ::= Type _IDENT_ _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SDec(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Stm ::= Type _IDENT_ _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_4 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SDecAss(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Stm ::= _SYMB_43 _SYMB_8 PureExp _SYMB_9 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SIf(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Stm ::= _SYMB_43 _SYMB_8 PureExp _SYMB_9 Stm _SYMB_37 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_7 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Stm ::= _SYMB_56 _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		 RESULT = new ABS.Absyn.SSuspend(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Stm ::= _SYMB_54 _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		 RESULT = new ABS.Absyn.SSkip(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stm ::= _SYMB_30 PureExp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAssert(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stm ::= _SYMB_31 Guard _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Guard p_2 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAwait(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Guard ::= _IDENT_ _SYMB_13 
            {
              ABS.Absyn.Guard RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.VarGuard(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Guard ::= _SYMB_58 _SYMB_3 _IDENT_ _SYMB_13 
            {
              ABS.Absyn.Guard RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldGuard(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Guard ::= PureExp 
            {
              ABS.Absyn.Guard RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpGuard(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Guard ::= Guard _SYMB_14 Guard 
            {
              ABS.Absyn.Guard RESULT =null;
		ABS.Absyn.Guard p_1 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Guard p_3 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AndGuard(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp ::= PureExp 
            {
              ABS.Absyn.Exp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpP(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp ::= EffExp 
            {
              ABS.Absyn.Exp RESULT =null;
		ABS.Absyn.EffExp p_1 = (ABS.Absyn.EffExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpE(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ListPureExp ::= 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		 RESULT = new ABS.Absyn.ListPureExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ListPureExp ::= PureExp 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListPureExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ListPureExp ::= PureExp _SYMB_0 ListPureExp 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PureExp ::= PureExp _SYMB_15 PureExp1 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PureExp ::= PureExp1 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PureExp ::= _SYMB_48 _SYMB_8 Param _SYMB_9 _SYMB_7 PureExp _SYMB_46 PureExp 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Param p_3 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.PureExp p_6 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_8 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Let(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PureExp ::= _SYMB_43 PureExp _SYMB_57 PureExp _SYMB_37 PureExp 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.PureExp p_4 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_6 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PureExp ::= _SYMB_33 PureExp _SYMB_11 ListCaseBranch _SYMB_12 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListCaseBranch p_4 = (ABS.Absyn.ListCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Case(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PureExp1 ::= PureExp1 _SYMB_16 PureExp2 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PureExp1 ::= PureExp2 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PureExp2 ::= PureExp2 _SYMB_17 PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PureExp2 ::= PureExp2 _SYMB_18 PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ENeq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PureExp2 ::= PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PureExp3 ::= PureExp3 _SYMB_5 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PureExp3 ::= PureExp3 _SYMB_19 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PureExp3 ::= PureExp3 _SYMB_6 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EGt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PureExp3 ::= PureExp3 _SYMB_20 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EGe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PureExp3 ::= PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PureExp4 ::= PureExp4 _SYMB_21 PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PureExp4 ::= PureExp4 _SYMB_22 PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PureExp4 ::= PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PureExp5 ::= PureExp5 _SYMB_2 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PureExp5 ::= PureExp5 _SYMB_23 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PureExp5 ::= PureExp5 _SYMB_24 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EMod(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PureExp5 ::= PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PureExp6 ::= _SYMB_25 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELogNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PureExp6 ::= _SYMB_22 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EIntNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PureExp6 ::= PureExp7 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PureExp7 ::= _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PureExp7 ::= Type _SYMB_3 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EQualFunCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PureExp7 ::= _IDENT_ _SYMB_26 ListPureExp _SYMB_27 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ENaryFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PureExp7 ::= Type _SYMB_3 _IDENT_ _SYMB_26 ListPureExp _SYMB_27 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ENaryQualFunCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PureExp7 ::= _IDENT_ 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PureExp7 ::= _SYMB_58 _SYMB_3 _IDENT_ 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EThis(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PureExp7 ::= Type _SYMB_3 _IDENT_ 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EQualVar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PureExp7 ::= Type 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ESinglConstr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PureExp7 ::= Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EParamConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PureExp7 ::= Literal 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Literal p_1 = (ABS.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PureExp7 ::= _SYMB_8 PureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CaseBranch ::= Pattern _SYMB_28 PureExp 
            {
              ABS.Absyn.CaseBranch RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.CaseBranc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseBranch",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ListCaseBranch ::= CaseBranch _SYMB_1 
            {
              ABS.Absyn.ListCaseBranch RESULT =null;
		ABS.Absyn.CaseBranch p_1 = (ABS.Absyn.CaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ListCaseBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCaseBranch",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ListCaseBranch ::= CaseBranch _SYMB_1 ListCaseBranch 
            {
              ABS.Absyn.ListCaseBranch RESULT =null;
		ABS.Absyn.CaseBranch p_1 = (ABS.Absyn.CaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListCaseBranch p_3 = (ABS.Absyn.ListCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCaseBranch",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ListPattern ::= 
            {
              ABS.Absyn.ListPattern RESULT =null;
		 RESULT = new ABS.Absyn.ListPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ListPattern ::= Pattern 
            {
              ABS.Absyn.ListPattern RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ListPattern ::= Pattern _SYMB_0 ListPattern 
            {
              ABS.Absyn.ListPattern RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListPattern p_3 = (ABS.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Pattern ::= _IDENT_ 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.IdentPat(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Pattern ::= Literal 
            {
              ABS.Absyn.Pattern RESULT =null;
		ABS.Absyn.Literal p_1 = (ABS.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.LitPat(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Pattern ::= TypeIdent 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SinglConstrPat(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Pattern ::= TypeIdent _SYMB_8 ListPattern _SYMB_9 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPattern p_3 = (ABS.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ParamConstrPat(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Pattern ::= _SYMB_4 
            {
              ABS.Absyn.Pattern RESULT =null;
		 RESULT = new ABS.Absyn.UnderscorePat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Literal ::= _SYMB_52 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LNull(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Literal ::= _SYMB_58 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LThis(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Literal ::= _SYMB_59 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LThisDC(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Literal ::= _STRING_ 
            {
              ABS.Absyn.Literal RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.LStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Literal ::= _INTEGER_ 
            {
              ABS.Absyn.Literal RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.LInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EffExp ::= _SYMB_51 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_4 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.New(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EffExp ::= _SYMB_51 _SYMB_49 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.Type p_3 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.NewLocal(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EffExp ::= PureExp _SYMB_3 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EffExp ::= _SYMB_58 _SYMB_3 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ThisSyncMethCall(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EffExp ::= PureExp _SYMB_29 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.AsyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EffExp ::= _SYMB_58 _SYMB_29 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ThisAsyncMethCall(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EffExp ::= PureExp _SYMB_3 _SYMB_42 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ABS.Absyn.Get(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EffExp ::= PureExp _SYMB_55 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.Type p_3 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Spawns(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",48, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

