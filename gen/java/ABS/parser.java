
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Thu Oct 09 11:53:20 CEST 2014
//----------------------------------------------------

package ABS;


/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Thu Oct 09 11:53:20 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\247\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\003" +
    "\000\002\005\002\000\002\005\004\000\002\006\011\000" +
    "\002\007\004\000\002\007\006\000\002\007\004\000\002" +
    "\007\006\000\002\010\002\000\002\010\005\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\012\002" +
    "\000\002\012\005\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\006\000\002" +
    "\015\003\000\002\015\005\000\002\016\003\000\002\016" +
    "\005\000\002\017\003\000\002\020\003\000\002\021\003" +
    "\000\002\021\005\000\002\022\002\000\002\022\004\000" +
    "\002\023\007\000\002\023\005\000\002\023\007\000\002" +
    "\023\012\000\002\023\013\000\002\023\016\000\002\023" +
    "\007\000\002\023\011\000\002\023\011\000\002\023\014" +
    "\000\002\023\013\000\002\023\016\000\002\024\003\000" +
    "\002\024\006\000\002\025\003\000\002\025\004\000\002" +
    "\026\002\000\002\026\003\000\002\026\005\000\002\027" +
    "\003\000\002\027\005\000\002\030\003\000\002\030\005" +
    "\000\002\031\003\000\002\031\003\000\002\032\007\000" +
    "\002\033\002\000\002\033\005\000\002\034\005\000\002" +
    "\034\007\000\002\034\010\000\002\035\002\000\002\035" +
    "\004\000\002\036\005\000\002\037\003\000\002\037\002" +
    "\000\002\040\002\000\002\040\003\000\002\040\005\000" +
    "\002\041\004\000\002\042\002\000\002\042\004\000\002" +
    "\043\004\000\002\043\005\000\002\043\007\000\002\043" +
    "\005\000\002\043\006\000\002\043\010\000\002\043\005" +
    "\000\002\043\007\000\002\043\007\000\002\043\011\000" +
    "\002\043\004\000\002\043\004\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\011\000\002\044" +
    "\005\000\002\045\002\000\002\045\004\000\002\046\004" +
    "\000\002\046\002\000\002\047\004\000\002\047\006\000" +
    "\002\047\003\000\002\047\005\000\002\050\003\000\002" +
    "\050\003\000\002\051\002\000\002\051\003\000\002\051" +
    "\005\000\002\052\005\000\002\052\003\000\002\052\012" +
    "\000\002\052\010\000\002\052\007\000\002\053\005\000" +
    "\002\053\003\000\002\054\005\000\002\054\005\000\002" +
    "\054\003\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\003\000\002\056\005" +
    "\000\002\056\005\000\002\056\003\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\003\000\002" +
    "\060\004\000\002\060\004\000\002\060\003\000\002\061" +
    "\006\000\002\061\010\000\002\061\006\000\002\061\010" +
    "\000\002\061\003\000\002\061\005\000\002\061\005\000" +
    "\002\061\003\000\002\061\006\000\002\061\003\000\002" +
    "\061\005\000\002\062\005\000\002\063\004\000\002\063" +
    "\005\000\002\064\002\000\002\064\003\000\002\064\005" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\006\000\002\065\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\067\007\000\002\067\010\000\002\067\010" +
    "\000\002\067\010\000\002\067\010\000\002\067\010\000" +
    "\002\067\005\000\002\067\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018c\000\006\002\ufffb\071\ufffb\001\002\000\004\002" +
    "\u018e\001\002\000\006\002\ufffc\071\007\001\002\000\006" +
    "\002\ufffa\071\ufffa\001\002\000\004\112\012\001\002\000" +
    "\070\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\040\uffe4\041\uffe4\052\uffe4\065\uffe4\076\uffe4\100" +
    "\uffe4\111\uffe4\001\002\000\070\004\uffe2\005\uffe2\006\uffe2" +
    "\007\u018c\011\uffe2\012\uffe2\014\uffe2\015\uffe2\017\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\040\uffe2\041\uffe2\052" +
    "\uffe2\065\uffe2\076\uffe2\100\uffe2\111\uffe2\001\002\000\070" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\014" +
    "\uffe3\015\uffe3\017\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\040\uffe3\041\uffe3\052\uffe3\065\uffe3\076\uffe3\100\uffe3" +
    "\111\uffe3\001\002\000\004\005\014\001\002\000\032\002" +
    "\ufff4\017\ufff4\047\ufff4\050\ufff4\051\ufff4\053\ufff4\054\ufff4" +
    "\056\ufff4\064\ufff4\066\ufff4\071\ufff4\105\ufff4\001\002\000" +
    "\032\002\uffef\017\uffef\047\uffef\050\uffef\051\uffef\053\uffef" +
    "\054\020\056\uffef\064\uffef\066\uffef\071\uffef\105\uffef\001" +
    "\002\000\030\002\uffe0\017\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\053\uffe0\056\037\064\041\066\uffe0\071\uffe0\105\uffe0\001" +
    "\002\000\004\005\034\001\002\000\010\006\022\111\023" +
    "\112\025\001\002\000\006\005\ufff8\060\032\001\002\000" +
    "\006\005\ufff6\060\030\001\002\000\010\004\000\005\000" +
    "\060\000\001\002\000\010\004\026\005\ufffe\060\ufffe\001" +
    "\002\000\010\004\uffff\005\uffff\060\uffff\001\002\000\006" +
    "\111\023\112\025\001\002\000\006\005\ufffd\060\ufffd\001" +
    "\002\000\004\112\012\001\002\000\004\005\ufff5\001\002" +
    "\000\004\112\012\001\002\000\004\005\ufff7\001\002\000" +
    "\032\002\ufff3\017\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3" +
    "\054\ufff3\056\ufff3\064\ufff3\066\ufff3\071\ufff3\105\ufff3\001" +
    "\002\000\004\005\u018b\001\002\000\024\002\uffbb\017\061" +
    "\047\065\050\063\051\062\053\060\066\057\071\uffbb\105" +
    "\064\001\002\000\010\006\uffed\111\uffed\112\uffed\001\002" +
    "\000\010\006\043\111\023\112\044\001\002\000\010\006" +
    "\uffec\111\uffec\112\uffec\001\002\000\004\060\052\001\002" +
    "\000\004\060\050\001\002\000\010\004\uffff\007\uffe3\060" +
    "\uffff\001\002\000\004\007\046\001\002\000\006\111\023" +
    "\112\025\001\002\000\004\005\ufff2\001\002\000\004\112" +
    "\012\001\002\000\004\005\ufff0\001\002\000\004\112\012" +
    "\001\002\000\004\005\ufff1\001\002\000\024\002\uffdf\017" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\066\uffdf\071\uffdf" +
    "\105\uffdf\001\002\000\014\002\uffbc\010\uffbc\020\uffbc\071" +
    "\uffbc\112\uffbc\001\002\000\006\002\ufff9\071\ufff9\001\002" +
    "\000\004\112\u017b\001\002\000\004\112\342\001\002\000" +
    "\064\010\uffb6\014\uffb6\017\uffb6\020\uffb6\033\uffb6\036\uffb6" +
    "\042\uffb6\043\uffb6\045\uffb6\062\uffb6\067\uffb6\072\uffb6\073" +
    "\uffb6\074\uffb6\075\uffb6\077\uffb6\101\uffb6\102\uffb6\103\uffb6" +
    "\104\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\001" +
    "\002\000\006\010\075\112\012\001\002\000\004\112\333" +
    "\001\002\000\004\112\327\001\002\000\004\112\066\001" +
    "\002\000\010\014\067\017\071\063\070\001\002\000\010" +
    "\010\075\015\uffba\112\012\001\002\000\004\112\012\001" +
    "\002\000\012\010\uffbf\017\uffbf\020\uffbf\112\uffbf\001\002" +
    "\000\012\010\075\017\061\020\uffbb\112\012\001\002\000" +
    "\004\111\110\001\002\000\010\010\uffbf\020\uffbf\112\uffbf" +
    "\001\002\000\016\004\uffeb\005\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\111\uffeb\001\002\000\012\010\uffbe\017\uffbe\020\uffbe" +
    "\112\uffbe\001\002\000\020\004\uffea\005\uffea\011\100\012" +
    "\uffea\014\uffea\015\uffea\111\uffea\001\002\000\006\010\075" +
    "\112\012\001\002\000\006\004\104\012\uffe8\001\002\000" +
    "\004\012\103\001\002\000\016\004\uffe9\005\uffe9\012\uffe9" +
    "\014\uffe9\015\uffe9\111\uffe9\001\002\000\006\010\075\112" +
    "\012\001\002\000\004\012\uffe7\001\002\000\010\010\075" +
    "\020\107\112\012\001\002\000\024\002\uffd6\017\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\053\uffd6\066\uffd6\071\uffd6\105\uffd6" +
    "\001\002\000\010\005\111\013\113\014\112\001\002\000" +
    "\012\010\uffc2\017\uffc2\020\uffc2\112\uffc2\001\002\000\010" +
    "\010\075\015\uffba\112\012\001\002\000\034\014\124\033" +
    "\127\036\125\045\116\062\123\067\131\073\126\101\121" +
    "\102\120\107\115\110\114\111\117\112\012\001\002\000" +
    "\066\004\uff63\005\uff63\006\uff63\007\uff63\011\uff63\012\uff63" +
    "\015\uff63\017\uff63\021\uff63\023\uff63\024\uff63\025\uff63\026" +
    "\uff63\027\uff63\030\uff63\031\uff63\032\uff63\033\uff63\034\uff63" +
    "\035\uff63\040\uff63\041\uff63\052\uff63\065\uff63\076\uff63\100" +
    "\uff63\001\002\000\066\004\uff64\005\uff64\006\uff64\007\uff64" +
    "\011\uff64\012\uff64\015\uff64\017\uff64\021\uff64\023\uff64\024" +
    "\uff64\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64" +
    "\033\uff64\034\uff64\035\uff64\040\uff64\041\uff64\052\uff64\065" +
    "\uff64\076\uff64\100\uff64\001\002\000\034\014\124\033\127" +
    "\036\125\045\116\062\123\067\131\073\126\101\121\102" +
    "\120\107\115\110\114\111\117\112\012\001\002\000\070" +
    "\004\uff79\005\uff79\006\uff79\007\uff79\011\uff79\012\uff79\014" +
    "\240\015\uff79\017\uff79\023\uff79\024\uff79\025\uff79\026\uff79" +
    "\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035" +
    "\uff79\037\237\040\uff79\041\uff79\052\uff79\065\uff79\076\uff79" +
    "\100\uff79\001\002\000\066\004\uff65\005\uff65\006\uff65\007" +
    "\uff65\011\uff65\012\uff65\015\uff65\017\uff65\021\uff65\023\uff65" +
    "\024\uff65\025\uff65\026\uff65\027\uff65\030\uff65\031\uff65\032" +
    "\uff65\033\uff65\034\uff65\035\uff65\040\uff65\041\uff65\052\uff65" +
    "\065\uff65\076\uff65\100\uff65\001\002\000\064\004\uff66\005" +
    "\uff66\006\uff66\007\235\011\uff66\012\uff66\015\uff66\017\uff66" +
    "\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\030\uff66\031" +
    "\uff66\032\uff66\033\uff66\034\uff66\035\uff66\040\uff66\041\uff66" +
    "\052\uff66\065\uff66\076\uff66\100\uff66\001\002\000\066\004" +
    "\uff76\005\uff76\006\uff76\007\217\011\uff76\012\uff76\014\220" +
    "\015\uff76\017\uff76\023\uff76\024\uff76\025\uff76\026\uff76\027" +
    "\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76" +
    "\040\uff76\041\uff76\052\uff76\065\uff76\076\uff76\100\uff76\001" +
    "\002\000\034\014\124\033\127\036\125\045\116\062\123" +
    "\067\131\073\126\101\121\102\120\107\115\110\114\111" +
    "\117\112\012\001\002\000\034\014\124\033\127\036\125" +
    "\045\116\062\123\067\131\073\126\101\121\102\120\107" +
    "\115\110\114\111\117\112\012\001\002\000\026\014\124" +
    "\033\127\036\125\073\126\101\121\102\120\107\115\110" +
    "\114\111\117\112\012\001\002\000\066\004\uff67\005\uff67" +
    "\006\uff67\007\uff67\011\uff67\012\uff67\015\uff67\017\uff67\021" +
    "\uff67\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67" +
    "\031\uff67\032\uff67\033\uff67\034\uff67\035\uff67\040\uff67\041" +
    "\uff67\052\uff67\065\uff67\076\uff67\100\uff67\001\002\000\026" +
    "\014\124\033\127\036\125\073\126\101\121\102\120\107" +
    "\115\110\114\111\117\112\012\001\002\000\006\005\205" +
    "\024\200\001\002\000\004\014\172\001\002\000\064\004" +
    "\uff7e\005\uff7e\006\uff7e\007\uff7e\011\uff7e\012\uff7e\015\uff7e" +
    "\017\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030" +
    "\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\040\uff7e" +
    "\041\uff7e\052\uff7e\065\uff7e\076\uff7e\100\uff7e\001\002\000" +
    "\064\004\uff81\005\uff81\006\uff81\007\uff81\011\uff81\012\uff81" +
    "\015\uff81\017\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027" +
    "\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81" +
    "\040\uff81\041\uff81\052\uff81\065\uff81\076\uff81\100\uff81\001" +
    "\002\000\064\004\uff74\005\uff74\006\uff74\007\uff74\011\uff74" +
    "\012\uff74\015\uff74\017\uff74\023\uff74\024\uff74\025\uff74\026" +
    "\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74" +
    "\035\uff74\040\uff74\041\uff74\052\uff74\065\uff74\076\uff74\100" +
    "\uff74\001\002\000\064\004\uff85\005\uff85\006\157\007\uff85" +
    "\011\uff85\012\uff85\015\uff85\017\uff85\023\uff85\024\uff85\025" +
    "\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85" +
    "\034\161\035\160\040\uff85\041\uff85\052\uff85\065\uff85\076" +
    "\uff85\100\uff85\001\002\000\056\004\uff88\005\uff88\007\uff88" +
    "\011\uff88\012\uff88\015\uff88\017\uff88\023\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\154\033\155" +
    "\040\uff88\041\uff88\052\uff88\065\uff88\076\uff88\100\uff88\001" +
    "\002\000\052\004\uff8d\005\uff8d\007\uff8d\011\152\012\151" +
    "\015\uff8d\017\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\030\150\031\147\040\uff8d\041\uff8d\052\uff8d\065\uff8d" +
    "\076\uff8d\100\uff8d\001\002\000\042\004\uff90\005\uff90\007" +
    "\uff90\015\uff90\017\uff90\023\uff90\024\uff90\025\uff90\026\145" +
    "\027\144\040\uff90\041\uff90\052\uff90\065\uff90\076\uff90\100" +
    "\uff90\001\002\000\036\004\uff95\005\uff95\007\uff95\015\uff95" +
    "\017\uff95\023\uff95\024\uff95\025\142\040\uff95\041\uff95\052" +
    "\uff95\065\uff95\076\uff95\100\uff95\001\002\000\026\014\124" +
    "\033\127\036\125\073\126\101\121\102\120\107\115\110" +
    "\114\111\117\112\012\001\002\000\042\004\uff91\005\uff91" +
    "\007\uff91\015\uff91\017\uff91\023\uff91\024\uff91\025\uff91\026" +
    "\145\027\144\040\uff91\041\uff91\052\uff91\065\uff91\076\uff91" +
    "\100\uff91\001\002\000\026\014\124\033\127\036\125\073" +
    "\126\101\121\102\120\107\115\110\114\111\117\112\012" +
    "\001\002\000\026\014\124\033\127\036\125\073\126\101" +
    "\121\102\120\107\115\110\114\111\117\112\012\001\002" +
    "\000\052\004\uff8f\005\uff8f\007\uff8f\011\152\012\151\015" +
    "\uff8f\017\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f" +
    "\030\150\031\147\040\uff8f\041\uff8f\052\uff8f\065\uff8f\076" +
    "\uff8f\100\uff8f\001\002\000\026\014\124\033\127\036\125" +
    "\073\126\101\121\102\120\107\115\110\114\111\117\112" +
    "\012\001\002\000\026\014\124\033\127\036\125\073\126" +
    "\101\121\102\120\107\115\110\114\111\117\112\012\001" +
    "\002\000\026\014\124\033\127\036\125\073\126\101\121" +
    "\102\120\107\115\110\114\111\117\112\012\001\002\000" +
    "\026\014\124\033\127\036\125\073\126\101\121\102\120" +
    "\107\115\110\114\111\117\112\012\001\002\000\056\004" +
    "\uff8c\005\uff8c\007\uff8c\011\uff8c\012\uff8c\015\uff8c\017\uff8c" +
    "\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\032\154\033\155\040\uff8c\041\uff8c\052\uff8c\065\uff8c" +
    "\076\uff8c\100\uff8c\001\002\000\026\014\124\033\127\036" +
    "\125\073\126\101\121\102\120\107\115\110\114\111\117" +
    "\112\012\001\002\000\026\014\124\033\127\036\125\073" +
    "\126\101\121\102\120\107\115\110\114\111\117\112\012" +
    "\001\002\000\064\004\uff86\005\uff86\006\157\007\uff86\011" +
    "\uff86\012\uff86\015\uff86\017\uff86\023\uff86\024\uff86\025\uff86" +
    "\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034" +
    "\161\035\160\040\uff86\041\uff86\052\uff86\065\uff86\076\uff86" +
    "\100\uff86\001\002\000\026\014\124\033\127\036\125\073" +
    "\126\101\121\102\120\107\115\110\114\111\117\112\012" +
    "\001\002\000\026\014\124\033\127\036\125\073\126\101" +
    "\121\102\120\107\115\110\114\111\117\112\012\001\002" +
    "\000\026\014\124\033\127\036\125\073\126\101\121\102" +
    "\120\107\115\110\114\111\117\112\012\001\002\000\064" +
    "\004\uff83\005\uff83\006\uff83\007\uff83\011\uff83\012\uff83\015" +
    "\uff83\017\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83" +
    "\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\040" +
    "\uff83\041\uff83\052\uff83\065\uff83\076\uff83\100\uff83\001\002" +
    "\000\064\004\uff82\005\uff82\006\uff82\007\uff82\011\uff82\012" +
    "\uff82\015\uff82\017\uff82\023\uff82\024\uff82\025\uff82\026\uff82" +
    "\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035" +
    "\uff82\040\uff82\041\uff82\052\uff82\065\uff82\076\uff82\100\uff82" +
    "\001\002\000\064\004\uff84\005\uff84\006\uff84\007\uff84\011" +
    "\uff84\012\uff84\015\uff84\017\uff84\023\uff84\024\uff84\025\uff84" +
    "\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034" +
    "\uff84\035\uff84\040\uff84\041\uff84\052\uff84\065\uff84\076\uff84" +
    "\100\uff84\001\002\000\064\004\uff87\005\uff87\006\157\007" +
    "\uff87\011\uff87\012\uff87\015\uff87\017\uff87\023\uff87\024\uff87" +
    "\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033" +
    "\uff87\034\161\035\160\040\uff87\041\uff87\052\uff87\065\uff87" +
    "\076\uff87\100\uff87\001\002\000\056\004\uff8a\005\uff8a\007" +
    "\uff8a\011\uff8a\012\uff8a\015\uff8a\017\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\154\033" +
    "\155\040\uff8a\041\uff8a\052\uff8a\065\uff8a\076\uff8a\100\uff8a" +
    "\001\002\000\056\004\uff8b\005\uff8b\007\uff8b\011\uff8b\012" +
    "\uff8b\015\uff8b\017\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b" +
    "\027\uff8b\030\uff8b\031\uff8b\032\154\033\155\040\uff8b\041" +
    "\uff8b\052\uff8b\065\uff8b\076\uff8b\100\uff8b\001\002\000\056" +
    "\004\uff89\005\uff89\007\uff89\011\uff89\012\uff89\015\uff89\017" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\154\033\155\040\uff89\041\uff89\052\uff89\065" +
    "\uff89\076\uff89\100\uff89\001\002\000\052\004\uff8e\005\uff8e" +
    "\007\uff8e\011\152\012\151\015\uff8e\017\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\150\031\147\040\uff8e" +
    "\041\uff8e\052\uff8e\065\uff8e\076\uff8e\100\uff8e\001\002\000" +
    "\006\010\075\112\012\001\002\000\004\111\204\001\002" +
    "\000\004\015\175\001\002\000\004\013\176\001\002\000" +
    "\034\014\124\033\127\036\125\045\116\062\123\067\131" +
    "\073\126\101\121\102\120\107\115\110\114\111\117\112" +
    "\012\001\002\000\006\024\200\065\201\001\002\000\026" +
    "\014\124\033\127\036\125\073\126\101\121\102\120\107" +
    "\115\110\114\111\117\112\012\001\002\000\034\014\124" +
    "\033\127\036\125\045\116\062\123\067\131\073\126\101" +
    "\121\102\120\107\115\110\114\111\117\112\012\001\002" +
    "\000\034\004\uff94\005\uff94\007\uff94\015\uff94\017\uff94\023" +
    "\uff94\024\200\040\uff94\041\uff94\052\uff94\065\uff94\076\uff94" +
    "\100\uff94\001\002\000\036\004\uff96\005\uff96\007\uff96\015" +
    "\uff96\017\uff96\023\uff96\024\uff96\025\142\040\uff96\041\uff96" +
    "\052\uff96\065\uff96\076\uff96\100\uff96\001\002\000\006\004" +
    "\uffb7\015\uffb7\001\002\000\012\010\uffc1\017\uffc1\020\uffc1" +
    "\112\uffc1\001\002\000\064\004\uff7f\005\uff7f\006\uff7f\007" +
    "\uff7f\011\uff7f\012\uff7f\015\uff7f\017\uff7f\023\uff7f\024\uff7f" +
    "\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033" +
    "\uff7f\034\uff7f\035\uff7f\040\uff7f\041\uff7f\052\uff7f\065\uff7f" +
    "\076\uff7f\100\uff7f\001\002\000\064\004\uff80\005\uff80\006" +
    "\uff80\007\uff80\011\uff80\012\uff80\015\uff80\017\uff80\023\uff80" +
    "\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032" +
    "\uff80\033\uff80\034\uff80\035\uff80\040\uff80\041\uff80\052\uff80" +
    "\065\uff80\076\uff80\100\uff80\001\002\000\006\015\211\024" +
    "\200\001\002\000\064\004\uff73\005\uff73\006\uff73\007\uff73" +
    "\011\uff73\012\uff73\015\uff73\017\uff73\023\uff73\024\uff73\025" +
    "\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73" +
    "\034\uff73\035\uff73\040\uff73\041\uff73\052\uff73\065\uff73\076" +
    "\uff73\100\uff73\001\002\000\006\024\200\100\213\001\002" +
    "\000\034\014\124\033\127\036\125\045\116\062\123\067" +
    "\131\073\126\101\121\102\120\107\115\110\114\111\117" +
    "\112\012\001\002\000\006\024\200\052\215\001\002\000" +
    "\034\014\124\033\127\036\125\045\116\062\123\067\131" +
    "\073\126\101\121\102\120\107\115\110\114\111\117\112" +
    "\012\001\002\000\034\004\uff93\005\uff93\007\uff93\015\uff93" +
    "\017\uff93\023\uff93\024\200\040\uff93\041\uff93\052\uff93\065" +
    "\uff93\076\uff93\100\uff93\001\002\000\004\111\226\001\002" +
    "\000\036\014\124\015\uff99\033\127\036\125\045\116\062" +
    "\123\067\131\073\126\101\121\102\120\107\115\110\114" +
    "\111\117\112\012\001\002\000\004\015\225\001\002\000" +
    "\012\004\223\015\uff98\024\200\040\uff98\001\002\000\040" +
    "\014\124\015\uff99\033\127\036\125\040\uff99\045\116\062" +
    "\123\067\131\073\126\101\121\102\120\107\115\110\114" +
    "\111\117\112\012\001\002\000\006\015\uff97\040\uff97\001" +
    "\002\000\064\004\uff75\005\uff75\006\uff75\007\uff75\011\uff75" +
    "\012\uff75\015\uff75\017\uff75\023\uff75\024\uff75\025\uff75\026" +
    "\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75" +
    "\035\uff75\040\uff75\041\uff75\052\uff75\065\uff75\076\uff75\100" +
    "\uff75\001\002\000\070\004\uff77\005\uff77\006\uff77\007\uff77" +
    "\011\uff77\012\uff77\014\230\015\uff77\017\uff77\023\uff77\024" +
    "\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77" +
    "\033\uff77\034\uff77\035\uff77\037\227\040\uff77\041\uff77\052" +
    "\uff77\065\uff77\076\uff77\100\uff77\001\002\000\036\014\124" +
    "\033\127\036\125\040\uff99\045\116\062\123\067\131\073" +
    "\126\101\121\102\120\107\115\110\114\111\117\112\012" +
    "\001\002\000\036\014\124\015\uff99\033\127\036\125\045" +
    "\116\062\123\067\131\073\126\101\121\102\120\107\115" +
    "\110\114\111\117\112\012\001\002\000\004\015\232\001" +
    "\002\000\064\004\uff7c\005\uff7c\006\uff7c\007\uff7c\011\uff7c" +
    "\012\uff7c\015\uff7c\017\uff7c\023\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c" +
    "\035\uff7c\040\uff7c\041\uff7c\052\uff7c\065\uff7c\076\uff7c\100" +
    "\uff7c\001\002\000\004\040\234\001\002\000\064\004\uff7a" +
    "\005\uff7a\006\uff7a\007\uff7a\011\uff7a\012\uff7a\015\uff7a\017" +
    "\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a" +
    "\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\040\uff7a\041" +
    "\uff7a\052\uff7a\065\uff7a\076\uff7a\100\uff7a\001\002\000\004" +
    "\111\236\001\002\000\064\004\uff78\005\uff78\006\uff78\007" +
    "\uff78\011\uff78\012\uff78\015\uff78\017\uff78\023\uff78\024\uff78" +
    "\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033" +
    "\uff78\034\uff78\035\uff78\040\uff78\041\uff78\052\uff78\065\uff78" +
    "\076\uff78\100\uff78\001\002\000\036\014\124\033\127\036" +
    "\125\040\uff99\045\116\062\123\067\131\073\126\101\121" +
    "\102\120\107\115\110\114\111\117\112\012\001\002\000" +
    "\036\014\124\015\uff99\033\127\036\125\045\116\062\123" +
    "\067\131\073\126\101\121\102\120\107\115\110\114\111" +
    "\117\112\012\001\002\000\004\015\242\001\002\000\064" +
    "\004\uff7d\005\uff7d\006\uff7d\007\uff7d\011\uff7d\012\uff7d\015" +
    "\uff7d\017\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d" +
    "\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\040" +
    "\uff7d\041\uff7d\052\uff7d\065\uff7d\076\uff7d\100\uff7d\001\002" +
    "\000\004\040\244\001\002\000\064\004\uff7b\005\uff7b\006" +
    "\uff7b\007\uff7b\011\uff7b\012\uff7b\015\uff7b\017\uff7b\023\uff7b" +
    "\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032" +
    "\uff7b\033\uff7b\034\uff7b\035\uff7b\040\uff7b\041\uff7b\052\uff7b" +
    "\065\uff7b\076\uff7b\100\uff7b\001\002\000\006\017\246\024" +
    "\200\001\002\000\022\010\250\073\126\101\247\102\120" +
    "\107\115\110\114\111\256\112\255\001\002\000\010\004" +
    "\uff66\015\uff66\021\uff66\001\002\000\010\004\uff68\015\uff68" +
    "\021\uff68\001\002\000\004\020\271\001\002\000\010\004" +
    "\uff6b\015\uff6b\021\uff6b\001\002\000\004\021\267\001\002" +
    "\000\004\005\265\001\002\000\012\004\uff6a\014\257\015" +
    "\uff6a\021\uff6a\001\002\000\010\004\uff6c\015\uff6c\021\uff6c" +
    "\001\002\000\024\010\250\015\uff6f\073\126\101\247\102" +
    "\120\107\115\110\114\111\256\112\255\001\002\000\006" +
    "\004\263\015\uff6e\001\002\000\004\015\262\001\002\000" +
    "\010\004\uff69\015\uff69\021\uff69\001\002\000\024\010\250" +
    "\015\uff6f\073\126\101\247\102\120\107\115\110\114\111" +
    "\256\112\255\001\002\000\004\015\uff6d\001\002\000\024" +
    "\010\250\020\uff71\073\126\101\247\102\120\107\115\110" +
    "\114\111\256\112\255\001\002\000\004\020\uff70\001\002" +
    "\000\034\014\124\033\127\036\125\045\116\062\123\067" +
    "\131\073\126\101\121\102\120\107\115\110\114\111\117" +
    "\112\012\001\002\000\006\005\uff72\024\200\001\002\000" +
    "\034\004\uff92\005\uff92\007\uff92\015\uff92\017\uff92\023\uff92" +
    "\024\uff92\040\uff92\041\uff92\052\uff92\065\uff92\076\uff92\100" +
    "\uff92\001\002\000\004\015\276\001\002\000\006\004\274" +
    "\015\uffb9\001\002\000\010\010\075\015\uffba\112\012\001" +
    "\002\000\004\015\uffb8\001\002\000\004\017\061\001\002" +
    "\000\012\010\uffc0\017\uffc0\020\uffc0\112\uffc0\001\002\000" +
    "\004\017\304\001\002\000\006\004\302\017\uffe6\001\002" +
    "\000\004\112\012\001\002\000\004\017\uffe5\001\002\000" +
    "\012\010\uffbf\017\uffbf\020\uffbf\112\uffbf\001\002\000\012" +
    "\010\075\017\061\020\uffbb\112\012\001\002\000\010\010" +
    "\uffbf\020\uffbf\112\uffbf\001\002\000\010\010\075\020\310" +
    "\112\012\001\002\000\024\002\uffd4\017\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\053\uffd4\066\uffd4\071\uffd4\105\uffd4\001\002" +
    "\000\004\015\312\001\002\000\006\017\314\063\313\001" +
    "\002\000\004\112\012\001\002\000\012\010\uffbf\017\uffbf" +
    "\020\uffbf\112\uffbf\001\002\000\012\010\075\017\061\020" +
    "\uffbb\112\012\001\002\000\010\010\uffbf\020\uffbf\112\uffbf" +
    "\001\002\000\010\010\075\020\320\112\012\001\002\000" +
    "\024\002\uffd5\017\uffd5\047\uffd5\050\uffd5\051\uffd5\053\uffd5" +
    "\066\uffd5\071\uffd5\105\uffd5\001\002\000\004\017\322\001" +
    "\002\000\012\010\uffbf\017\uffbf\020\uffbf\112\uffbf\001\002" +
    "\000\012\010\075\017\061\020\uffbb\112\012\001\002\000" +
    "\010\010\uffbf\020\uffbf\112\uffbf\001\002\000\010\010\075" +
    "\020\326\112\012\001\002\000\024\002\uffd3\017\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\053\uffd3\066\uffd3\071\uffd3\105\uffd3" +
    "\001\002\000\004\013\330\001\002\000\006\010\075\112" +
    "\012\001\002\000\004\005\332\001\002\000\024\002\uffde" +
    "\017\uffde\047\uffde\050\uffde\051\uffde\053\uffde\066\uffde\071" +
    "\uffde\105\uffde\001\002\000\006\011\335\013\334\001\002" +
    "\000\004\112\342\001\002\000\004\112\336\001\002\000" +
    "\006\004\360\012\uffcb\001\002\000\004\012\340\001\002" +
    "\000\004\013\341\001\002\000\004\112\342\001\002\000" +
    "\010\005\uffd2\014\350\016\uffd2\001\002\000\006\005\uffc9" +
    "\016\346\001\002\000\004\005\345\001\002\000\024\002" +
    "\uffdb\017\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\066\uffdb" +
    "\071\uffdb\105\uffdb\001\002\000\004\112\342\001\002\000" +
    "\004\005\uffc8\001\002\000\010\010\075\015\uffce\112\012" +
    "\001\002\000\004\015\357\001\002\000\010\004\uffd0\015" +
    "\uffd0\111\356\001\002\000\006\004\354\015\uffcd\001\002" +
    "\000\010\010\075\015\uffce\112\012\001\002\000\004\015" +
    "\uffcc\001\002\000\006\004\uffcf\015\uffcf\001\002\000\006" +
    "\005\uffd1\016\uffd1\001\002\000\004\112\336\001\002\000" +
    "\004\012\uffca\001\002\000\004\005\363\001\002\000\024" +
    "\002\uffdc\017\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc\066" +
    "\uffdc\071\uffdc\105\uffdc\001\002\000\004\111\365\001\002" +
    "\000\006\011\367\014\366\001\002\000\010\010\075\015" +
    "\uffba\112\012\001\002\000\004\112\336\001\002\000\004" +
    "\012\371\001\002\000\004\014\372\001\002\000\010\010" +
    "\075\015\uffba\112\012\001\002\000\004\015\374\001\002" +
    "\000\004\013\375\001\002\000\036\014\124\033\127\036" +
    "\125\044\376\045\116\062\123\067\131\073\126\101\121" +
    "\102\120\107\115\110\114\111\117\112\012\001\002\000" +
    "\004\005\uffc7\001\002\000\006\005\uffc6\024\200\001\002" +
    "\000\004\005\u0101\001\002\000\024\002\uffd9\017\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\053\uffd9\066\uffd9\071\uffd9\105\uffd9" +
    "\001\002\000\004\015\u0103\001\002\000\004\013\u0104\001" +
    "\002\000\036\014\124\033\127\036\125\044\376\045\116" +
    "\062\123\067\131\073\126\101\121\102\120\107\115\110" +
    "\114\111\117\112\012\001\002\000\004\005\u0106\001\002" +
    "\000\024\002\uffda\017\uffda\047\uffda\050\uffda\051\uffda\053" +
    "\uffda\066\uffda\071\uffda\105\uffda\001\002\000\064\010\075" +
    "\014\124\017\u010a\020\u0109\033\127\036\125\042\u0112\043" +
    "\u0110\045\116\062\u0108\067\131\072\u0119\073\126\074\u0118" +
    "\075\u0117\077\u0116\101\u0113\102\120\103\u0111\104\u010f\106" +
    "\u010e\107\115\110\114\111\u010b\112\012\001\002\000\034" +
    "\014\u0173\033\127\036\125\045\116\062\123\067\131\073" +
    "\126\101\121\102\120\107\115\110\114\111\117\112\012" +
    "\001\002\000\016\002\uffbd\010\uffbd\017\uffbd\020\uffbd\071" +
    "\uffbd\112\uffbd\001\002\000\064\010\uffb6\014\uffb6\017\uffb6" +
    "\020\uffb6\033\uffb6\036\uffb6\042\uffb6\043\uffb6\045\uffb6\062" +
    "\uffb6\067\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\077\uffb6" +
    "\101\uffb6\102\uffb6\103\uffb6\104\uffb6\106\uffb6\107\uffb6\110" +
    "\uffb6\111\uffb6\112\uffb6\001\002\000\052\005\uff79\006\uff79" +
    "\007\uff79\011\uff79\012\uff79\013\u016e\014\240\024\uff79\025" +
    "\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79" +
    "\034\uff79\035\uff79\037\237\041\uff79\076\uff79\001\002\000" +
    "\004\005\uff9a\001\002\000\064\010\uffb5\014\uffb5\017\uffb5" +
    "\020\uffb5\033\uffb5\036\uffb5\042\uffb5\043\uffb5\045\uffb5\062" +
    "\uffb5\067\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\077\uffb5" +
    "\101\uffb5\102\uffb5\103\uffb5\104\uffb5\106\uffb5\107\uffb5\110" +
    "\uffb5\111\uffb5\112\uffb5\001\002\000\004\014\u016a\001\002" +
    "\000\062\010\075\014\124\017\u010a\033\127\036\125\042" +
    "\u0112\043\u0110\045\116\062\u0108\067\131\072\u0119\073\126" +
    "\074\u0118\075\u0117\077\u0116\101\u0113\102\120\103\u0111\104" +
    "\u010f\106\u010e\107\115\110\114\111\u010b\112\012\001\002" +
    "\000\034\014\124\033\127\036\125\045\116\062\123\067" +
    "\131\073\126\101\u0154\102\120\107\115\110\114\111\u0153" +
    "\112\012\001\002\000\034\014\124\033\127\036\125\045" +
    "\116\062\123\067\131\073\126\101\121\102\120\107\115" +
    "\110\114\111\117\112\012\001\002\000\034\014\124\033" +
    "\127\036\125\045\116\062\123\067\131\073\126\101\121" +
    "\102\120\107\115\110\114\111\117\112\012\001\002\000" +
    "\044\005\uff66\006\uff66\007\u014a\011\uff66\012\uff66\024\uff66" +
    "\025\uff66\026\uff66\027\uff66\030\uff66\031\uff66\032\uff66\033" +
    "\uff66\034\uff66\035\uff66\041\u0123\076\uff66\001\002\000\014" +
    "\005\uff9b\007\u013b\024\200\041\u013c\076\u013a\001\002\000" +
    "\004\005\u0139\001\002\000\004\005\u0138\001\002\000\004" +
    "\005\u0137\001\002\000\036\014\124\033\127\036\125\045" +
    "\116\062\123\067\131\072\u0119\073\126\101\u011f\102\120" +
    "\107\115\110\114\111\117\112\012\001\002\000\010\010" +
    "\075\070\u012d\112\012\001\002\000\004\111\u011c\001\002" +
    "\000\050\005\uff76\006\uff76\007\217\011\100\012\uff76\014" +
    "\220\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76" +
    "\032\uff76\033\uff76\034\uff76\035\uff76\041\uff76\076\uff76\111" +
    "\uffea\001\002\000\006\005\u011d\013\u011e\001\002\000\070" +
    "\010\uffae\014\uffae\017\uffae\020\uffae\033\uffae\036\uffae\042" +
    "\uffae\043\uffae\045\uffae\046\uffae\052\uffae\062\uffae\067\uffae" +
    "\072\uffae\073\uffae\074\uffae\075\uffae\077\uffae\101\uffae\102" +
    "\uffae\103\uffae\104\uffae\106\uffae\107\uffae\110\uffae\111\uffae" +
    "\112\uffae\001\002\000\036\014\124\033\127\036\125\045" +
    "\116\062\123\067\131\072\u0119\073\126\101\u011f\102\120" +
    "\107\115\110\114\111\117\112\012\001\002\000\044\005" +
    "\uff66\006\uff66\007\u0122\011\uff66\012\uff66\024\uff66\025\uff66" +
    "\026\uff66\027\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034" +
    "\uff66\035\uff66\041\u0123\076\uff66\001\002\000\004\005\u0121" +
    "\001\002\000\070\010\uffad\014\uffad\017\uffad\020\uffad\033" +
    "\uffad\036\uffad\042\uffad\043\uffad\045\uffad\046\uffad\052\uffad" +
    "\062\uffad\067\uffad\072\uffad\073\uffad\074\uffad\075\uffad\077" +
    "\uffad\101\uffad\102\uffad\103\uffad\104\uffad\106\uffad\107\uffad" +
    "\110\uffad\111\uffad\112\uffad\001\002\000\004\111\u0128\001" +
    "\002\000\004\111\u0124\001\002\000\004\014\u0125\001\002" +
    "\000\036\014\124\015\uff99\033\127\036\125\045\116\062" +
    "\123\067\131\073\126\101\121\102\120\107\115\110\114" +
    "\111\117\112\012\001\002\000\004\015\u0127\001\002\000" +
    "\004\005\uff5d\001\002\000\046\005\uff78\006\uff78\007\uff78" +
    "\011\uff78\012\uff78\014\u0129\024\uff78\025\uff78\026\uff78\027" +
    "\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78" +
    "\041\uff78\076\uff78\001\002\000\036\014\124\015\uff99\033" +
    "\127\036\125\045\116\062\123\067\131\073\126\101\121" +
    "\102\120\107\115\110\114\111\117\112\012\001\002\000" +
    "\004\015\u012b\001\002\000\004\005\uff5f\001\002\000\004" +
    "\014\u0132\001\002\000\006\010\075\112\012\001\002\000" +
    "\004\014\u012f\001\002\000\036\014\124\015\uff99\033\127" +
    "\036\125\045\116\062\123\067\131\073\126\101\121\102" +
    "\120\107\115\110\114\111\117\112\012\001\002\000\004" +
    "\015\u0131\001\002\000\004\005\uff61\001\002\000\036\014" +
    "\124\015\uff99\033\127\036\125\045\116\062\123\067\131" +
    "\073\126\101\121\102\120\107\115\110\114\111\117\112" +
    "\012\001\002\000\004\015\u0134\001\002\000\004\005\uff62" +
    "\001\002\000\004\005\u0136\001\002\000\070\010\uffb1\014" +
    "\uffb1\017\uffb1\020\uffb1\033\uffb1\036\uffb1\042\uffb1\043\uffb1" +
    "\045\uffb1\046\uffb1\052\uffb1\062\uffb1\067\uffb1\072\uffb1\073" +
    "\uffb1\074\uffb1\075\uffb1\077\uffb1\101\uffb1\102\uffb1\103\uffb1" +
    "\104\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1\001" +
    "\002\000\070\010\uffa9\014\uffa9\017\uffa9\020\uffa9\033\uffa9" +
    "\036\uffa9\042\uffa9\043\uffa9\045\uffa9\046\uffa9\052\uffa9\062" +
    "\uffa9\067\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\077\uffa9" +
    "\101\uffa9\102\uffa9\103\uffa9\104\uffa9\106\uffa9\107\uffa9\110" +
    "\uffa9\111\uffa9\112\uffa9\001\002\000\070\010\uffaa\014\uffaa" +
    "\017\uffaa\020\uffaa\033\uffaa\036\uffaa\042\uffaa\043\uffaa\045" +
    "\uffaa\046\uffaa\052\uffaa\062\uffaa\067\uffaa\072\uffaa\073\uffaa" +
    "\074\uffaa\075\uffaa\077\uffaa\101\uffaa\102\uffaa\103\uffaa\104" +
    "\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\001\002" +
    "\000\070\010\uffb4\014\uffb4\017\uffb4\020\uffb4\033\uffb4\036" +
    "\uffb4\042\uffb4\043\uffb4\045\uffb4\046\uffb4\052\uffb4\062\uffb4" +
    "\067\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\077\uffb4\101" +
    "\uffb4\102\uffb4\103\uffb4\104\uffb4\106\uffb4\107\uffb4\110\uffb4" +
    "\111\uffb4\112\uffb4\001\002\000\006\010\075\112\012\001" +
    "\002\000\006\061\u0141\111\u0142\001\002\000\004\111\u013d" +
    "\001\002\000\004\014\u013e\001\002\000\036\014\124\015" +
    "\uff99\033\127\036\125\045\116\062\123\067\131\073\126" +
    "\101\121\102\120\107\115\110\114\111\117\112\012\001" +
    "\002\000\004\015\u0140\001\002\000\004\005\uff5e\001\002" +
    "\000\004\005\uff5c\001\002\000\004\014\u0143\001\002\000" +
    "\036\014\124\015\uff99\033\127\036\125\045\116\062\123" +
    "\067\131\073\126\101\121\102\120\107\115\110\114\111" +
    "\117\112\012\001\002\000\004\015\u0145\001\002\000\004" +
    "\005\uff60\001\002\000\004\014\u0147\001\002\000\036\014" +
    "\124\015\uff99\033\127\036\125\045\116\062\123\067\131" +
    "\073\126\101\121\102\120\107\115\110\114\111\117\112" +
    "\012\001\002\000\004\015\u0149\001\002\000\004\005\uff5b" +
    "\001\002\000\004\111\u014b\001\002\000\050\005\uff78\006" +
    "\uff78\007\uff78\011\uff78\012\uff78\013\u014c\014\u0129\024\uff78" +
    "\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033" +
    "\uff78\034\uff78\035\uff78\041\uff78\076\uff78\001\002\000\036" +
    "\014\124\033\127\036\125\045\116\062\123\067\131\072" +
    "\u0119\073\126\101\u011f\102\120\107\115\110\114\111\117" +
    "\112\012\001\002\000\004\005\u014e\001\002\000\070\010" +
    "\uffaf\014\uffaf\017\uffaf\020\uffaf\033\uffaf\036\uffaf\042\uffaf" +
    "\043\uffaf\045\uffaf\046\uffaf\052\uffaf\062\uffaf\067\uffaf\072" +
    "\uffaf\073\uffaf\074\uffaf\075\uffaf\077\uffaf\101\uffaf\102\uffaf" +
    "\103\uffaf\104\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112" +
    "\uffaf\001\002\000\006\005\u0150\024\200\001\002\000\070" +
    "\010\uffa8\014\uffa8\017\uffa8\020\uffa8\033\uffa8\036\uffa8\042" +
    "\uffa8\043\uffa8\045\uffa8\046\uffa8\052\uffa8\062\uffa8\067\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\075\uffa8\077\uffa8\101\uffa8\102" +
    "\uffa8\103\uffa8\104\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8" +
    "\112\uffa8\001\002\000\006\005\u0152\024\200\001\002\000" +
    "\070\010\uffa6\014\uffa6\017\uffa6\020\uffa6\033\uffa6\036\uffa6" +
    "\042\uffa6\043\uffa6\045\uffa6\046\uffa6\052\uffa6\062\uffa6\067" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\077\uffa6\101\uffa6" +
    "\102\uffa6\103\uffa6\104\uffa6\106\uffa6\107\uffa6\110\uffa6\111" +
    "\uffa6\112\uffa6\001\002\000\046\005\uff79\006\uff79\011\uff79" +
    "\012\uff79\014\240\022\u015d\023\uff79\024\uff79\025\uff79\026" +
    "\uff79\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79" +
    "\035\uff79\037\237\001\002\000\042\005\uff66\006\uff66\007" +
    "\u015a\011\uff66\012\uff66\023\uff66\024\uff66\025\uff66\026\uff66" +
    "\027\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035" +
    "\uff66\001\002\000\006\005\u0157\023\u0158\001\002\000\010" +
    "\005\uff9d\023\uff9d\024\200\001\002\000\070\010\uffa7\014" +
    "\uffa7\017\uffa7\020\uffa7\033\uffa7\036\uffa7\042\uffa7\043\uffa7" +
    "\045\uffa7\046\uffa7\052\uffa7\062\uffa7\067\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\077\uffa7\101\uffa7\102\uffa7\103\uffa7" +
    "\104\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7\001" +
    "\002\000\034\014\124\033\127\036\125\045\116\062\123" +
    "\067\131\073\126\101\u0154\102\120\107\115\110\114\111" +
    "\u0153\112\012\001\002\000\006\005\uff9c\023\u0158\001\002" +
    "\000\004\111\u015b\001\002\000\042\005\uff78\006\uff78\011" +
    "\uff78\012\uff78\022\u015c\023\uff78\024\uff78\025\uff78\026\uff78" +
    "\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035" +
    "\uff78\001\002\000\006\005\uff9e\023\uff9e\001\002\000\006" +
    "\005\uff9f\023\uff9f\001\002\000\004\046\u015f\001\002\000" +
    "\004\017\u0160\001\002\000\024\010\uffa3\020\uffa3\073\uffa3" +
    "\101\uffa3\102\uffa3\107\uffa3\110\uffa3\111\uffa3\112\uffa3\001" +
    "\002\000\024\010\250\020\u0164\073\126\101\247\102\120" +
    "\107\115\110\114\111\256\112\255\001\002\000\024\010" +
    "\uffa2\020\uffa2\073\uffa2\101\uffa2\102\uffa2\107\uffa2\110\uffa2" +
    "\111\uffa2\112\uffa2\001\002\000\004\021\u0168\001\002\000" +
    "\072\010\uffa0\014\uffa0\017\uffa0\020\uffa0\033\uffa0\036\uffa0" +
    "\042\uffa0\043\uffa0\045\uffa0\046\uffa0\052\uffa0\057\u0166\062" +
    "\uffa0\067\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\077\uffa0" +
    "\101\uffa0\102\uffa0\103\uffa0\104\uffa0\106\uffa0\107\uffa0\110" +
    "\uffa0\111\uffa0\112\uffa0\001\002\000\070\010\uffa5\014\uffa5" +
    "\017\uffa5\020\uffa5\033\uffa5\036\uffa5\042\uffa5\043\uffa5\045" +
    "\uffa5\046\uffa5\052\uffa5\062\uffa5\067\uffa5\072\uffa5\073\uffa5" +
    "\074\uffa5\075\uffa5\077\uffa5\101\uffa5\102\uffa5\103\uffa5\104" +
    "\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5\112\uffa5\001\002" +
    "\000\062\010\075\014\124\017\u010a\033\127\036\125\042" +
    "\u0112\043\u0110\045\116\062\u0108\067\131\072\u0119\073\126" +
    "\074\u0118\075\u0117\077\u0116\101\u0113\102\120\103\u0111\104" +
    "\u010f\106\u010e\107\115\110\114\111\u010b\112\012\001\002" +
    "\000\070\010\uffa1\014\uffa1\017\uffa1\020\uffa1\033\uffa1\036" +
    "\uffa1\042\uffa1\043\uffa1\045\uffa1\046\uffa1\052\uffa1\062\uffa1" +
    "\067\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\077\uffa1\101" +
    "\uffa1\102\uffa1\103\uffa1\104\uffa1\106\uffa1\107\uffa1\110\uffa1" +
    "\111\uffa1\112\uffa1\001\002\000\062\010\075\014\124\017" +
    "\u010a\033\127\036\125\042\u0112\043\u0110\045\116\062\u0108" +
    "\067\131\072\u0119\073\126\074\u0118\075\u0117\077\u0116\101" +
    "\u0113\102\120\103\u0111\104\u010f\106\u010e\107\115\110\114" +
    "\111\u010b\112\012\001\002\000\024\010\uffa4\020\uffa4\073" +
    "\uffa4\101\uffa4\102\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4" +
    "\001\002\000\034\014\124\033\127\036\125\045\116\062" +
    "\123\067\131\073\126\101\121\102\120\107\115\110\114" +
    "\111\117\112\012\001\002\000\006\015\u016c\024\200\001" +
    "\002\000\062\010\075\014\124\017\u010a\033\127\036\125" +
    "\042\u0112\043\u0110\045\116\062\u0108\067\131\072\u0119\073" +
    "\126\074\u0118\075\u0117\077\u0116\101\u0113\102\120\103\u0111" +
    "\104\u010f\106\u010e\107\115\110\114\111\u010b\112\012\001" +
    "\002\000\070\010\uffb2\014\uffb2\017\uffb2\020\uffb2\033\uffb2" +
    "\036\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\052\uffb2\062" +
    "\uffb2\067\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\077\uffb2" +
    "\101\uffb2\102\uffb2\103\uffb2\104\uffb2\106\uffb2\107\uffb2\110" +
    "\uffb2\111\uffb2\112\uffb2\001\002\000\036\014\124\033\127" +
    "\036\125\045\116\062\123\067\131\072\u0119\073\126\101" +
    "\u011f\102\120\107\115\110\114\111\117\112\012\001\002" +
    "\000\004\005\u0170\001\002\000\070\010\uffb0\014\uffb0\017" +
    "\uffb0\020\uffb0\033\uffb0\036\uffb0\042\uffb0\043\uffb0\045\uffb0" +
    "\046\uffb0\052\uffb0\062\uffb0\067\uffb0\072\uffb0\073\uffb0\074" +
    "\uffb0\075\uffb0\077\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0" +
    "\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\001\002\000" +
    "\064\010\075\014\124\017\u010a\020\u0172\033\127\036\125" +
    "\042\u0112\043\u0110\045\116\062\u0108\067\131\072\u0119\073" +
    "\126\074\u0118\075\u0117\077\u0116\101\u0113\102\120\103\u0111" +
    "\104\u010f\106\u010e\107\115\110\114\111\u010b\112\012\001" +
    "\002\000\070\010\uffb3\014\uffb3\017\uffb3\020\uffb3\033\uffb3" +
    "\036\uffb3\042\uffb3\043\uffb3\045\uffb3\046\uffb3\052\uffb3\062" +
    "\uffb3\067\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\077\uffb3" +
    "\101\uffb3\102\uffb3\103\uffb3\104\uffb3\106\uffb3\107\uffb3\110" +
    "\uffb3\111\uffb3\112\uffb3\001\002\000\034\014\124\033\127" +
    "\036\125\045\116\062\123\067\131\073\126\101\121\102" +
    "\120\107\115\110\114\111\117\112\012\001\002\000\006" +
    "\015\u0175\024\200\001\002\000\114\006\uff73\010\075\011" +
    "\uff73\012\uff73\014\124\017\u010a\024\uff73\025\uff73\026\uff73" +
    "\027\uff73\030\uff73\031\uff73\032\uff73\033\127\034\uff73\035" +
    "\uff73\036\125\042\u0112\043\u0110\045\116\062\u0108\067\131" +
    "\072\u0119\073\126\074\u0118\075\u0117\077\u0116\100\uff73\101" +
    "\u0113\102\120\103\u0111\104\u010f\106\u010e\107\115\110\114" +
    "\111\u010b\112\012\001\002\000\070\010\uffac\014\uffac\017" +
    "\uffac\020\uffac\033\uffac\036\uffac\042\uffac\043\uffac\045\uffac" +
    "\046\uffac\052\u0177\062\uffac\067\uffac\072\uffac\073\uffac\074" +
    "\uffac\075\uffac\077\uffac\101\uffac\102\uffac\103\uffac\104\uffac" +
    "\106\uffac\107\uffac\110\uffac\111\uffac\112\uffac\001\002\000" +
    "\062\010\075\014\124\017\u010a\033\127\036\125\042\u0112" +
    "\043\u0110\045\116\062\u0108\067\131\072\u0119\073\126\074" +
    "\u0118\075\u0117\077\u0116\101\u0113\102\120\103\u0111\104\u010f" +
    "\106\u010e\107\115\110\114\111\u010b\112\012\001\002\000" +
    "\070\010\uffab\014\uffab\017\uffab\020\uffab\033\uffab\036\uffab" +
    "\042\uffab\043\uffab\045\uffab\046\uffab\052\uffab\062\uffab\067" +
    "\uffab\072\uffab\073\uffab\074\uffab\075\uffab\077\uffab\101\uffab" +
    "\102\uffab\103\uffab\104\uffab\106\uffab\107\uffab\110\uffab\111" +
    "\uffab\112\uffab\001\002\000\004\005\u017a\001\002\000\024" +
    "\002\uffdd\017\uffdd\047\uffdd\050\uffdd\051\uffdd\053\uffdd\066" +
    "\uffdd\071\uffdd\105\uffdd\001\002\000\006\017\u017d\055\u017c" +
    "\001\002\000\004\112\012\001\002\000\010\010\uffc4\020" +
    "\uffc4\112\uffc4\001\002\000\010\010\075\020\u0181\112\012" +
    "\001\002\000\004\005\u0186\001\002\000\004\111\u0182\001" +
    "\002\000\024\002\uffd8\017\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\053\uffd8\066\uffd8\071\uffd8\105\uffd8\001\002\000\004\014" +
    "\u0183\001\002\000\010\010\075\015\uffba\112\012\001\002" +
    "\000\004\015\u0185\001\002\000\004\005\uffc5\001\002\000" +
    "\010\010\uffc3\020\uffc3\112\uffc3\001\002\000\004\017\u0188" +
    "\001\002\000\010\010\uffc4\020\uffc4\112\uffc4\001\002\000" +
    "\010\010\075\020\u018a\112\012\001\002\000\024\002\uffd7" +
    "\017\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7\066\uffd7\071" +
    "\uffd7\105\uffd7\001\002\000\030\002\uffee\017\uffee\047\uffee" +
    "\050\uffee\051\uffee\053\uffee\056\uffee\064\uffee\066\uffee\071" +
    "\uffee\105\uffee\001\002\000\004\112\012\001\002\000\070" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\014" +
    "\uffe1\015\uffe1\017\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\040\uffe1\041\uffe1\052\uffe1\065\uffe1\076\uffe1\100\uffe1" +
    "\111\uffe1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018c\000\006\004\003\005\004\001\001\000\002\001" +
    "\001\000\004\006\005\001\001\000\002\001\001\000\010" +
    "\017\012\020\010\021\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\014\001\001\000\006\007\016\012\015\001\001\000" +
    "\010\011\034\013\037\022\035\001\001\000\002\001\001" +
    "\000\006\002\023\003\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\023\003\026\001\001\000\002\001" +
    "\001\000\010\017\030\020\010\021\007\001\001\000\002" +
    "\001\001\000\010\017\032\020\010\021\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\053\036\054\037\055\001\001\000\002\001\001\000" +
    "\014\002\023\003\041\017\044\020\010\021\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\046\001\001" +
    "\000\002\001\001\000\010\017\050\020\010\021\007\001" +
    "\001\000\002\001\001\000\010\017\052\020\010\021\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u0178" +
    "\001\001\000\004\042\u0106\001\001\000\012\014\363\017" +
    "\076\020\010\021\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\172\017\076\020\010\021\007\040\310\041\272\001\001" +
    "\000\012\016\277\017\300\020\010\021\007\001\001\000" +
    "\004\035\071\001\001\000\020\014\072\017\076\020\010" +
    "\021\007\034\075\036\054\037\073\001\001\000\002\001" +
    "\001\000\004\035\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\100\015\101\017" +
    "\076\020\010\021\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\100\015\104\017" +
    "\076\020\010\021\007\001\001\000\002\001\001\000\014" +
    "\014\072\017\076\020\010\021\007\034\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\172\017\076\020\010\021\007\040\271\041\272\001" +
    "\001\000\032\017\121\020\010\021\007\052\127\053\140" +
    "\054\137\055\136\056\135\057\134\060\132\061\131\066" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\017\121\020\010\021\007\052\244\053\140\054\137\055" +
    "\136\056\135\057\134\060\132\061\131\066\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\017\121\020\010\021\007\052\211" +
    "\053\140\054\137\055\136\056\135\057\134\060\132\061" +
    "\131\066\133\001\001\000\032\017\121\020\010\021\007" +
    "\052\207\053\140\054\137\055\136\056\135\057\134\060" +
    "\132\061\131\066\133\001\001\000\016\017\121\020\010" +
    "\021\007\060\206\061\131\066\133\001\001\000\002\001" +
    "\001\000\016\017\121\020\010\021\007\060\205\061\131" +
    "\066\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\017\121\020\010\021\007" +
    "\054\142\055\136\056\135\057\134\060\132\061\131\066" +
    "\133\001\001\000\002\001\001\000\024\017\121\020\010" +
    "\021\007\055\170\056\135\057\134\060\132\061\131\066" +
    "\133\001\001\000\024\017\121\020\010\021\007\055\145" +
    "\056\135\057\134\060\132\061\131\066\133\001\001\000" +
    "\002\001\001\000\022\017\121\020\010\021\007\056\167" +
    "\057\134\060\132\061\131\066\133\001\001\000\022\017" +
    "\121\020\010\021\007\056\166\057\134\060\132\061\131" +
    "\066\133\001\001\000\022\017\121\020\010\021\007\056" +
    "\165\057\134\060\132\061\131\066\133\001\001\000\022" +
    "\017\121\020\010\021\007\056\152\057\134\060\132\061" +
    "\131\066\133\001\001\000\002\001\001\000\020\017\121" +
    "\020\010\021\007\057\164\060\132\061\131\066\133\001" +
    "\001\000\020\017\121\020\010\021\007\057\155\060\132" +
    "\061\131\066\133\001\001\000\002\001\001\000\016\017" +
    "\121\020\010\021\007\060\163\061\131\066\133\001\001" +
    "\000\016\017\121\020\010\021\007\060\162\061\131\066" +
    "\133\001\001\000\016\017\121\020\010\021\007\060\161" +
    "\061\131\066\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\172\017\076\020\010\021\007\041\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\017\121\020\010\021\007\052\176\053\140\054\137" +
    "\055\136\056\135\057\134\060\132\061\131\066\133\001" +
    "\001\000\002\001\001\000\030\017\121\020\010\021\007" +
    "\053\202\054\137\055\136\056\135\057\134\060\132\061" +
    "\131\066\133\001\001\000\032\017\121\020\010\021\007" +
    "\052\201\053\140\054\137\055\136\056\135\057\134\060" +
    "\132\061\131\066\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\017\121\020\010\021\007\052" +
    "\213\053\140\054\137\055\136\056\135\057\134\060\132" +
    "\061\131\066\133\001\001\000\002\001\001\000\032\017" +
    "\121\020\010\021\007\052\215\053\140\054\137\055\136" +
    "\056\135\057\134\060\132\061\131\066\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\017\121\020\010" +
    "\021\007\051\220\052\221\053\140\054\137\055\136\056" +
    "\135\057\134\060\132\061\131\066\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\017\121\020\010\021" +
    "\007\051\223\052\221\053\140\054\137\055\136\056\135" +
    "\057\134\060\132\061\131\066\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\017\121" +
    "\020\010\021\007\051\232\052\221\053\140\054\137\055" +
    "\136\056\135\057\134\060\132\061\131\066\133\001\001" +
    "\000\034\017\121\020\010\021\007\051\230\052\221\053" +
    "\140\054\137\055\136\056\135\057\134\060\132\061\131" +
    "\066\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\017\121\020\010\021\007\051\242\052" +
    "\221\053\140\054\137\055\136\056\135\057\134\060\132" +
    "\061\131\066\133\001\001\000\034\017\121\020\010\021" +
    "\007\051\240\052\221\053\140\054\137\055\136\056\135" +
    "\057\134\060\132\061\131\066\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\062\253\063\250\065\252\066" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\064\260" +
    "\065\257\066\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\064\263\065\257\066\251" +
    "\001\001\000\002\001\001\000\012\062\253\063\265\065" +
    "\252\066\251\001\001\000\002\001\001\000\032\017\121" +
    "\020\010\021\007\052\267\053\140\054\137\055\136\056" +
    "\135\057\134\060\132\061\131\066\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\172\017\076\020\010\021\007\040\274" +
    "\041\272\001\001\000\002\001\001\000\004\036\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\302\017\300\020\010\021\007\001\001\000" +
    "\002\001\001\000\004\035\304\001\001\000\020\014\072" +
    "\017\076\020\010\021\007\034\075\036\054\037\305\001" +
    "\001\000\004\035\306\001\001\000\014\014\072\017\076" +
    "\020\010\021\007\034\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\320\017\300" +
    "\020\010\021\007\001\001\000\004\035\314\001\001\000" +
    "\020\014\072\017\076\020\010\021\007\034\075\036\054" +
    "\037\315\001\001\000\004\035\316\001\001\000\014\014" +
    "\072\017\076\020\010\021\007\034\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\322\001\001\000" +
    "\020\014\072\017\076\020\010\021\007\034\075\036\054" +
    "\037\323\001\001\000\004\035\324\001\001\000\014\014" +
    "\072\017\076\020\010\021\007\034\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\330\017\076\020" +
    "\010\021\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\342\030\361\001\001\000" +
    "\004\027\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\342\030\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\342\030\346\001\001\000\002\001" +
    "\001\000\016\014\351\017\076\020\010\021\007\025\352" +
    "\026\350\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\351\017\076\020\010\021\007" +
    "\025\352\026\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\172\017\076\020\010" +
    "\021\007\040\u0101\041\272\001\001\000\004\027\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\172" +
    "\017\076\020\010\021\007\040\372\041\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\017\121\020\010" +
    "\021\007\031\377\052\376\053\140\054\137\055\136\056" +
    "\135\057\134\060\132\061\131\066\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\017\121" +
    "\020\010\021\007\031\u0104\052\376\053\140\054\137\055" +
    "\136\056\135\057\134\060\132\061\131\066\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\014\u0119\017" +
    "\u011a\020\010\021\007\043\u010c\050\u0114\052\u0113\053\140" +
    "\054\137\055\136\056\135\057\134\060\132\061\131\066" +
    "\133\067\u010b\001\001\000\032\017\121\020\010\021\007" +
    "\052\211\053\140\054\137\055\136\056\135\057\134\060" +
    "\132\061\131\066\133\001\001\000\002\001\001\000\004" +
    "\042\u0170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\014\u0119\017\u011a" +
    "\020\010\021\007\043\u015d\050\u0114\052\u0113\053\140\054" +
    "\137\055\136\056\135\057\134\060\132\061\131\066\133" +
    "\067\u010b\001\001\000\034\017\121\020\010\021\007\047" +
    "\u0154\052\u0155\053\140\054\137\055\136\056\135\057\134" +
    "\060\132\061\131\066\133\001\001\000\032\017\121\020" +
    "\010\021\007\052\u0150\053\140\054\137\055\136\056\135" +
    "\057\134\060\132\061\131\066\133\001\001\000\032\017" +
    "\121\020\010\021\007\052\u014e\053\140\054\137\055\136" +
    "\056\135\057\134\060\132\061\131\066\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\017\121\020\010\021" +
    "\007\050\u0134\052\u0113\053\140\054\137\055\136\056\135" +
    "\057\134\060\132\061\131\066\133\067\u010b\001\001\000" +
    "\012\014\u012b\017\076\020\010\021\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\017\121\020\010\021\007\050\u011f\052\u0113" +
    "\053\140\054\137\055\136\056\135\057\134\060\132\061" +
    "\131\066\133\067\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\017\121\020\010\021\007" +
    "\051\u0125\052\221\053\140\054\137\055\136\056\135\057" +
    "\134\060\132\061\131\066\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\017\121\020" +
    "\010\021\007\051\u0129\052\221\053\140\054\137\055\136" +
    "\056\135\057\134\060\132\061\131\066\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\u012d\017\076\020\010\021\007\001\001\000\002\001" +
    "\001\000\034\017\121\020\010\021\007\051\u012f\052\221" +
    "\053\140\054\137\055\136\056\135\057\134\060\132\061" +
    "\131\066\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\017\121\020\010\021\007\051\u0132\052\221\053" +
    "\140\054\137\055\136\056\135\057\134\060\132\061\131" +
    "\066\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\u0145\017\076\020" +
    "\010\021\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\017\121\020\010\021\007\051" +
    "\u013e\052\221\053\140\054\137\055\136\056\135\057\134" +
    "\060\132\061\131\066\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\017\121\020\010\021\007\051\u0143\052\221\053\140\054" +
    "\137\055\136\056\135\057\134\060\132\061\131\066\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\017\121\020\010\021\007\051\u0147\052\221" +
    "\053\140\054\137\055\136\056\135\057\134\060\132\061" +
    "\131\066\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\017\121\020" +
    "\010\021\007\050\u014c\052\u0113\053\140\054\137\055\136" +
    "\056\135\057\134\060\132\061\131\066\133\067\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\017\121\020\010\021" +
    "\007\047\u0158\052\u0155\053\140\054\137\055\136\056\135" +
    "\057\134\060\132\061\131\066\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\u0160\001\001\000\010\044\u0161\065\u0162\066\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u0164\001\001\000\002\001\001\000\042\014\u0119\017\u011a" +
    "\020\010\021\007\043\u0166\050\u0114\052\u0113\053\140\054" +
    "\137\055\136\056\135\057\134\060\132\061\131\066\133" +
    "\067\u010b\001\001\000\002\001\001\000\042\014\u0119\017" +
    "\u011a\020\010\021\007\043\u0168\050\u0114\052\u0113\053\140" +
    "\054\137\055\136\056\135\057\134\060\132\061\131\066" +
    "\133\067\u010b\001\001\000\002\001\001\000\032\017\121" +
    "\020\010\021\007\052\u016a\053\140\054\137\055\136\056" +
    "\135\057\134\060\132\061\131\066\133\001\001\000\002" +
    "\001\001\000\042\014\u0119\017\u011a\020\010\021\007\043" +
    "\u016c\050\u0114\052\u0113\053\140\054\137\055\136\056\135" +
    "\057\134\060\132\061\131\066\133\067\u010b\001\001\000" +
    "\002\001\001\000\036\017\121\020\010\021\007\050\u016e" +
    "\052\u0113\053\140\054\137\055\136\056\135\057\134\060" +
    "\132\061\131\066\133\067\u010b\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\014\u0119\017\u011a\020\010\021" +
    "\007\043\u010c\050\u0114\052\u0113\053\140\054\137\055\136" +
    "\056\135\057\134\060\132\061\131\066\133\067\u010b\001" +
    "\001\000\002\001\001\000\032\017\121\020\010\021\007" +
    "\052\u0173\053\140\054\137\055\136\056\135\057\134\060" +
    "\132\061\131\066\133\001\001\000\002\001\001\000\042" +
    "\014\u0119\017\u011a\020\010\021\007\043\u0175\050\u0114\052" +
    "\u0113\053\140\054\137\055\136\056\135\057\134\060\132" +
    "\061\131\066\133\067\u010b\001\001\000\002\001\001\000" +
    "\042\014\u0119\017\u011a\020\010\021\007\043\u0177\050\u0114" +
    "\052\u0113\053\140\054\137\055\136\056\135\057\134\060" +
    "\132\061\131\066\133\067\u010b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\u0186\017\300\020\010\021\007\001\001\000\004" +
    "\033\u017d\001\001\000\014\014\u017f\017\076\020\010\021" +
    "\007\032\u017e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\172\017" +
    "\076\020\010\021\007\040\u0183\041\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u0188\001\001\000\014\014\u017f\017\076" +
    "\020\010\021\007\032\u017e\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\010\021\u018c\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public ABS.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (ABS.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		ABS.Absyn.Program start_val = (ABS.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // AnyIdent ::= _IDENT_ 
            {
              ABS.Absyn.AnyIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyIden(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnyIdent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // AnyIdent ::= TypeIdent 
            {
              ABS.Absyn.AnyIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyTyIden(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnyIdent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListAnyIdent ::= AnyIdent 
            {
              ABS.Absyn.ListAnyIdent RESULT =null;
		ABS.Absyn.AnyIdent p_1 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListAnyIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnyIdent",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListAnyIdent ::= AnyIdent _SYMB_0 ListAnyIdent 
            {
              ABS.Absyn.ListAnyIdent RESULT =null;
		ABS.Absyn.AnyIdent p_1 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListAnyIdent p_3 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnyIdent",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= ListModule 
            {
              ABS.Absyn.Program RESULT =null;
		ABS.Absyn.ListModule p_1 = (ABS.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Prog(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListModule ::= 
            {
              ABS.Absyn.ListModule RESULT =null;
		 RESULT = new ABS.Absyn.ListModule(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListModule ::= ListModule Module 
            {
              ABS.Absyn.ListModule RESULT =null;
		ABS.Absyn.ListModule p_1 = (ABS.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Module p_2 = (ABS.Absyn.Module)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Module ::= _SYMB_53 QualType _SYMB_1 ListExport ListImport ListDecl MaybeBlock 
            {
              ABS.Absyn.Module RESULT =null;
		ABS.Absyn.QualType p_2 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListExport p_4 = (ABS.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListImport p_5 = (ABS.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListDecl p_6 = (ABS.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.MaybeBlock p_7 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Modul(p_2,p_4,p_5,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Module",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Export ::= _SYMB_40 ListAnyIdent 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyExport(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Export ::= _SYMB_40 ListAnyIdent _SYMB_44 QualType 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.QualType p_4 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyFromExport(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Export ::= _SYMB_40 _SYMB_2 
            {
              ABS.Absyn.Export RESULT =null;
		 RESULT = new ABS.Absyn.StarExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Export ::= _SYMB_40 _SYMB_2 _SYMB_44 QualType 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.QualType p_4 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.StarFromExport(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListExport ::= 
            {
              ABS.Absyn.ListExport RESULT =null;
		 RESULT = new ABS.Absyn.ListExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListExport ::= ListExport Export _SYMB_1 
            {
              ABS.Absyn.ListExport RESULT =null;
		ABS.Absyn.ListExport p_1 = (ABS.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Export p_2 = (ABS.Absyn.Export)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Import ::= ImportType QualType _SYMB_3 AnyIdent 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.QualType p_2 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.AnyIdent p_4 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyImport(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Import ::= ImportType ListAnyIdent _SYMB_44 QualType 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.QualType p_4 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyFromImport(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Import ::= ImportType _SYMB_2 _SYMB_44 QualType 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.QualType p_4 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.StarFromImport(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListImport ::= 
            {
              ABS.Absyn.ListImport RESULT =null;
		 RESULT = new ABS.Absyn.ListImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListImport ::= ListImport Import _SYMB_1 
            {
              ABS.Absyn.ListImport RESULT =null;
		ABS.Absyn.ListImport p_1 = (ABS.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Import p_2 = (ABS.Absyn.Import)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ImportType ::= _SYMB_42 
            {
              ABS.Absyn.ImportType RESULT =null;
		 RESULT = new ABS.Absyn.ForeignImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportType",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ImportType ::= _SYMB_48 
            {
              ABS.Absyn.ImportType RESULT =null;
		 RESULT = new ABS.Absyn.NormalImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportType",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= _SYMB_4 
            {
              ABS.Absyn.Type RESULT =null;
		 RESULT = new ABS.Absyn.TUnderscore(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= QualType 
            {
              ABS.Absyn.Type RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.TSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= QualType _SYMB_5 ListType _SYMB_6 
            {
              ABS.Absyn.Type RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListType p_3 = (ABS.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.TGen(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListType ::= Type 
            {
              ABS.Absyn.ListType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListType ::= Type _SYMB_0 ListType 
            {
              ABS.Absyn.ListType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListType p_3 = (ABS.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListQualType ::= QualType 
            {
              ABS.Absyn.ListQualType RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListQualType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQualType",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListQualType ::= QualType _SYMB_0 ListQualType 
            {
              ABS.Absyn.ListQualType RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListQualType p_3 = (ABS.Absyn.ListQualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQualType",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // QualType ::= ListQualTypeSegment 
            {
              ABS.Absyn.QualType RESULT =null;
		ABS.Absyn.ListQualTypeSegment p_1 = (ABS.Absyn.ListQualTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.QType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QualType",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // QualTypeSegment ::= TypeIdent 
            {
              ABS.Absyn.QualTypeSegment RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.QTypeSegment(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QualTypeSegment",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListQualTypeSegment ::= QualTypeSegment 
            {
              ABS.Absyn.ListQualTypeSegment RESULT =null;
		ABS.Absyn.QualTypeSegment p_1 = (ABS.Absyn.QualTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListQualTypeSegment(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQualTypeSegment",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListQualTypeSegment ::= QualTypeSegment _SYMB_3 ListQualTypeSegment 
            {
              ABS.Absyn.ListQualTypeSegment RESULT =null;
		ABS.Absyn.QualTypeSegment p_1 = (ABS.Absyn.QualTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListQualTypeSegment p_3 = (ABS.Absyn.ListQualTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQualTypeSegment",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListDecl ::= 
            {
              ABS.Absyn.ListDecl RESULT =null;
		 RESULT = new ABS.Absyn.ListDecl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListDecl ::= ListDecl Decl 
            {
              ABS.Absyn.ListDecl RESULT =null;
		ABS.Absyn.ListDecl p_1 = (ABS.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Decl p_2 = (ABS.Absyn.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Decl ::= _SYMB_65 TypeIdent _SYMB_7 Type _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Type p_4 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.TypeDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Decl ::= _SYMB_39 ConstrIdent _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		ABS.Absyn.ConstrIdent p_2 = (ABS.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ExceptionDecl(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Decl ::= _SYMB_36 TypeIdent _SYMB_7 ListConstrIdent _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListConstrIdent p_4 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.DataDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Decl ::= _SYMB_36 TypeIdent _SYMB_5 ListTypeIdent _SYMB_6 _SYMB_7 ListConstrIdent _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListTypeIdent p_4 = (ABS.Absyn.ListTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.ListConstrIdent p_7 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.DataParDecl(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Decl ::= _SYMB_37 Type _IDENT_ _SYMB_8 ListParam _SYMB_9 _SYMB_7 FunBody _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListParam p_5 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.FunBody p_8 = (ABS.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FunDecl(p_2,p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Decl ::= _SYMB_37 Type _IDENT_ _SYMB_5 ListTypeIdent _SYMB_6 _SYMB_8 ListParam _SYMB_9 _SYMB_7 FunBody _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		ABS.Absyn.ListTypeIdent p_5 = (ABS.Absyn.ListTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		ABS.Absyn.ListParam p_8 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.FunBody p_11 = (ABS.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FunParDecl(p_2,p_3,p_5,p_8,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Decl ::= _SYMB_50 TypeIdent _SYMB_11 ListMethSignat _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListMethSignat p_4 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.InterfDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Decl ::= _SYMB_50 TypeIdent _SYMB_41 ListQualType _SYMB_11 ListMethSignat _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListQualType p_4 = (ABS.Absyn.ListQualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListMethSignat p_6 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ExtendsDecl(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Decl ::= _SYMB_35 TypeIdent _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_4 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_5 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_6 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassDecl(p_2,p_4,p_5,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Decl ::= _SYMB_35 TypeIdent _SYMB_8 ListParam _SYMB_9 _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListClassBody p_7 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_8 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_9 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassParamDecl(p_2,p_4,p_7,p_8,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Decl ::= _SYMB_35 TypeIdent _SYMB_47 ListQualType _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		ABS.Absyn.ListQualType p_4 = (ABS.Absyn.ListQualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_6 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_7 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_8 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassImplements(p_2,p_4,p_6,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Decl ::= _SYMB_35 TypeIdent _SYMB_8 ListParam _SYMB_9 _SYMB_47 ListQualType _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ABS.Absyn.ListQualType p_7 = (ABS.Absyn.ListQualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_9 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_10 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_11 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassParamImplements(p_2,p_4,p_7,p_9,p_10,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ConstrIdent ::= TypeIdent 
            {
              ABS.Absyn.ConstrIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SinglConstrIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ConstrIdent ::= TypeIdent _SYMB_8 ListConstrType _SYMB_9 
            {
              ABS.Absyn.ConstrIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListConstrType p_3 = (ABS.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ParamConstrIdent(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ConstrType ::= Type 
            {
              ABS.Absyn.ConstrType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EmptyConstrType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ConstrType ::= Type _IDENT_ 
            {
              ABS.Absyn.ConstrType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.RecordConstrType(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListConstrType ::= 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		 RESULT = new ABS.Absyn.ListConstrType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListConstrType ::= ConstrType 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		ABS.Absyn.ConstrType p_1 = (ABS.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListConstrType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListConstrType ::= ConstrType _SYMB_0 ListConstrType 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		ABS.Absyn.ConstrType p_1 = (ABS.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListConstrType p_3 = (ABS.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListTypeIdent ::= TypeIdent 
            {
              ABS.Absyn.ListTypeIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListTypeIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypeIdent",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListTypeIdent ::= TypeIdent _SYMB_0 ListTypeIdent 
            {
              ABS.Absyn.ListTypeIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListTypeIdent p_3 = (ABS.Absyn.ListTypeIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypeIdent",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListConstrIdent ::= ConstrIdent 
            {
              ABS.Absyn.ListConstrIdent RESULT =null;
		ABS.Absyn.ConstrIdent p_1 = (ABS.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListConstrIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListConstrIdent ::= ConstrIdent _SYMB_10 ListConstrIdent 
            {
              ABS.Absyn.ListConstrIdent RESULT =null;
		ABS.Absyn.ConstrIdent p_1 = (ABS.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListConstrIdent p_3 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FunBody ::= _SYMB_32 
            {
              ABS.Absyn.FunBody RESULT =null;
		 RESULT = new ABS.Absyn.BuiltinFunBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FunBody ::= PureExp 
            {
              ABS.Absyn.FunBody RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.NormalFunBody(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MethSignat ::= Type _IDENT_ _SYMB_8 ListParam _SYMB_9 
            {
              ABS.Absyn.MethSignat RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.MethSig(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethSignat",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListMethSignat ::= 
            {
              ABS.Absyn.ListMethSignat RESULT =null;
		 RESULT = new ABS.Absyn.ListMethSignat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSignat",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListMethSignat ::= ListMethSignat MethSignat _SYMB_1 
            {
              ABS.Absyn.ListMethSignat RESULT =null;
		ABS.Absyn.ListMethSignat p_1 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.MethSignat p_2 = (ABS.Absyn.MethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSignat",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ClassBody ::= Type _IDENT_ _SYMB_1 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldClassBody(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ClassBody ::= Type _IDENT_ _SYMB_7 PureExp _SYMB_1 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.PureExp p_4 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldAssignClassBody(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ClassBody ::= Type _IDENT_ _SYMB_8 ListParam _SYMB_9 Block 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Block p_6 = (ABS.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.MethClassBody(p_1,p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListClassBody ::= 
            {
              ABS.Absyn.ListClassBody RESULT =null;
		 RESULT = new ABS.Absyn.ListClassBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListClassBody ::= ListClassBody ClassBody 
            {
              ABS.Absyn.ListClassBody RESULT =null;
		ABS.Absyn.ListClassBody p_1 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.ClassBody p_2 = (ABS.Absyn.ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Block ::= _SYMB_11 ListStm _SYMB_12 
            {
              ABS.Absyn.Block RESULT =null;
		ABS.Absyn.ListStm p_2 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Bloc(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MaybeBlock ::= Block 
            {
              ABS.Absyn.MaybeBlock RESULT =null;
		ABS.Absyn.Block p_1 = (ABS.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.JustBlock(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MaybeBlock ::= 
            {
              ABS.Absyn.MaybeBlock RESULT =null;
		 RESULT = new ABS.Absyn.NoBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListParam ::= 
            {
              ABS.Absyn.ListParam RESULT =null;
		 RESULT = new ABS.Absyn.ListParam(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListParam ::= Param 
            {
              ABS.Absyn.ListParam RESULT =null;
		ABS.Absyn.Param p_1 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListParam(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListParam ::= Param _SYMB_0 ListParam 
            {
              ABS.Absyn.ListParam RESULT =null;
		ABS.Absyn.Param p_1 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListParam p_3 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Param ::= Type _IDENT_ 
            {
              ABS.Absyn.Param RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Par(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Param",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListStm ::= 
            {
              ABS.Absyn.ListStm RESULT =null;
		 RESULT = new ABS.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListStm ::= ListStm Stm 
            {
              ABS.Absyn.ListStm RESULT =null;
		ABS.Absyn.ListStm p_1 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Stm p_2 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Stm ::= Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Exp p_1 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Stm ::= _SYMB_11 ListStm _SYMB_12 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.ListStm p_2 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Stm ::= _SYMB_66 _SYMB_8 PureExp _SYMB_9 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Stm ::= _SYMB_56 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Exp p_2 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SReturn(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Stm ::= _IDENT_ _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_3 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Stm ::= _SYMB_61 _SYMB_3 _IDENT_ _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_5 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SFieldAss(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Stm ::= Type _IDENT_ _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SDec(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Stm ::= Type _IDENT_ _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_4 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SDecAss(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stm ::= _SYMB_46 _SYMB_8 PureExp _SYMB_9 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SIf(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stm ::= _SYMB_46 _SYMB_8 PureExp _SYMB_9 Stm _SYMB_38 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_7 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stm ::= _SYMB_59 _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		 RESULT = new ABS.Absyn.SSuspend(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stm ::= _SYMB_57 _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		 RESULT = new ABS.Absyn.SSkip(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stm ::= _SYMB_30 PureExp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAssert(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stm ::= _SYMB_31 Guard _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Guard p_2 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAwait(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stm ::= _SYMB_63 PureExp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SThrow(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stm ::= _SYMB_64 Stm _SYMB_34 _SYMB_11 ListCatchBranch _SYMB_12 MaybeFinally 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Stm p_2 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListCatchBranch p_5 = (ABS.Absyn.ListCatchBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.MaybeFinally p_7 = (ABS.Absyn.MaybeFinally)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.STryCatchFinally(p_2,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CatchBranch ::= Pattern _SYMB_13 Stm 
            {
              ABS.Absyn.CatchBranch RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_3 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.CatchBranc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CatchBranch",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ListCatchBranch ::= 
            {
              ABS.Absyn.ListCatchBranch RESULT =null;
		 RESULT = new ABS.Absyn.ListCatchBranch(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCatchBranch",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ListCatchBranch ::= ListCatchBranch CatchBranch 
            {
              ABS.Absyn.ListCatchBranch RESULT =null;
		ABS.Absyn.ListCatchBranch p_1 = (ABS.Absyn.ListCatchBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.CatchBranch p_2 = (ABS.Absyn.CatchBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCatchBranch",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MaybeFinally ::= _SYMB_43 Stm 
            {
              ABS.Absyn.MaybeFinally RESULT =null;
		ABS.Absyn.Stm p_2 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.JustFinally(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeFinally",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MaybeFinally ::= 
            {
              ABS.Absyn.MaybeFinally RESULT =null;
		 RESULT = new ABS.Absyn.NoFinally(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeFinally",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Guard ::= _IDENT_ _SYMB_14 
            {
              ABS.Absyn.Guard RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.VarGuard(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Guard ::= _SYMB_61 _SYMB_3 _IDENT_ _SYMB_14 
            {
              ABS.Absyn.Guard RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldGuard(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Guard ::= PureExp 
            {
              ABS.Absyn.Guard RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpGuard(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Guard ::= Guard _SYMB_15 Guard 
            {
              ABS.Absyn.Guard RESULT =null;
		ABS.Absyn.Guard p_1 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Guard p_3 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AndGuard(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Exp ::= PureExp 
            {
              ABS.Absyn.Exp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpP(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Exp ::= EffExp 
            {
              ABS.Absyn.Exp RESULT =null;
		ABS.Absyn.EffExp p_1 = (ABS.Absyn.EffExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpE(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ListPureExp ::= 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		 RESULT = new ABS.Absyn.ListPureExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ListPureExp ::= PureExp 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListPureExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ListPureExp ::= PureExp _SYMB_0 ListPureExp 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PureExp ::= PureExp _SYMB_16 PureExp1 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PureExp ::= PureExp1 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PureExp ::= _SYMB_51 _SYMB_8 Param _SYMB_9 _SYMB_7 PureExp _SYMB_49 PureExp 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Param p_3 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.PureExp p_6 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_8 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Let(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PureExp ::= _SYMB_46 PureExp _SYMB_60 PureExp _SYMB_38 PureExp 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.PureExp p_4 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_6 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PureExp ::= _SYMB_33 PureExp _SYMB_11 ListCaseBranch _SYMB_12 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListCaseBranch p_4 = (ABS.Absyn.ListCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Case(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PureExp1 ::= PureExp1 _SYMB_17 PureExp2 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PureExp1 ::= PureExp2 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PureExp2 ::= PureExp2 _SYMB_18 PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PureExp2 ::= PureExp2 _SYMB_19 PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ENeq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PureExp2 ::= PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PureExp3 ::= PureExp3 _SYMB_5 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PureExp3 ::= PureExp3 _SYMB_20 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PureExp3 ::= PureExp3 _SYMB_6 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EGt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PureExp3 ::= PureExp3 _SYMB_21 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EGe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PureExp3 ::= PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PureExp4 ::= PureExp4 _SYMB_22 PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PureExp4 ::= PureExp4 _SYMB_23 PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PureExp4 ::= PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PureExp5 ::= PureExp5 _SYMB_2 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PureExp5 ::= PureExp5 _SYMB_24 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PureExp5 ::= PureExp5 _SYMB_25 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EMod(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PureExp5 ::= PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PureExp6 ::= _SYMB_26 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELogNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PureExp6 ::= _SYMB_23 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EIntNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PureExp6 ::= PureExp7 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PureExp7 ::= _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PureExp7 ::= QualType _SYMB_3 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EQualFunCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PureExp7 ::= _IDENT_ _SYMB_27 ListPureExp _SYMB_28 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ENaryFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PureExp7 ::= QualType _SYMB_3 _IDENT_ _SYMB_27 ListPureExp _SYMB_28 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ENaryQualFunCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PureExp7 ::= _IDENT_ 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PureExp7 ::= _SYMB_61 _SYMB_3 _IDENT_ 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EThis(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PureExp7 ::= QualType _SYMB_3 _IDENT_ 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EQualVar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PureExp7 ::= QualType 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ESinglConstr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PureExp7 ::= QualType _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QualType p_1 = (ABS.Absyn.QualType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EParamConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PureExp7 ::= Literal 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Literal p_1 = (ABS.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PureExp7 ::= _SYMB_8 PureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CaseBranch ::= Pattern _SYMB_13 PureExp 
            {
              ABS.Absyn.CaseBranch RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.CaseBranc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseBranch",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ListCaseBranch ::= CaseBranch _SYMB_1 
            {
              ABS.Absyn.ListCaseBranch RESULT =null;
		ABS.Absyn.CaseBranch p_1 = (ABS.Absyn.CaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ListCaseBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCaseBranch",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ListCaseBranch ::= CaseBranch _SYMB_1 ListCaseBranch 
            {
              ABS.Absyn.ListCaseBranch RESULT =null;
		ABS.Absyn.CaseBranch p_1 = (ABS.Absyn.CaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListCaseBranch p_3 = (ABS.Absyn.ListCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCaseBranch",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ListPattern ::= 
            {
              ABS.Absyn.ListPattern RESULT =null;
		 RESULT = new ABS.Absyn.ListPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ListPattern ::= Pattern 
            {
              ABS.Absyn.ListPattern RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ListPattern ::= Pattern _SYMB_0 ListPattern 
            {
              ABS.Absyn.ListPattern RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListPattern p_3 = (ABS.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Pattern ::= _IDENT_ 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.PIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Pattern ::= Literal 
            {
              ABS.Absyn.Pattern RESULT =null;
		ABS.Absyn.Literal p_1 = (ABS.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.PLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Pattern ::= TypeIdent 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.PSinglConstr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Pattern ::= TypeIdent _SYMB_8 ListPattern _SYMB_9 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPattern p_3 = (ABS.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.PParamConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Pattern ::= _SYMB_4 
            {
              ABS.Absyn.Pattern RESULT =null;
		 RESULT = new ABS.Absyn.PUnderscore(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Literal ::= _SYMB_55 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LNull(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Literal ::= _SYMB_61 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LThis(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Literal ::= _SYMB_62 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LThisDC(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Literal ::= _STRING_ 
            {
              ABS.Absyn.Literal RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.LStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Literal ::= _INTEGER_ 
            {
              ABS.Absyn.Literal RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.LInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EffExp ::= _SYMB_54 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_4 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.New(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EffExp ::= _SYMB_54 _SYMB_52 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.Type p_3 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.NewLocal(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EffExp ::= PureExp _SYMB_3 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EffExp ::= _SYMB_61 _SYMB_3 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ThisSyncMethCall(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EffExp ::= PureExp _SYMB_29 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.AsyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EffExp ::= _SYMB_61 _SYMB_29 _IDENT_ _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ThisAsyncMethCall(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EffExp ::= PureExp _SYMB_3 _SYMB_45 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ABS.Absyn.Get(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EffExp ::= PureExp _SYMB_58 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.Type p_3 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Spawns(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",53, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

