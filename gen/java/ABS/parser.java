
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Wed Feb 25 13:00:42 CET 2015
//----------------------------------------------------

package ABS;


/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Wed Feb 25 13:00:42 CET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\267\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\003" +
    "\000\002\005\002\000\002\005\004\000\002\006\011\000" +
    "\002\007\004\000\002\007\006\000\002\007\004\000\002" +
    "\007\006\000\002\010\002\000\002\010\005\000\002\011" +
    "\005\000\002\011\006\000\002\011\006\000\002\012\002" +
    "\000\002\012\005\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\006\000\002" +
    "\015\003\000\002\015\005\000\002\016\003\000\002\016" +
    "\005\000\002\017\003\000\002\020\003\000\002\021\003" +
    "\000\002\021\005\000\002\022\003\000\002\023\003\000" +
    "\002\024\004\000\002\024\005\000\002\025\002\000\002" +
    "\025\004\000\002\026\007\000\002\026\012\000\002\026" +
    "\005\000\002\026\007\000\002\026\012\000\002\026\013" +
    "\000\002\026\016\000\002\026\007\000\002\026\011\000" +
    "\002\026\011\000\002\026\014\000\002\026\013\000\002" +
    "\026\016\000\002\027\003\000\002\027\006\000\002\030" +
    "\003\000\002\030\004\000\002\031\002\000\002\031\003" +
    "\000\002\031\005\000\002\032\003\000\002\032\005\000" +
    "\002\033\003\000\002\033\005\000\002\034\003\000\002" +
    "\034\003\000\002\035\007\000\002\036\002\000\002\036" +
    "\005\000\002\037\005\000\002\037\007\000\002\037\010" +
    "\000\002\040\002\000\002\040\004\000\002\041\005\000" +
    "\002\042\003\000\002\042\002\000\002\043\002\000\002" +
    "\043\003\000\002\043\005\000\002\044\004\000\002\045" +
    "\002\000\002\045\004\000\002\046\004\000\002\046\005" +
    "\000\002\046\007\000\002\046\005\000\002\046\006\000" +
    "\002\046\010\000\002\046\005\000\002\046\007\000\002" +
    "\046\007\000\002\046\011\000\002\046\004\000\002\046" +
    "\004\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\011\000\002\046\005\000\002\047\005\000" +
    "\002\050\002\000\002\050\004\000\002\051\004\000\002" +
    "\051\002\000\002\052\004\000\002\052\006\000\002\052" +
    "\003\000\002\052\005\000\002\053\003\000\002\053\003" +
    "\000\002\054\002\000\002\054\003\000\002\054\005\000" +
    "\002\055\005\000\002\055\003\000\002\055\012\000\002" +
    "\055\010\000\002\055\007\000\002\056\005\000\002\056" +
    "\003\000\002\057\005\000\002\057\005\000\002\057\003" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\060\003\000\002\061\005\000\002" +
    "\061\005\000\002\061\003\000\002\062\005\000\002\062" +
    "\005\000\002\062\005\000\002\062\003\000\002\063\004" +
    "\000\002\063\004\000\002\063\003\000\002\064\006\000" +
    "\002\064\007\000\002\064\006\000\002\064\007\000\002" +
    "\064\003\000\002\064\005\000\002\064\004\000\002\064" +
    "\003\000\002\064\006\000\002\064\003\000\002\064\005" +
    "\000\002\065\005\000\002\066\004\000\002\066\005\000" +
    "\002\067\002\000\002\067\003\000\002\067\005\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\006\000\002\070\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\072\007\000\002\072\010\000\002\072\010\000\002" +
    "\072\010\000\002\072\010\000\002\072\010\000\002\072" +
    "\005\000\002\072\010\000\002\073\005\000\002\074\002" +
    "\000\002\074\004\000\002\075\004\000\002\076\002\000" +
    "\002\076\004\000\002\077\004\000\002\100\002\000\002" +
    "\100\003\000\002\100\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019a\000\006\002\ufffb\071\ufffb\001\002\000\004\002" +
    "\u019c\001\002\000\006\002\ufffc\071\007\001\002\000\006" +
    "\002\ufffa\071\ufffa\001\002\000\004\112\013\001\002\000" +
    "\070\004\uffe4\005\uffe4\006\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\040\uffe4\041\uffe4\052\uffe4\065\uffe4\077\uffe4\101" +
    "\uffe4\113\uffe4\001\002\000\004\005\016\001\002\000\070" +
    "\004\uffe2\005\uffe2\006\uffe2\010\uffe2\011\uffe2\012\014\014" +
    "\uffe2\015\uffe2\017\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\040\uffe2\041\uffe2\052\uffe2\065\uffe2\077\uffe2\101\uffe2" +
    "\113\uffe2\001\002\000\070\004\uffe3\005\uffe3\006\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3\017\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\040\uffe3\041\uffe3\052\uffe3" +
    "\065\uffe3\077\uffe3\101\uffe3\113\uffe3\001\002\000\004\112" +
    "\013\001\002\000\070\004\uffe1\005\uffe1\006\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\014\uffe1\015\uffe1\017\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1\052\uffe1\065" +
    "\uffe1\077\uffe1\101\uffe1\113\uffe1\001\002\000\032\002\ufff4" +
    "\017\ufff4\047\ufff4\050\ufff4\051\ufff4\053\ufff4\054\ufff4\056" +
    "\ufff4\064\ufff4\066\ufff4\071\ufff4\106\ufff4\001\002\000\032" +
    "\002\uffef\017\uffef\047\uffef\050\uffef\051\uffef\053\uffef\054" +
    "\022\056\uffef\064\uffef\066\uffef\071\uffef\106\uffef\001\002" +
    "\000\030\002\uffdc\017\uffdc\047\uffdc\050\uffdc\051\uffdc\053" +
    "\uffdc\056\041\064\043\066\uffdc\071\uffdc\106\uffdc\001\002" +
    "\000\004\005\036\001\002\000\010\006\024\112\027\113" +
    "\026\001\002\000\006\005\ufff8\060\034\001\002\000\006" +
    "\005\ufff6\060\032\001\002\000\010\004\030\005\ufffe\060" +
    "\ufffe\001\002\000\010\004\000\005\000\060\000\001\002" +
    "\000\010\004\uffff\005\uffff\060\uffff\001\002\000\006\112" +
    "\027\113\026\001\002\000\006\005\ufffd\060\ufffd\001\002" +
    "\000\004\112\013\001\002\000\004\005\ufff5\001\002\000" +
    "\004\112\013\001\002\000\004\005\ufff7\001\002\000\032" +
    "\002\ufff3\017\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3\054" +
    "\ufff3\056\ufff3\064\ufff3\066\ufff3\071\ufff3\106\ufff3\001\002" +
    "\000\024\002\uffb6\017\070\047\074\050\073\051\071\053" +
    "\067\066\066\071\uffb6\106\072\001\002\000\004\005\062" +
    "\001\002\000\010\006\uffed\112\uffed\113\uffed\001\002\000" +
    "\010\006\046\112\050\113\026\001\002\000\010\006\uffec" +
    "\112\uffec\113\uffec\001\002\000\006\112\027\113\026\001" +
    "\002\000\004\060\057\001\002\000\004\060\055\001\002" +
    "\000\006\112\uffe0\113\uffe0\001\002\000\010\004\uffff\012" +
    "\uffdf\060\uffff\001\002\000\004\012\052\001\002\000\006" +
    "\112\054\113\uffde\001\002\000\006\112\uffdd\113\uffdd\001" +
    "\002\000\004\012\uffdf\001\002\000\004\112\013\001\002" +
    "\000\004\005\ufff0\001\002\000\004\112\013\001\002\000" +
    "\004\005\ufff1\001\002\000\004\005\ufff2\001\002\000\030" +
    "\002\uffee\017\uffee\047\uffee\050\uffee\051\uffee\053\uffee\056" +
    "\uffee\064\uffee\066\uffee\071\uffee\106\uffee\001\002\000\024" +
    "\002\uffdb\017\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\066" +
    "\uffdb\071\uffdb\106\uffdb\001\002\000\014\002\uffb7\007\uffb7" +
    "\020\uffb7\071\uffb7\112\uffb7\001\002\000\006\002\ufff9\071" +
    "\ufff9\001\002\000\004\112\u018c\001\002\000\004\112\343" +
    "\001\002\000\066\007\uffb1\014\uffb1\017\uffb1\020\uffb1\033" +
    "\uffb1\036\uffb1\042\uffb1\043\uffb1\045\uffb1\062\uffb1\067\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\100\uffb1\102" +
    "\uffb1\103\uffb1\104\uffb1\105\uffb1\107\uffb1\110\uffb1\111\uffb1" +
    "\112\uffb1\113\uffb1\001\002\000\006\007\105\112\013\001" +
    "\002\000\004\112\370\001\002\000\004\112\337\001\002" +
    "\000\004\112\075\001\002\000\010\014\076\017\100\063" +
    "\077\001\002\000\010\007\105\015\uffb5\112\013\001\002" +
    "\000\004\112\013\001\002\000\012\007\uffba\017\uffba\020" +
    "\uffba\112\uffba\001\002\000\012\007\105\017\070\020\uffb6" +
    "\112\013\001\002\000\004\113\117\001\002\000\010\007" +
    "\uffba\020\uffba\112\uffba\001\002\000\012\007\uffb9\017\uffb9" +
    "\020\uffb9\112\uffb9\001\002\000\016\004\uffeb\005\uffeb\011" +
    "\uffeb\014\uffeb\015\uffeb\113\uffeb\001\002\000\020\004\uffea" +
    "\005\uffea\010\107\011\uffea\014\uffea\015\uffea\113\uffea\001" +
    "\002\000\006\007\105\112\013\001\002\000\006\004\113" +
    "\011\uffe8\001\002\000\004\011\112\001\002\000\016\004" +
    "\uffe9\005\uffe9\011\uffe9\014\uffe9\015\uffe9\113\uffe9\001\002" +
    "\000\006\007\105\112\013\001\002\000\004\011\uffe7\001" +
    "\002\000\010\007\105\020\116\112\013\001\002\000\024" +
    "\002\uffd1\017\uffd1\047\uffd1\050\uffd1\051\uffd1\053\uffd1\066" +
    "\uffd1\071\uffd1\106\uffd1\001\002\000\010\005\120\013\122" +
    "\014\121\001\002\000\012\007\uffbd\017\uffbd\020\uffbd\112" +
    "\uffbd\001\002\000\010\007\105\015\uffb5\112\013\001\002" +
    "\000\034\014\134\033\140\036\135\045\125\062\132\067" +
    "\141\073\136\102\130\103\127\110\124\111\123\112\126" +
    "\113\147\001\002\000\066\004\uff5d\005\uff5d\006\uff5d\010" +
    "\uff5d\011\uff5d\012\uff5d\015\uff5d\017\uff5d\021\uff5d\023\uff5d" +
    "\024\uff5d\025\uff5d\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032" +
    "\uff5d\033\uff5d\034\uff5d\035\uff5d\040\uff5d\041\uff5d\052\uff5d" +
    "\065\uff5d\077\uff5d\101\uff5d\001\002\000\066\004\uff5e\005" +
    "\uff5e\006\uff5e\010\uff5e\011\uff5e\012\uff5e\015\uff5e\017\uff5e" +
    "\021\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030" +
    "\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\040\uff5e" +
    "\041\uff5e\052\uff5e\065\uff5e\077\uff5e\101\uff5e\001\002\000" +
    "\034\014\134\033\140\036\135\045\125\062\132\067\141" +
    "\073\136\102\130\103\127\110\124\111\123\112\126\113" +
    "\147\001\002\000\070\004\uffe3\005\uffe3\006\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\014\uffe3\015\uffe3\017\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\040\uffe3\041\uffe3\052\uffe3\065" +
    "\uffe3\077\uffe3\101\uffe3\113\uffe3\001\002\000\066\004\uff5f" +
    "\005\uff5f\006\uff5f\010\uff5f\011\uff5f\012\uff5f\015\uff5f\017" +
    "\uff5f\021\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f" +
    "\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\040" +
    "\uff5f\041\uff5f\052\uff5f\065\uff5f\077\uff5f\101\uff5f\001\002" +
    "\000\064\004\uff60\005\uff60\006\uff60\010\uff60\011\uff60\012" +
    "\253\015\uff60\017\uff60\023\uff60\024\uff60\025\uff60\026\uff60" +
    "\027\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035" +
    "\uff60\040\uff60\041\uff60\052\uff60\065\uff60\077\uff60\101\uff60" +
    "\001\002\000\004\113\244\001\002\000\034\014\134\033" +
    "\140\036\135\045\125\062\132\067\141\073\136\102\130" +
    "\103\127\110\124\111\123\112\126\113\147\001\002\000" +
    "\066\004\uff70\005\uff70\006\uff70\010\uff70\011\uff70\012\uff70" +
    "\014\234\015\uff70\017\uff70\023\uff70\024\uff70\025\uff70\026" +
    "\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70" +
    "\035\uff70\040\uff70\041\uff70\052\uff70\065\uff70\077\uff70\101" +
    "\uff70\001\002\000\034\014\134\033\140\036\135\045\125" +
    "\062\132\067\141\073\136\102\130\103\127\110\124\111" +
    "\123\112\126\113\147\001\002\000\026\014\134\033\140" +
    "\036\135\073\136\102\130\103\127\110\124\111\123\112" +
    "\126\113\147\001\002\000\066\004\uff61\005\uff61\006\uff61" +
    "\010\uff61\011\uff61\012\uff61\015\uff61\017\uff61\021\uff61\023" +
    "\uff61\024\uff61\025\uff61\026\uff61\027\uff61\030\uff61\031\uff61" +
    "\032\uff61\033\uff61\034\uff61\035\uff61\040\uff61\041\uff61\052" +
    "\uff61\065\uff61\077\uff61\101\uff61\001\002\000\006\005\230" +
    "\024\210\001\002\000\026\014\134\033\140\036\135\073" +
    "\136\102\130\103\127\110\124\111\123\112\126\113\147" +
    "\001\002\000\004\014\216\001\002\000\064\004\uff78\005" +
    "\uff78\006\uff78\010\uff78\011\uff78\012\uff78\015\uff78\017\uff78" +
    "\023\uff78\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031" +
    "\uff78\032\uff78\033\uff78\034\uff78\035\uff78\040\uff78\041\uff78" +
    "\052\uff78\065\uff78\077\uff78\101\uff78\001\002\000\064\004" +
    "\uff7b\005\uff7b\006\uff7b\010\uff7b\011\uff7b\012\uff7b\015\uff7b" +
    "\017\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030" +
    "\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\040\uff7b" +
    "\041\uff7b\052\uff7b\065\uff7b\077\uff7b\101\uff7b\001\002\000" +
    "\064\004\uff6e\005\uff6e\006\uff6e\010\uff6e\011\uff6e\012\uff6e" +
    "\015\uff6e\017\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027" +
    "\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e" +
    "\040\uff6e\041\uff6e\052\uff6e\065\uff6e\077\uff6e\101\uff6e\001" +
    "\002\000\064\004\uff7f\005\uff7f\006\170\010\uff7f\011\uff7f" +
    "\012\uff7f\015\uff7f\017\uff7f\023\uff7f\024\uff7f\025\uff7f\026" +
    "\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\172" +
    "\035\171\040\uff7f\041\uff7f\052\uff7f\065\uff7f\077\uff7f\101" +
    "\uff7f\001\002\000\056\004\uff82\005\uff82\010\uff82\011\uff82" +
    "\012\uff82\015\uff82\017\uff82\023\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\165\033\166\040\uff82" +
    "\041\uff82\052\uff82\065\uff82\077\uff82\101\uff82\001\002\000" +
    "\070\004\uff73\005\uff73\006\uff73\010\uff73\011\uff73\012\uff73" +
    "\014\204\015\uff73\017\uff73\023\uff73\024\uff73\025\uff73\026" +
    "\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73" +
    "\035\uff73\037\203\040\uff73\041\uff73\052\uff73\065\uff73\077" +
    "\uff73\101\uff73\001\002\000\052\004\uff87\005\uff87\010\160" +
    "\011\163\012\uff87\015\uff87\017\uff87\023\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\030\162\031\161\040\uff87\041\uff87" +
    "\052\uff87\065\uff87\077\uff87\101\uff87\001\002\000\042\004" +
    "\uff8a\005\uff8a\012\uff8a\015\uff8a\017\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\026\156\027\155\040\uff8a\041\uff8a\052\uff8a\065" +
    "\uff8a\077\uff8a\101\uff8a\001\002\000\036\004\uff8f\005\uff8f" +
    "\012\uff8f\015\uff8f\017\uff8f\023\uff8f\024\uff8f\025\153\040" +
    "\uff8f\041\uff8f\052\uff8f\065\uff8f\077\uff8f\101\uff8f\001\002" +
    "\000\026\014\134\033\140\036\135\073\136\102\130\103" +
    "\127\110\124\111\123\112\126\113\147\001\002\000\042" +
    "\004\uff8b\005\uff8b\012\uff8b\015\uff8b\017\uff8b\023\uff8b\024" +
    "\uff8b\025\uff8b\026\156\027\155\040\uff8b\041\uff8b\052\uff8b" +
    "\065\uff8b\077\uff8b\101\uff8b\001\002\000\026\014\134\033" +
    "\140\036\135\073\136\102\130\103\127\110\124\111\123" +
    "\112\126\113\147\001\002\000\026\014\134\033\140\036" +
    "\135\073\136\102\130\103\127\110\124\111\123\112\126" +
    "\113\147\001\002\000\052\004\uff89\005\uff89\010\160\011" +
    "\163\012\uff89\015\uff89\017\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\162\031\161\040\uff89\041\uff89\052" +
    "\uff89\065\uff89\077\uff89\101\uff89\001\002\000\026\014\134" +
    "\033\140\036\135\073\136\102\130\103\127\110\124\111" +
    "\123\112\126\113\147\001\002\000\026\014\134\033\140" +
    "\036\135\073\136\102\130\103\127\110\124\111\123\112" +
    "\126\113\147\001\002\000\026\014\134\033\140\036\135" +
    "\073\136\102\130\103\127\110\124\111\123\112\126\113" +
    "\147\001\002\000\026\014\134\033\140\036\135\073\136" +
    "\102\130\103\127\110\124\111\123\112\126\113\147\001" +
    "\002\000\056\004\uff84\005\uff84\010\uff84\011\uff84\012\uff84" +
    "\015\uff84\017\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027" +
    "\uff84\030\uff84\031\uff84\032\165\033\166\040\uff84\041\uff84" +
    "\052\uff84\065\uff84\077\uff84\101\uff84\001\002\000\026\014" +
    "\134\033\140\036\135\073\136\102\130\103\127\110\124" +
    "\111\123\112\126\113\147\001\002\000\026\014\134\033" +
    "\140\036\135\073\136\102\130\103\127\110\124\111\123" +
    "\112\126\113\147\001\002\000\064\004\uff80\005\uff80\006" +
    "\170\010\uff80\011\uff80\012\uff80\015\uff80\017\uff80\023\uff80" +
    "\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032" +
    "\uff80\033\uff80\034\172\035\171\040\uff80\041\uff80\052\uff80" +
    "\065\uff80\077\uff80\101\uff80\001\002\000\026\014\134\033" +
    "\140\036\135\073\136\102\130\103\127\110\124\111\123" +
    "\112\126\113\147\001\002\000\026\014\134\033\140\036" +
    "\135\073\136\102\130\103\127\110\124\111\123\112\126" +
    "\113\147\001\002\000\026\014\134\033\140\036\135\073" +
    "\136\102\130\103\127\110\124\111\123\112\126\113\147" +
    "\001\002\000\064\004\uff7d\005\uff7d\006\uff7d\010\uff7d\011" +
    "\uff7d\012\uff7d\015\uff7d\017\uff7d\023\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034" +
    "\uff7d\035\uff7d\040\uff7d\041\uff7d\052\uff7d\065\uff7d\077\uff7d" +
    "\101\uff7d\001\002\000\064\004\uff7c\005\uff7c\006\uff7c\010" +
    "\uff7c\011\uff7c\012\uff7c\015\uff7c\017\uff7c\023\uff7c\024\uff7c" +
    "\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033" +
    "\uff7c\034\uff7c\035\uff7c\040\uff7c\041\uff7c\052\uff7c\065\uff7c" +
    "\077\uff7c\101\uff7c\001\002\000\064\004\uff7e\005\uff7e\006" +
    "\uff7e\010\uff7e\011\uff7e\012\uff7e\015\uff7e\017\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\040\uff7e\041\uff7e\052\uff7e" +
    "\065\uff7e\077\uff7e\101\uff7e\001\002\000\064\004\uff81\005" +
    "\uff81\006\170\010\uff81\011\uff81\012\uff81\015\uff81\017\uff81" +
    "\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\033\uff81\034\172\035\171\040\uff81\041\uff81" +
    "\052\uff81\065\uff81\077\uff81\101\uff81\001\002\000\056\004" +
    "\uff85\005\uff85\010\uff85\011\uff85\012\uff85\015\uff85\017\uff85" +
    "\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031" +
    "\uff85\032\165\033\166\040\uff85\041\uff85\052\uff85\065\uff85" +
    "\077\uff85\101\uff85\001\002\000\056\004\uff83\005\uff83\010" +
    "\uff83\011\uff83\012\uff83\015\uff83\017\uff83\023\uff83\024\uff83" +
    "\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\165\033" +
    "\166\040\uff83\041\uff83\052\uff83\065\uff83\077\uff83\101\uff83" +
    "\001\002\000\056\004\uff86\005\uff86\010\uff86\011\uff86\012" +
    "\uff86\015\uff86\017\uff86\023\uff86\024\uff86\025\uff86\026\uff86" +
    "\027\uff86\030\uff86\031\uff86\032\165\033\166\040\uff86\041" +
    "\uff86\052\uff86\065\uff86\077\uff86\101\uff86\001\002\000\052" +
    "\004\uff88\005\uff88\010\160\011\163\012\uff88\015\uff88\017" +
    "\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\162" +
    "\031\161\040\uff88\041\uff88\052\uff88\065\uff88\077\uff88\101" +
    "\uff88\001\002\000\036\014\134\033\140\036\135\040\uff93" +
    "\045\125\062\132\067\141\073\136\102\130\103\127\110" +
    "\124\111\123\112\126\113\147\001\002\000\036\014\134" +
    "\015\uff93\033\140\036\135\045\125\062\132\067\141\073" +
    "\136\102\130\103\127\110\124\111\123\112\126\113\147" +
    "\001\002\000\004\015\213\001\002\000\012\004\207\015" +
    "\uff92\024\210\040\uff92\001\002\000\040\014\134\015\uff93" +
    "\033\140\036\135\040\uff93\045\125\062\132\067\141\073" +
    "\136\102\130\103\127\110\124\111\123\112\126\113\147" +
    "\001\002\000\026\014\134\033\140\036\135\073\136\102" +
    "\130\103\127\110\124\111\123\112\126\113\147\001\002" +
    "\000\036\004\uff90\005\uff90\012\uff90\015\uff90\017\uff90\023" +
    "\uff90\024\uff90\025\153\040\uff90\041\uff90\052\uff90\065\uff90" +
    "\077\uff90\101\uff90\001\002\000\006\015\uff91\040\uff91\001" +
    "\002\000\064\004\uff77\005\uff77\006\uff77\010\uff77\011\uff77" +
    "\012\uff77\015\uff77\017\uff77\023\uff77\024\uff77\025\uff77\026" +
    "\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77" +
    "\035\uff77\040\uff77\041\uff77\052\uff77\065\uff77\077\uff77\101" +
    "\uff77\001\002\000\004\040\215\001\002\000\064\004\uff75" +
    "\005\uff75\006\uff75\010\uff75\011\uff75\012\uff75\015\uff75\017" +
    "\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75" +
    "\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75\040\uff75\041" +
    "\uff75\052\uff75\065\uff75\077\uff75\101\uff75\001\002\000\006" +
    "\007\105\112\013\001\002\000\004\113\226\001\002\000" +
    "\004\015\221\001\002\000\004\013\222\001\002\000\034" +
    "\014\134\033\140\036\135\045\125\062\132\067\141\073" +
    "\136\102\130\103\127\110\124\111\123\112\126\113\147" +
    "\001\002\000\006\024\210\065\224\001\002\000\034\014" +
    "\134\033\140\036\135\045\125\062\132\067\141\073\136" +
    "\102\130\103\127\110\124\111\123\112\126\113\147\001" +
    "\002\000\034\004\uff8e\005\uff8e\012\uff8e\015\uff8e\017\uff8e" +
    "\023\uff8e\024\210\040\uff8e\041\uff8e\052\uff8e\065\uff8e\077" +
    "\uff8e\101\uff8e\001\002\000\006\004\uffb2\015\uffb2\001\002" +
    "\000\064\004\uff79\005\uff79\006\uff79\010\uff79\011\uff79\012" +
    "\uff79\015\uff79\017\uff79\023\uff79\024\uff79\025\uff79\026\uff79" +
    "\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035" +
    "\uff79\040\uff79\041\uff79\052\uff79\065\uff79\077\uff79\101\uff79" +
    "\001\002\000\012\007\uffbc\017\uffbc\020\uffbc\112\uffbc\001" +
    "\002\000\064\004\uff7a\005\uff7a\006\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\015\uff7a\017\uff7a\023\uff7a\024\uff7a\025\uff7a\026" +
    "\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\040\uff7a\041\uff7a\052\uff7a\065\uff7a\077\uff7a\101" +
    "\uff7a\001\002\000\006\015\233\024\210\001\002\000\064" +
    "\004\uff6d\005\uff6d\006\uff6d\010\uff6d\011\uff6d\012\uff6d\015" +
    "\uff6d\017\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d" +
    "\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\040" +
    "\uff6d\041\uff6d\052\uff6d\065\uff6d\077\uff6d\101\uff6d\001\002" +
    "\000\036\014\134\015\uff93\033\140\036\135\045\125\062" +
    "\132\067\141\073\136\102\130\103\127\110\124\111\123" +
    "\112\126\113\147\001\002\000\004\015\236\001\002\000" +
    "\064\004\uff6f\005\uff6f\006\uff6f\010\uff6f\011\uff6f\012\uff6f" +
    "\015\uff6f\017\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027" +
    "\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f" +
    "\040\uff6f\041\uff6f\052\uff6f\065\uff6f\077\uff6f\101\uff6f\001" +
    "\002\000\006\024\210\101\240\001\002\000\034\014\134" +
    "\033\140\036\135\045\125\062\132\067\141\073\136\102" +
    "\130\103\127\110\124\111\123\112\126\113\147\001\002" +
    "\000\006\024\210\052\242\001\002\000\034\014\134\033" +
    "\140\036\135\045\125\062\132\067\141\073\136\102\130" +
    "\103\127\110\124\111\123\112\126\113\147\001\002\000" +
    "\034\004\uff8d\005\uff8d\012\uff8d\015\uff8d\017\uff8d\023\uff8d" +
    "\024\210\040\uff8d\041\uff8d\052\uff8d\065\uff8d\077\uff8d\101" +
    "\uff8d\001\002\000\070\004\uff71\005\uff71\006\uff71\010\uff71" +
    "\011\uff71\012\uff71\014\246\015\uff71\017\uff71\023\uff71\024" +
    "\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71" +
    "\033\uff71\034\uff71\035\uff71\037\245\040\uff71\041\uff71\052" +
    "\uff71\065\uff71\077\uff71\101\uff71\001\002\000\036\014\134" +
    "\033\140\036\135\040\uff93\045\125\062\132\067\141\073" +
    "\136\102\130\103\127\110\124\111\123\112\126\113\147" +
    "\001\002\000\036\014\134\015\uff93\033\140\036\135\045" +
    "\125\062\132\067\141\073\136\102\130\103\127\110\124" +
    "\111\123\112\126\113\147\001\002\000\004\015\250\001" +
    "\002\000\064\004\uff76\005\uff76\006\uff76\010\uff76\011\uff76" +
    "\012\uff76\015\uff76\017\uff76\023\uff76\024\uff76\025\uff76\026" +
    "\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76" +
    "\035\uff76\040\uff76\041\uff76\052\uff76\065\uff76\077\uff76\101" +
    "\uff76\001\002\000\004\040\252\001\002\000\064\004\uff74" +
    "\005\uff74\006\uff74\010\uff74\011\uff74\012\uff74\015\uff74\017" +
    "\uff74\023\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74" +
    "\031\uff74\032\uff74\033\uff74\034\uff74\035\uff74\040\uff74\041" +
    "\uff74\052\uff74\065\uff74\077\uff74\101\uff74\001\002\000\004" +
    "\113\254\001\002\000\064\004\uff72\005\uff72\006\uff72\010" +
    "\uff72\011\uff72\012\uff72\015\uff72\017\uff72\023\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\040\uff72\041\uff72\052\uff72\065\uff72" +
    "\077\uff72\101\uff72\001\002\000\006\017\256\024\210\001" +
    "\002\000\022\007\261\073\136\102\266\103\127\110\124" +
    "\111\123\112\262\113\264\001\002\000\004\020\301\001" +
    "\002\000\010\004\uff65\015\uff65\021\uff65\001\002\000\010" +
    "\004\uff62\015\uff62\021\uff62\001\002\000\012\004\uff64\014" +
    "\273\015\uff64\021\uff64\001\002\000\004\021\271\001\002" +
    "\000\010\004\uff66\015\uff66\021\uff66\001\002\000\004\005" +
    "\267\001\002\000\010\004\uff60\015\uff60\021\uff60\001\002" +
    "\000\024\007\261\020\uff6b\073\136\102\266\103\127\110" +
    "\124\111\123\112\262\113\264\001\002\000\004\020\uff6a" +
    "\001\002\000\034\014\134\033\140\036\135\045\125\062" +
    "\132\067\141\073\136\102\130\103\127\110\124\111\123" +
    "\112\126\113\147\001\002\000\006\005\uff6c\024\210\001" +
    "\002\000\024\007\261\015\uff69\073\136\102\266\103\127" +
    "\110\124\111\123\112\262\113\264\001\002\000\006\004" +
    "\277\015\uff68\001\002\000\004\015\276\001\002\000\010" +
    "\004\uff63\015\uff63\021\uff63\001\002\000\024\007\261\015" +
    "\uff69\073\136\102\266\103\127\110\124\111\123\112\262" +
    "\113\264\001\002\000\004\015\uff67\001\002\000\034\004" +
    "\uff8c\005\uff8c\012\uff8c\015\uff8c\017\uff8c\023\uff8c\024\uff8c" +
    "\040\uff8c\041\uff8c\052\uff8c\065\uff8c\077\uff8c\101\uff8c\001" +
    "\002\000\004\015\306\001\002\000\006\004\304\015\uffb4" +
    "\001\002\000\010\007\105\015\uffb5\112\013\001\002\000" +
    "\004\015\uffb3\001\002\000\004\017\070\001\002\000\012" +
    "\007\uffbb\017\uffbb\020\uffbb\112\uffbb\001\002\000\004\017" +
    "\314\001\002\000\006\004\312\017\uffe6\001\002\000\004" +
    "\112\013\001\002\000\004\017\uffe5\001\002\000\012\007" +
    "\uffba\017\uffba\020\uffba\112\uffba\001\002\000\012\007\105" +
    "\017\070\020\uffb6\112\013\001\002\000\010\007\uffba\020" +
    "\uffba\112\uffba\001\002\000\010\007\105\020\320\112\013" +
    "\001\002\000\024\002\uffcf\017\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\053\uffcf\066\uffcf\071\uffcf\106\uffcf\001\002\000\004" +
    "\015\322\001\002\000\006\017\324\063\323\001\002\000" +
    "\004\112\013\001\002\000\012\007\uffba\017\uffba\020\uffba" +
    "\112\uffba\001\002\000\012\007\105\017\070\020\uffb6\112" +
    "\013\001\002\000\010\007\uffba\020\uffba\112\uffba\001\002" +
    "\000\010\007\105\020\330\112\013\001\002\000\024\002" +
    "\uffd0\017\uffd0\047\uffd0\050\uffd0\051\uffd0\053\uffd0\066\uffd0" +
    "\071\uffd0\106\uffd0\001\002\000\004\017\332\001\002\000" +
    "\012\007\uffba\017\uffba\020\uffba\112\uffba\001\002\000\012" +
    "\007\105\017\070\020\uffb6\112\013\001\002\000\010\007" +
    "\uffba\020\uffba\112\uffba\001\002\000\010\007\105\020\336" +
    "\112\013\001\002\000\024\002\uffce\017\uffce\047\uffce\050" +
    "\uffce\051\uffce\053\uffce\066\uffce\071\uffce\106\uffce\001\002" +
    "\000\006\010\340\013\341\001\002\000\004\112\360\001" +
    "\002\000\004\112\343\001\002\000\006\005\uffc4\016\356" +
    "\001\002\000\010\005\uffcd\014\346\016\uffcd\001\002\000" +
    "\004\005\345\001\002\000\024\002\uffd7\017\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\053\uffd7\066\uffd7\071\uffd7\106\uffd7\001" +
    "\002\000\010\007\105\015\uffc9\112\013\001\002\000\004" +
    "\015\355\001\002\000\010\004\uffcb\015\uffcb\113\354\001" +
    "\002\000\006\004\352\015\uffc8\001\002\000\010\007\105" +
    "\015\uffc9\112\013\001\002\000\004\015\uffc7\001\002\000" +
    "\006\004\uffca\015\uffca\001\002\000\006\005\uffcc\016\uffcc" +
    "\001\002\000\004\112\343\001\002\000\004\005\uffc3\001" +
    "\002\000\006\004\366\011\uffc6\001\002\000\004\011\362" +
    "\001\002\000\004\013\363\001\002\000\004\112\343\001" +
    "\002\000\004\005\365\001\002\000\024\002\uffd6\017\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\053\uffd6\066\uffd6\071\uffd6\106" +
    "\uffd6\001\002\000\004\112\360\001\002\000\004\011\uffc5" +
    "\001\002\000\006\010\371\013\372\001\002\000\004\112" +
    "\360\001\002\000\006\007\105\112\013\001\002\000\004" +
    "\005\374\001\002\000\024\002\uffda\017\uffda\047\uffda\050" +
    "\uffda\051\uffda\053\uffda\066\uffda\071\uffda\106\uffda\001\002" +
    "\000\004\011\376\001\002\000\004\013\377\001\002\000" +
    "\006\007\105\112\013\001\002\000\004\005\u0101\001\002" +
    "\000\024\002\uffd9\017\uffd9\047\uffd9\050\uffd9\051\uffd9\053" +
    "\uffd9\066\uffd9\071\uffd9\106\uffd9\001\002\000\004\113\u0103" +
    "\001\002\000\006\010\u0104\014\u0105\001\002\000\004\112" +
    "\360\001\002\000\010\007\105\015\uffb5\112\013\001\002" +
    "\000\004\015\u0107\001\002\000\004\013\u0108\001\002\000" +
    "\036\014\134\033\140\036\135\044\u0109\045\125\062\132" +
    "\067\141\073\136\102\130\103\127\110\124\111\123\112" +
    "\126\113\147\001\002\000\004\005\uffc2\001\002\000\006" +
    "\005\uffc1\024\210\001\002\000\004\005\u010c\001\002\000" +
    "\024\002\uffd5\017\uffd5\047\uffd5\050\uffd5\051\uffd5\053\uffd5" +
    "\066\uffd5\071\uffd5\106\uffd5\001\002\000\004\011\u010e\001" +
    "\002\000\004\014\u010f\001\002\000\010\007\105\015\uffb5" +
    "\112\013\001\002\000\004\015\u0111\001\002\000\004\013" +
    "\u0112\001\002\000\036\014\134\033\140\036\135\044\u0109" +
    "\045\125\062\132\067\141\073\136\102\130\103\127\110" +
    "\124\111\123\112\126\113\147\001\002\000\004\005\u0114" +
    "\001\002\000\024\002\uffd4\017\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\053\uffd4\066\uffd4\071\uffd4\106\uffd4\001\002\000\066" +
    "\007\105\014\134\017\u0118\020\u0117\033\140\036\135\042" +
    "\u011f\043\u011e\045\125\062\u0116\067\141\072\u0129\073\136" +
    "\074\u0128\075\u0127\076\u0126\100\u0121\102\u0120\103\127\104" +
    "\u011d\105\u011c\107\u011b\110\124\111\123\112\126\113\u0122" +
    "\001\002\000\034\014\u0184\033\140\036\135\045\125\062" +
    "\132\067\141\073\136\102\130\103\127\110\124\111\123" +
    "\112\126\113\147\001\002\000\016\002\uffb8\007\uffb8\017" +
    "\uffb8\020\uffb8\071\uffb8\112\uffb8\001\002\000\066\007\uffb1" +
    "\014\uffb1\017\uffb1\020\uffb1\033\uffb1\036\uffb1\042\uffb1\043" +
    "\uffb1\045\uffb1\062\uffb1\067\uffb1\072\uffb1\073\uffb1\074\uffb1" +
    "\075\uffb1\076\uffb1\100\uffb1\102\uffb1\103\uffb1\104\uffb1\105" +
    "\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1\001\002" +
    "\000\004\005\uff94\001\002\000\066\007\uffb0\014\uffb0\017" +
    "\uffb0\020\uffb0\033\uffb0\036\uffb0\042\uffb0\043\uffb0\045\uffb0" +
    "\062\uffb0\067\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076" +
    "\uffb0\100\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\107\uffb0" +
    "\110\uffb0\111\uffb0\112\uffb0\113\uffb0\001\002\000\004\014" +
    "\u017e\001\002\000\064\007\105\014\134\017\u0118\033\140" +
    "\036\135\042\u011f\043\u011e\045\125\062\u0116\067\141\072" +
    "\u0129\073\136\074\u0128\075\u0127\076\u0126\100\u0121\102\u0120" +
    "\103\127\104\u011d\105\u011c\107\u011b\110\124\111\123\112" +
    "\126\113\u0122\001\002\000\034\014\134\033\140\036\135" +
    "\045\125\062\132\067\141\073\136\102\130\103\127\110" +
    "\124\111\123\112\126\113\147\001\002\000\034\014\134" +
    "\033\140\036\135\045\125\062\132\067\141\073\136\102" +
    "\u0165\103\127\110\124\111\123\112\126\113\u0168\001\002" +
    "\000\034\014\134\033\140\036\135\045\125\062\132\067" +
    "\141\073\136\102\130\103\127\110\124\111\123\112\126" +
    "\113\147\001\002\000\044\005\uff60\006\uff60\010\uff60\011" +
    "\uff60\012\u015e\024\uff60\025\uff60\026\uff60\027\uff60\030\uff60" +
    "\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60\041\u0131\077" +
    "\uff60\001\002\000\004\005\u015d\001\002\000\052\005\uff73" +
    "\006\uff73\010\uff73\011\uff73\012\uff73\013\u015a\014\204\024" +
    "\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73" +
    "\033\uff73\034\uff73\035\uff73\037\203\041\uff73\077\uff73\001" +
    "\002\000\014\005\uff95\012\u014b\024\210\041\u014a\077\u014c" +
    "\001\002\000\004\005\u0149\001\002\000\050\005\uff70\006" +
    "\uff70\010\107\011\uff70\012\uff70\014\234\024\uff70\025\uff70" +
    "\026\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034" +
    "\uff70\035\uff70\041\uff70\077\uff70\113\uffea\001\002\000\004" +
    "\005\u0148\001\002\000\036\014\134\033\140\036\135\045" +
    "\125\062\132\067\141\072\u0129\073\136\102\u012e\103\127" +
    "\110\124\111\123\112\126\113\147\001\002\000\034\014" +
    "\134\033\140\036\135\045\125\062\132\067\141\073\136" +
    "\102\130\103\127\110\124\111\123\112\126\113\147\001" +
    "\002\000\010\007\105\070\u013c\112\013\001\002\000\004" +
    "\113\u012b\001\002\000\006\005\u012c\013\u012d\001\002\000" +
    "\072\007\uffa9\014\uffa9\017\uffa9\020\uffa9\033\uffa9\036\uffa9" +
    "\042\uffa9\043\uffa9\045\uffa9\046\uffa9\052\uffa9\062\uffa9\067" +
    "\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\100\uffa9" +
    "\102\uffa9\103\uffa9\104\uffa9\105\uffa9\107\uffa9\110\uffa9\111" +
    "\uffa9\112\uffa9\113\uffa9\001\002\000\036\014\134\033\140" +
    "\036\135\045\125\062\132\067\141\072\u0129\073\136\102" +
    "\u012e\103\127\110\124\111\123\112\126\113\147\001\002" +
    "\000\044\005\uff60\006\uff60\010\uff60\011\uff60\012\u0132\024" +
    "\uff60\025\uff60\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60" +
    "\033\uff60\034\uff60\035\uff60\041\u0131\077\uff60\001\002\000" +
    "\004\005\u0130\001\002\000\072\007\uffa8\014\uffa8\017\uffa8" +
    "\020\uffa8\033\uffa8\036\uffa8\042\uffa8\043\uffa8\045\uffa8\046" +
    "\uffa8\052\uffa8\062\uffa8\067\uffa8\072\uffa8\073\uffa8\074\uffa8" +
    "\075\uffa8\076\uffa8\100\uffa8\102\uffa8\103\uffa8\104\uffa8\105" +
    "\uffa8\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\001\002" +
    "\000\004\113\u0137\001\002\000\004\113\u0133\001\002\000" +
    "\046\005\uff72\006\uff72\010\uff72\011\uff72\012\uff72\014\u0134" +
    "\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032" +
    "\uff72\033\uff72\034\uff72\035\uff72\041\uff72\077\uff72\001\002" +
    "\000\036\014\134\015\uff93\033\140\036\135\045\125\062" +
    "\132\067\141\073\136\102\130\103\127\110\124\111\123" +
    "\112\126\113\147\001\002\000\004\015\u0136\001\002\000" +
    "\004\005\uff59\001\002\000\004\014\u0138\001\002\000\036" +
    "\014\134\015\uff93\033\140\036\135\045\125\062\132\067" +
    "\141\073\136\102\130\103\127\110\124\111\123\112\126" +
    "\113\147\001\002\000\004\015\u013a\001\002\000\004\005" +
    "\uff57\001\002\000\004\014\u0141\001\002\000\006\007\105" +
    "\112\013\001\002\000\004\014\u013e\001\002\000\036\014" +
    "\134\015\uff93\033\140\036\135\045\125\062\132\067\141" +
    "\073\136\102\130\103\127\110\124\111\123\112\126\113" +
    "\147\001\002\000\004\015\u0140\001\002\000\004\005\uff5b" +
    "\001\002\000\036\014\134\015\uff93\033\140\036\135\045" +
    "\125\062\132\067\141\073\136\102\130\103\127\110\124" +
    "\111\123\112\126\113\147\001\002\000\004\015\u0143\001" +
    "\002\000\004\005\uff5c\001\002\000\006\005\u0145\024\210" +
    "\001\002\000\072\007\uff9f\014\uff9f\017\uff9f\020\uff9f\033" +
    "\uff9f\036\uff9f\042\uff9f\043\uff9f\045\uff9f\046\uff9f\052\uff9f" +
    "\062\uff9f\067\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076" +
    "\uff9f\100\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\107\uff9f" +
    "\110\uff9f\111\uff9f\112\uff9f\113\uff9f\001\002\000\004\005" +
    "\u0147\001\002\000\072\007\uffac\014\uffac\017\uffac\020\uffac" +
    "\033\uffac\036\uffac\042\uffac\043\uffac\045\uffac\046\uffac\052" +
    "\uffac\062\uffac\067\uffac\072\uffac\073\uffac\074\uffac\075\uffac" +
    "\076\uffac\100\uffac\102\uffac\103\uffac\104\uffac\105\uffac\107" +
    "\uffac\110\uffac\111\uffac\112\uffac\113\uffac\001\002\000\072" +
    "\007\uffa4\014\uffa4\017\uffa4\020\uffa4\033\uffa4\036\uffa4\042" +
    "\uffa4\043\uffa4\045\uffa4\046\uffa4\052\uffa4\062\uffa4\067\uffa4" +
    "\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\100\uffa4\102" +
    "\uffa4\103\uffa4\104\uffa4\105\uffa4\107\uffa4\110\uffa4\111\uffa4" +
    "\112\uffa4\113\uffa4\001\002\000\072\007\uffaf\014\uffaf\017" +
    "\uffaf\020\uffaf\033\uffaf\036\uffaf\042\uffaf\043\uffaf\045\uffaf" +
    "\046\uffaf\052\uffaf\062\uffaf\067\uffaf\072\uffaf\073\uffaf\074" +
    "\uffaf\075\uffaf\076\uffaf\100\uffaf\102\uffaf\103\uffaf\104\uffaf" +
    "\105\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\001" +
    "\002\000\004\113\u0156\001\002\000\006\061\u0151\113\u0152" +
    "\001\002\000\006\007\105\112\013\001\002\000\004\014" +
    "\u014e\001\002\000\036\014\134\015\uff93\033\140\036\135" +
    "\045\125\062\132\067\141\073\136\102\130\103\127\110" +
    "\124\111\123\112\126\113\147\001\002\000\004\015\u0150" +
    "\001\002\000\004\005\uff55\001\002\000\004\005\uff56\001" +
    "\002\000\004\014\u0153\001\002\000\036\014\134\015\uff93" +
    "\033\140\036\135\045\125\062\132\067\141\073\136\102" +
    "\130\103\127\110\124\111\123\112\126\113\147\001\002" +
    "\000\004\015\u0155\001\002\000\004\005\uff5a\001\002\000" +
    "\004\014\u0157\001\002\000\036\014\134\015\uff93\033\140" +
    "\036\135\045\125\062\132\067\141\073\136\102\130\103" +
    "\127\110\124\111\123\112\126\113\147\001\002\000\004" +
    "\015\u0159\001\002\000\004\005\uff58\001\002\000\036\014" +
    "\134\033\140\036\135\045\125\062\132\067\141\072\u0129" +
    "\073\136\102\u012e\103\127\110\124\111\123\112\126\113" +
    "\147\001\002\000\004\005\u015c\001\002\000\072\007\uffab" +
    "\014\uffab\017\uffab\020\uffab\033\uffab\036\uffab\042\uffab\043" +
    "\uffab\045\uffab\046\uffab\052\uffab\062\uffab\067\uffab\072\uffab" +
    "\073\uffab\074\uffab\075\uffab\076\uffab\100\uffab\102\uffab\103" +
    "\uffab\104\uffab\105\uffab\107\uffab\110\uffab\111\uffab\112\uffab" +
    "\113\uffab\001\002\000\072\007\uffa5\014\uffa5\017\uffa5\020" +
    "\uffa5\033\uffa5\036\uffa5\042\uffa5\043\uffa5\045\uffa5\046\uffa5" +
    "\052\uffa5\062\uffa5\067\uffa5\072\uffa5\073\uffa5\074\uffa5\075" +
    "\uffa5\076\uffa5\100\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5" +
    "\107\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5\001\002\000" +
    "\004\113\u015f\001\002\000\050\005\uff72\006\uff72\010\uff72" +
    "\011\uff72\012\uff72\013\u0160\014\u0134\024\uff72\025\uff72\026" +
    "\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72" +
    "\035\uff72\041\uff72\077\uff72\001\002\000\036\014\134\033" +
    "\140\036\135\045\125\062\132\067\141\072\u0129\073\136" +
    "\102\u012e\103\127\110\124\111\123\112\126\113\147\001" +
    "\002\000\004\005\u0162\001\002\000\072\007\uffaa\014\uffaa" +
    "\017\uffaa\020\uffaa\033\uffaa\036\uffaa\042\uffaa\043\uffaa\045" +
    "\uffaa\046\uffaa\052\uffaa\062\uffaa\067\uffaa\072\uffaa\073\uffaa" +
    "\074\uffaa\075\uffaa\076\uffaa\100\uffaa\102\uffaa\103\uffaa\104" +
    "\uffaa\105\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa" +
    "\001\002\000\006\005\u0164\024\210\001\002\000\072\007" +
    "\uffa3\014\uffa3\017\uffa3\020\uffa3\033\uffa3\036\uffa3\042\uffa3" +
    "\043\uffa3\045\uffa3\046\uffa3\052\uffa3\062\uffa3\067\uffa3\072" +
    "\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\100\uffa3\102\uffa3" +
    "\103\uffa3\104\uffa3\105\uffa3\107\uffa3\110\uffa3\111\uffa3\112" +
    "\uffa3\113\uffa3\001\002\000\042\005\uff60\006\uff60\010\uff60" +
    "\011\uff60\012\u016d\023\uff60\024\uff60\025\uff60\026\uff60\027" +
    "\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60" +
    "\001\002\000\006\005\u016a\023\u016b\001\002\000\010\005" +
    "\uff97\023\uff97\024\210\001\002\000\046\005\uff73\006\uff73" +
    "\010\uff73\011\uff73\014\204\022\u0169\023\uff73\024\uff73\025" +
    "\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73" +
    "\034\uff73\035\uff73\037\203\001\002\000\006\005\uff99\023" +
    "\uff99\001\002\000\072\007\uffa2\014\uffa2\017\uffa2\020\uffa2" +
    "\033\uffa2\036\uffa2\042\uffa2\043\uffa2\045\uffa2\046\uffa2\052" +
    "\uffa2\062\uffa2\067\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2" +
    "\076\uffa2\100\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\107" +
    "\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2\001\002\000\034" +
    "\014\134\033\140\036\135\045\125\062\132\067\141\073" +
    "\136\102\u0165\103\127\110\124\111\123\112\126\113\u0168" +
    "\001\002\000\006\005\uff96\023\u016b\001\002\000\004\113" +
    "\u016e\001\002\000\042\005\uff72\006\uff72\010\uff72\011\uff72" +
    "\022\u016f\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030" +
    "\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72\001\002" +
    "\000\006\005\uff98\023\uff98\001\002\000\006\005\u0171\024" +
    "\210\001\002\000\072\007\uffa1\014\uffa1\017\uffa1\020\uffa1" +
    "\033\uffa1\036\uffa1\042\uffa1\043\uffa1\045\uffa1\046\uffa1\052" +
    "\uffa1\062\uffa1\067\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1" +
    "\076\uffa1\100\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\107" +
    "\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1\001\002\000\004" +
    "\046\u0173\001\002\000\004\017\u0174\001\002\000\024\007" +
    "\uff9d\020\uff9d\073\uff9d\102\uff9d\103\uff9d\110\uff9d\111\uff9d" +
    "\112\uff9d\113\uff9d\001\002\000\024\007\261\020\u0178\073" +
    "\136\102\266\103\127\110\124\111\123\112\262\113\264" +
    "\001\002\000\024\007\uff9c\020\uff9c\073\uff9c\102\uff9c\103" +
    "\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\001\002\000\004" +
    "\021\u017c\001\002\000\074\007\uff9a\014\uff9a\017\uff9a\020" +
    "\uff9a\033\uff9a\036\uff9a\042\uff9a\043\uff9a\045\uff9a\046\uff9a" +
    "\052\uff9a\057\u017a\062\uff9a\067\uff9a\072\uff9a\073\uff9a\074" +
    "\uff9a\075\uff9a\076\uff9a\100\uff9a\102\uff9a\103\uff9a\104\uff9a" +
    "\105\uff9a\107\uff9a\110\uff9a\111\uff9a\112\uff9a\113\uff9a\001" +
    "\002\000\072\007\uffa0\014\uffa0\017\uffa0\020\uffa0\033\uffa0" +
    "\036\uffa0\042\uffa0\043\uffa0\045\uffa0\046\uffa0\052\uffa0\062" +
    "\uffa0\067\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0" +
    "\100\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\107\uffa0\110" +
    "\uffa0\111\uffa0\112\uffa0\113\uffa0\001\002\000\064\007\105" +
    "\014\134\017\u0118\033\140\036\135\042\u011f\043\u011e\045" +
    "\125\062\u0116\067\141\072\u0129\073\136\074\u0128\075\u0127" +
    "\076\u0126\100\u0121\102\u0120\103\127\104\u011d\105\u011c\107" +
    "\u011b\110\124\111\123\112\126\113\u0122\001\002\000\072" +
    "\007\uff9b\014\uff9b\017\uff9b\020\uff9b\033\uff9b\036\uff9b\042" +
    "\uff9b\043\uff9b\045\uff9b\046\uff9b\052\uff9b\062\uff9b\067\uff9b" +
    "\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\100\uff9b\102" +
    "\uff9b\103\uff9b\104\uff9b\105\uff9b\107\uff9b\110\uff9b\111\uff9b" +
    "\112\uff9b\113\uff9b\001\002\000\064\007\105\014\134\017" +
    "\u0118\033\140\036\135\042\u011f\043\u011e\045\125\062\u0116" +
    "\067\141\072\u0129\073\136\074\u0128\075\u0127\076\u0126\100" +
    "\u0121\102\u0120\103\127\104\u011d\105\u011c\107\u011b\110\124" +
    "\111\123\112\126\113\u0122\001\002\000\024\007\uff9e\020" +
    "\uff9e\073\uff9e\102\uff9e\103\uff9e\110\uff9e\111\uff9e\112\uff9e" +
    "\113\uff9e\001\002\000\034\014\134\033\140\036\135\045" +
    "\125\062\132\067\141\073\136\102\130\103\127\110\124" +
    "\111\123\112\126\113\147\001\002\000\006\015\u0180\024" +
    "\210\001\002\000\064\007\105\014\134\017\u0118\033\140" +
    "\036\135\042\u011f\043\u011e\045\125\062\u0116\067\141\072" +
    "\u0129\073\136\074\u0128\075\u0127\076\u0126\100\u0121\102\u0120" +
    "\103\127\104\u011d\105\u011c\107\u011b\110\124\111\123\112" +
    "\126\113\u0122\001\002\000\072\007\uffad\014\uffad\017\uffad" +
    "\020\uffad\033\uffad\036\uffad\042\uffad\043\uffad\045\uffad\046" +
    "\uffad\052\uffad\062\uffad\067\uffad\072\uffad\073\uffad\074\uffad" +
    "\075\uffad\076\uffad\100\uffad\102\uffad\103\uffad\104\uffad\105" +
    "\uffad\107\uffad\110\uffad\111\uffad\112\uffad\113\uffad\001\002" +
    "\000\066\007\105\014\134\017\u0118\020\u0183\033\140\036" +
    "\135\042\u011f\043\u011e\045\125\062\u0116\067\141\072\u0129" +
    "\073\136\074\u0128\075\u0127\076\u0126\100\u0121\102\u0120\103" +
    "\127\104\u011d\105\u011c\107\u011b\110\124\111\123\112\126" +
    "\113\u0122\001\002\000\072\007\uffae\014\uffae\017\uffae\020" +
    "\uffae\033\uffae\036\uffae\042\uffae\043\uffae\045\uffae\046\uffae" +
    "\052\uffae\062\uffae\067\uffae\072\uffae\073\uffae\074\uffae\075" +
    "\uffae\076\uffae\100\uffae\102\uffae\103\uffae\104\uffae\105\uffae" +
    "\107\uffae\110\uffae\111\uffae\112\uffae\113\uffae\001\002\000" +
    "\034\014\134\033\140\036\135\045\125\062\132\067\141" +
    "\073\136\102\130\103\127\110\124\111\123\112\126\113" +
    "\147\001\002\000\006\015\u0186\024\210\001\002\000\116" +
    "\006\uff6d\007\105\010\uff6d\011\uff6d\014\134\017\u0118\024" +
    "\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d" +
    "\033\140\034\uff6d\035\uff6d\036\135\042\u011f\043\u011e\045" +
    "\125\062\u0116\067\141\072\u0129\073\136\074\u0128\075\u0127" +
    "\076\u0126\100\u0121\101\uff6d\102\u0120\103\127\104\u011d\105" +
    "\u011c\107\u011b\110\124\111\123\112\126\113\u0122\001\002" +
    "\000\072\007\uffa7\014\uffa7\017\uffa7\020\uffa7\033\uffa7\036" +
    "\uffa7\042\uffa7\043\uffa7\045\uffa7\046\uffa7\052\u0188\062\uffa7" +
    "\067\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\100" +
    "\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\107\uffa7\110\uffa7" +
    "\111\uffa7\112\uffa7\113\uffa7\001\002\000\064\007\105\014" +
    "\134\017\u0118\033\140\036\135\042\u011f\043\u011e\045\125" +
    "\062\u0116\067\141\072\u0129\073\136\074\u0128\075\u0127\076" +
    "\u0126\100\u0121\102\u0120\103\127\104\u011d\105\u011c\107\u011b" +
    "\110\124\111\123\112\126\113\u0122\001\002\000\072\007" +
    "\uffa6\014\uffa6\017\uffa6\020\uffa6\033\uffa6\036\uffa6\042\uffa6" +
    "\043\uffa6\045\uffa6\046\uffa6\052\uffa6\062\uffa6\067\uffa6\072" +
    "\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\100\uffa6\102\uffa6" +
    "\103\uffa6\104\uffa6\105\uffa6\107\uffa6\110\uffa6\111\uffa6\112" +
    "\uffa6\113\uffa6\001\002\000\004\005\u018b\001\002\000\024" +
    "\002\uffd8\017\uffd8\047\uffd8\050\uffd8\051\uffd8\053\uffd8\066" +
    "\uffd8\071\uffd8\106\uffd8\001\002\000\006\017\u018e\055\u018d" +
    "\001\002\000\004\112\013\001\002\000\010\007\uffbf\020" +
    "\uffbf\112\uffbf\001\002\000\010\007\105\020\u0192\112\013" +
    "\001\002\000\004\005\u0197\001\002\000\004\113\u0193\001" +
    "\002\000\024\002\uffd3\017\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\053\uffd3\066\uffd3\071\uffd3\106\uffd3\001\002\000\004\014" +
    "\u0194\001\002\000\010\007\105\015\uffb5\112\013\001\002" +
    "\000\004\015\u0196\001\002\000\004\005\uffc0\001\002\000" +
    "\010\007\uffbe\020\uffbe\112\uffbe\001\002\000\004\017\u0199" +
    "\001\002\000\010\007\uffbf\020\uffbf\112\uffbf\001\002\000" +
    "\010\007\105\020\u019b\112\013\001\002\000\024\002\uffd2" +
    "\017\uffd2\047\uffd2\050\uffd2\051\uffd2\053\uffd2\066\uffd2\071" +
    "\uffd2\106\uffd2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019a\000\006\004\003\005\004\001\001\000\002\001" +
    "\001\000\004\006\005\001\001\000\002\001\001\000\010" +
    "\017\010\020\011\021\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\011\021\014\001\001\000\002\001\001\000\004\010" +
    "\016\001\001\000\006\007\020\012\017\001\001\000\010" +
    "\011\037\013\041\025\036\001\001\000\002\001\001\000" +
    "\006\002\024\003\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\024\003\030\001\001\000\002\001\001" +
    "\000\010\017\032\020\011\021\007\001\001\000\002\001" +
    "\001\000\010\017\034\020\011\021\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\062\041\063\042" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\024\003\044\022\043\023\050\024\046\001\001\000" +
    "\002\001\001\000\004\002\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\050\024\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\055\020\011\021" +
    "\007\001\001\000\002\001\001\000\010\017\057\020\011" +
    "\021\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u0189\001\001\000" +
    "\004\045\u0114\001\001\000\012\014\u0101\017\105\020\011" +
    "\021\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\216\017\105" +
    "\020\011\021\007\043\320\044\302\001\001\000\012\016" +
    "\307\017\310\020\011\021\007\001\001\000\004\040\100" +
    "\001\001\000\020\014\101\017\105\020\011\021\007\037" +
    "\103\041\063\042\102\001\001\000\002\001\001\000\004" +
    "\040\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\107\015\110\017\105\020\011" +
    "\021\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\107\015\113\017\105\020\011" +
    "\021\007\001\001\000\002\001\001\000\014\014\101\017" +
    "\105\020\011\021\007\037\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\216\017" +
    "\105\020\011\021\007\043\301\044\302\001\001\000\040" +
    "\017\132\020\011\021\007\022\130\023\050\024\046\055" +
    "\136\056\151\057\150\060\147\061\145\062\144\063\142" +
    "\064\141\071\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\055\254\056\151\057\150\060\147\061\145\062" +
    "\144\063\142\064\141\071\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\055\236\056\151\057\150\060\147\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\002\001\001\000\040" +
    "\017\132\020\011\021\007\022\130\023\050\024\046\055" +
    "\231\056\151\057\150\060\147\061\145\062\144\063\142" +
    "\064\141\071\143\001\001\000\024\017\132\020\011\021" +
    "\007\022\130\023\050\024\046\063\230\064\141\071\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\063\226" +
    "\064\141\071\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\017\132\020\011" +
    "\021\007\022\130\023\050\024\046\057\153\060\147\061" +
    "\145\062\144\063\142\064\141\071\143\001\001\000\002" +
    "\001\001\000\032\017\132\020\011\021\007\022\130\023" +
    "\050\024\046\060\201\061\145\062\144\063\142\064\141" +
    "\071\143\001\001\000\032\017\132\020\011\021\007\022" +
    "\130\023\050\024\046\060\156\061\145\062\144\063\142" +
    "\064\141\071\143\001\001\000\002\001\001\000\030\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\061\200" +
    "\062\144\063\142\064\141\071\143\001\001\000\030\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\061\177" +
    "\062\144\063\142\064\141\071\143\001\001\000\030\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\061\176" +
    "\062\144\063\142\064\141\071\143\001\001\000\030\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\061\163" +
    "\062\144\063\142\064\141\071\143\001\001\000\002\001" +
    "\001\000\026\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\062\175\063\142\064\141\071\143\001\001\000" +
    "\026\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\062\166\063\142\064\141\071\143\001\001\000\002\001" +
    "\001\000\024\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\063\174\064\141\071\143\001\001\000\024\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\063\173" +
    "\064\141\071\143\001\001\000\024\017\132\020\011\021" +
    "\007\022\130\023\050\024\046\063\172\064\141\071\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\017\132\020" +
    "\011\021\007\022\130\023\050\024\046\054\213\055\205" +
    "\056\151\057\150\060\147\061\145\062\144\063\142\064" +
    "\141\071\143\001\001\000\042\017\132\020\011\021\007" +
    "\022\130\023\050\024\046\054\204\055\205\056\151\057" +
    "\150\060\147\061\145\062\144\063\142\064\141\071\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\054\211" +
    "\055\205\056\151\057\150\060\147\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\036\017\132\020\011" +
    "\021\007\022\130\023\050\024\046\056\210\057\150\060" +
    "\147\061\145\062\144\063\142\064\141\071\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\216\017\105" +
    "\020\011\021\007\044\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\017\132\020\011" +
    "\021\007\022\130\023\050\024\046\055\222\056\151\057" +
    "\150\060\147\061\145\062\144\063\142\064\141\071\143" +
    "\001\001\000\002\001\001\000\040\017\132\020\011\021" +
    "\007\022\130\023\050\024\046\055\224\056\151\057\150" +
    "\060\147\061\145\062\144\063\142\064\141\071\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\017\132\020\011\021\007\022\130" +
    "\023\050\024\046\054\234\055\205\056\151\057\150\060" +
    "\147\061\145\062\144\063\142\064\141\071\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\055\240\056\151\057\150\060\147\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\002\001\001\000\040" +
    "\017\132\020\011\021\007\022\130\023\050\024\046\055" +
    "\242\056\151\057\150\060\147\061\145\062\144\063\142" +
    "\064\141\071\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\054\250\055\205\056\151\057\150\060\147\061" +
    "\145\062\144\063\142\064\141\071\143\001\001\000\042" +
    "\017\132\020\011\021\007\022\130\023\050\024\046\054" +
    "\246\055\205\056\151\057\150\060\147\061\145\062\144" +
    "\063\142\064\141\071\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\065" +
    "\264\066\256\070\262\071\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\065\264\066\267\070\262\071\257\001" +
    "\001\000\002\001\001\000\040\017\132\020\011\021\007" +
    "\022\130\023\050\024\046\055\271\056\151\057\150\060" +
    "\147\061\145\062\144\063\142\064\141\071\143\001\001" +
    "\000\002\001\001\000\010\067\274\070\273\071\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\067\277\070\273\071\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\216\017\105\020\011\021\007\043\304\044" +
    "\302\001\001\000\002\001\001\000\004\041\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\312\017\310\020\011\021\007\001\001\000\002" +
    "\001\001\000\004\040\314\001\001\000\020\014\101\017" +
    "\105\020\011\021\007\037\103\041\063\042\315\001\001" +
    "\000\004\040\316\001\001\000\014\014\101\017\105\020" +
    "\011\021\007\037\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\330\017\310\020" +
    "\011\021\007\001\001\000\004\040\324\001\001\000\020" +
    "\014\101\017\105\020\011\021\007\037\103\041\063\042" +
    "\325\001\001\000\004\040\326\001\001\000\014\014\101" +
    "\017\105\020\011\021\007\037\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\332\001\001\000\020" +
    "\014\101\017\105\020\011\021\007\037\103\041\063\042" +
    "\333\001\001\000\004\040\334\001\001\000\014\014\101" +
    "\017\105\020\011\021\007\037\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\360\001\001\000\006" +
    "\027\341\033\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\347" +
    "\017\105\020\011\021\007\030\350\031\346\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\347\017\105\020\011\021\007\030\350\031\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\341\033\356\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\341\033\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\374\001\001\000\012\014\372\017" +
    "\105\020\011\021\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\377\017\105\020\011\021\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u010c\001\001\000\016\014\216\017\105\020\011" +
    "\021\007\043\u0105\044\302\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\017\132\020\011\021\007\022\130" +
    "\023\050\024\046\034\u010a\055\u0109\056\151\057\150\060" +
    "\147\061\145\062\144\063\142\064\141\071\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\216\017\105\020\011\021\007\043\u010f\044\302\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\017\132" +
    "\020\011\021\007\022\130\023\050\024\046\034\u0112\055" +
    "\u0109\056\151\057\150\060\147\061\145\062\144\063\142" +
    "\064\141\071\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\014\u0129\017\u0124\020\011\021\007\022\130" +
    "\023\050\024\046\046\u0119\053\u0123\055\u0122\056\151\057" +
    "\150\060\147\061\145\062\144\063\142\064\141\071\143" +
    "\072\u0118\001\001\000\040\017\132\020\011\021\007\022" +
    "\130\023\050\024\046\055\236\056\151\057\150\060\147" +
    "\061\145\062\144\063\142\064\141\071\143\001\001\000" +
    "\002\001\001\000\004\045\u0181\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\014\u0129\017" +
    "\u0124\020\011\021\007\022\130\023\050\024\046\046\u0171" +
    "\053\u0123\055\u0122\056\151\057\150\060\147\061\145\062" +
    "\144\063\142\064\141\071\143\072\u0118\001\001\000\040" +
    "\017\132\020\011\021\007\022\130\023\050\024\046\055" +
    "\u016f\056\151\057\150\060\147\061\145\062\144\063\142" +
    "\064\141\071\143\001\001\000\042\017\132\020\011\021" +
    "\007\022\130\023\050\024\046\052\u0165\055\u0166\056\151" +
    "\057\150\060\147\061\145\062\144\063\142\064\141\071" +
    "\143\001\001\000\040\017\132\020\011\021\007\022\130" +
    "\023\050\024\046\055\u0162\056\151\057\150\060\147\061" +
    "\145\062\144\063\142\064\141\071\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\017\132\020\011\021\007\022\130\023\050\024" +
    "\046\053\u0145\055\u0122\056\151\057\150\060\147\061\145" +
    "\062\144\063\142\064\141\071\143\072\u0118\001\001\000" +
    "\040\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\055\u0143\056\151\057\150\060\147\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\012\014\u013a\017\105" +
    "\020\011\021\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\017\132\020\011\021\007" +
    "\022\130\023\050\024\046\053\u012e\055\u0122\056\151\057" +
    "\150\060\147\061\145\062\144\063\142\064\141\071\143" +
    "\072\u0118\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\017\132\020\011\021\007\022\130\023" +
    "\050\024\046\054\u0134\055\205\056\151\057\150\060\147" +
    "\061\145\062\144\063\142\064\141\071\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\017\132\020\011\021\007\022\130\023\050\024\046\054" +
    "\u0138\055\205\056\151\057\150\060\147\061\145\062\144" +
    "\063\142\064\141\071\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\u013c\017\105" +
    "\020\011\021\007\001\001\000\002\001\001\000\042\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\054\u013e" +
    "\055\205\056\151\057\150\060\147\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\017\132\020\011\021\007\022\130\023" +
    "\050\024\046\054\u0141\055\205\056\151\057\150\060\147" +
    "\061\145\062\144\063\142\064\141\071\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\u014c\017\105\020\011\021\007\001\001\000" +
    "\002\001\001\000\042\017\132\020\011\021\007\022\130" +
    "\023\050\024\046\054\u014e\055\205\056\151\057\150\060" +
    "\147\061\145\062\144\063\142\064\141\071\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\017\132\020\011\021\007\022\130" +
    "\023\050\024\046\054\u0153\055\205\056\151\057\150\060" +
    "\147\061\145\062\144\063\142\064\141\071\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\054\u0157\055\205\056\151\057\150\060\147\061\145\062" +
    "\144\063\142\064\141\071\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\017\132\020\011\021\007\022" +
    "\130\023\050\024\046\053\u015a\055\u0122\056\151\057\150" +
    "\060\147\061\145\062\144\063\142\064\141\071\143\072" +
    "\u0118\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\053\u0160" +
    "\055\u0122\056\151\057\150\060\147\061\145\062\144\063" +
    "\142\064\141\071\143\072\u0118\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\052\u016b" +
    "\055\u0166\056\151\057\150\060\147\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u0174\001\001\000\010\047\u0175\070\u0176\071" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\u0178\001\001\000\002\001\001\000\050\014\u0129\017" +
    "\u0124\020\011\021\007\022\130\023\050\024\046\046\u017a" +
    "\053\u0123\055\u0122\056\151\057\150\060\147\061\145\062" +
    "\144\063\142\064\141\071\143\072\u0118\001\001\000\002" +
    "\001\001\000\050\014\u0129\017\u0124\020\011\021\007\022" +
    "\130\023\050\024\046\046\u017c\053\u0123\055\u0122\056\151" +
    "\057\150\060\147\061\145\062\144\063\142\064\141\071" +
    "\143\072\u0118\001\001\000\002\001\001\000\040\017\132" +
    "\020\011\021\007\022\130\023\050\024\046\055\u017e\056" +
    "\151\057\150\060\147\061\145\062\144\063\142\064\141" +
    "\071\143\001\001\000\002\001\001\000\050\014\u0129\017" +
    "\u0124\020\011\021\007\022\130\023\050\024\046\046\u0180" +
    "\053\u0123\055\u0122\056\151\057\150\060\147\061\145\062" +
    "\144\063\142\064\141\071\143\072\u0118\001\001\000\002" +
    "\001\001\000\050\014\u0129\017\u0124\020\011\021\007\022" +
    "\130\023\050\024\046\046\u0119\053\u0123\055\u0122\056\151" +
    "\057\150\060\147\061\145\062\144\063\142\064\141\071" +
    "\143\072\u0118\001\001\000\002\001\001\000\040\017\132" +
    "\020\011\021\007\022\130\023\050\024\046\055\u0184\056" +
    "\151\057\150\060\147\061\145\062\144\063\142\064\141" +
    "\071\143\001\001\000\002\001\001\000\050\014\u0129\017" +
    "\u0124\020\011\021\007\022\130\023\050\024\046\046\u0186" +
    "\053\u0123\055\u0122\056\151\057\150\060\147\061\145\062" +
    "\144\063\142\064\141\071\143\072\u0118\001\001\000\002" +
    "\001\001\000\050\014\u0129\017\u0124\020\011\021\007\022" +
    "\130\023\050\024\046\046\u0188\053\u0123\055\u0122\056\151" +
    "\057\150\060\147\061\145\062\144\063\142\064\141\071" +
    "\143\072\u0118\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\u0197\017" +
    "\310\020\011\021\007\001\001\000\004\036\u018e\001\001" +
    "\000\014\014\u0190\017\105\020\011\021\007\035\u018f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\216\017\105\020\011\021" +
    "\007\043\u0194\044\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\u0199\001\001\000\014\014\u0190\017\105\020\011\021\007" +
    "\035\u018f\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public ABS.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (ABS.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		ABS.Absyn.Program start_val = (ABS.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // AnyIdent ::= LIdent 
            {
              ABS.Absyn.AnyIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyIden(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnyIdent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // AnyIdent ::= UIdent 
            {
              ABS.Absyn.AnyIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyTyIden(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnyIdent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListAnyIdent ::= AnyIdent 
            {
              ABS.Absyn.ListAnyIdent RESULT =null;
		ABS.Absyn.AnyIdent p_1 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListAnyIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnyIdent",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListAnyIdent ::= AnyIdent _SYMB_0 ListAnyIdent 
            {
              ABS.Absyn.ListAnyIdent RESULT =null;
		ABS.Absyn.AnyIdent p_1 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListAnyIdent p_3 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnyIdent",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= ListModule 
            {
              ABS.Absyn.Program RESULT =null;
		ABS.Absyn.ListModule p_1 = (ABS.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Prog(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListModule ::= 
            {
              ABS.Absyn.ListModule RESULT =null;
		 RESULT = new ABS.Absyn.ListModule(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListModule ::= ListModule Module 
            {
              ABS.Absyn.ListModule RESULT =null;
		ABS.Absyn.ListModule p_1 = (ABS.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Module p_2 = (ABS.Absyn.Module)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Module ::= _SYMB_53 QType _SYMB_1 ListExport ListImport ListDecl MaybeBlock 
            {
              ABS.Absyn.Module RESULT =null;
		ABS.Absyn.QType p_2 = (ABS.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListExport p_4 = (ABS.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListImport p_5 = (ABS.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListDecl p_6 = (ABS.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.MaybeBlock p_7 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Modul(p_2,p_4,p_5,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Module",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Export ::= _SYMB_40 ListAnyIdent 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyExport(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Export ::= _SYMB_40 ListAnyIdent _SYMB_44 QType 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.QType p_4 = (ABS.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyFromExport(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Export ::= _SYMB_40 _SYMB_2 
            {
              ABS.Absyn.Export RESULT =null;
		 RESULT = new ABS.Absyn.StarExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Export ::= _SYMB_40 _SYMB_2 _SYMB_44 QType 
            {
              ABS.Absyn.Export RESULT =null;
		ABS.Absyn.QType p_4 = (ABS.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.StarFromExport(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListExport ::= 
            {
              ABS.Absyn.ListExport RESULT =null;
		 RESULT = new ABS.Absyn.ListExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListExport ::= ListExport Export _SYMB_1 
            {
              ABS.Absyn.ListExport RESULT =null;
		ABS.Absyn.ListExport p_1 = (ABS.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Export p_2 = (ABS.Absyn.Export)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Import ::= ImportType TType AnyIdent 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.TType p_2 = (ABS.Absyn.TType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.AnyIdent p_3 = (ABS.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyImport(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Import ::= ImportType ListAnyIdent _SYMB_44 QType 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListAnyIdent p_2 = (ABS.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.QType p_4 = (ABS.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnyFromImport(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Import ::= ImportType _SYMB_2 _SYMB_44 QType 
            {
              ABS.Absyn.Import RESULT =null;
		ABS.Absyn.ImportType p_1 = (ABS.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.QType p_4 = (ABS.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.StarFromImport(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListImport ::= 
            {
              ABS.Absyn.ListImport RESULT =null;
		 RESULT = new ABS.Absyn.ListImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListImport ::= ListImport Import _SYMB_1 
            {
              ABS.Absyn.ListImport RESULT =null;
		ABS.Absyn.ListImport p_1 = (ABS.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Import p_2 = (ABS.Absyn.Import)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ImportType ::= _SYMB_42 
            {
              ABS.Absyn.ImportType RESULT =null;
		 RESULT = new ABS.Absyn.ForeignImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportType",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ImportType ::= _SYMB_48 
            {
              ABS.Absyn.ImportType RESULT =null;
		 RESULT = new ABS.Absyn.NormalImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportType",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= _SYMB_3 
            {
              ABS.Absyn.Type RESULT =null;
		 RESULT = new ABS.Absyn.TUnderscore(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= QType 
            {
              ABS.Absyn.Type RESULT =null;
		ABS.Absyn.QType p_1 = (ABS.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.TSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= QType _SYMB_4 ListType _SYMB_5 
            {
              ABS.Absyn.Type RESULT =null;
		ABS.Absyn.QType p_1 = (ABS.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListType p_3 = (ABS.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.TGen(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListType ::= Type 
            {
              ABS.Absyn.ListType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListType ::= Type _SYMB_0 ListType 
            {
              ABS.Absyn.ListType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListType p_3 = (ABS.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListQType ::= QType 
            {
              ABS.Absyn.ListQType RESULT =null;
		ABS.Absyn.QType p_1 = (ABS.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListQType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQType",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListQType ::= QType _SYMB_0 ListQType 
            {
              ABS.Absyn.ListQType RESULT =null;
		ABS.Absyn.QType p_1 = (ABS.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListQType p_3 = (ABS.Absyn.ListQType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQType",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // QType ::= ListQTypeSegment 
            {
              ABS.Absyn.QType RESULT =null;
		ABS.Absyn.ListQTypeSegment p_1 = (ABS.Absyn.ListQTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.QTyp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QType",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // QTypeSegment ::= UIdent 
            {
              ABS.Absyn.QTypeSegment RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.QTypeSegmen(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QTypeSegment",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListQTypeSegment ::= QTypeSegment 
            {
              ABS.Absyn.ListQTypeSegment RESULT =null;
		ABS.Absyn.QTypeSegment p_1 = (ABS.Absyn.QTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListQTypeSegment(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQTypeSegment",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListQTypeSegment ::= QTypeSegment _SYMB_6 ListQTypeSegment 
            {
              ABS.Absyn.ListQTypeSegment RESULT =null;
		ABS.Absyn.QTypeSegment p_1 = (ABS.Absyn.QTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListQTypeSegment p_3 = (ABS.Absyn.ListQTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQTypeSegment",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TType ::= ListTTypeSegment 
            {
              ABS.Absyn.TType RESULT =null;
		ABS.Absyn.ListTTypeSegment p_1 = (ABS.Absyn.ListTTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.TTyp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TType",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TTypeSegment ::= UIdent 
            {
              ABS.Absyn.TTypeSegment RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.TTypeSegmen(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TTypeSegment",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListTTypeSegment ::= TTypeSegment _SYMB_6 
            {
              ABS.Absyn.ListTTypeSegment RESULT =null;
		ABS.Absyn.TTypeSegment p_1 = (ABS.Absyn.TTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ListTTypeSegment(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTTypeSegment",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListTTypeSegment ::= TTypeSegment _SYMB_6 ListTTypeSegment 
            {
              ABS.Absyn.ListTTypeSegment RESULT =null;
		ABS.Absyn.TTypeSegment p_1 = (ABS.Absyn.TTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListTTypeSegment p_3 = (ABS.Absyn.ListTTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTTypeSegment",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListDecl ::= 
            {
              ABS.Absyn.ListDecl RESULT =null;
		 RESULT = new ABS.Absyn.ListDecl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ListDecl ::= ListDecl Decl 
            {
              ABS.Absyn.ListDecl RESULT =null;
		ABS.Absyn.ListDecl p_1 = (ABS.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Decl p_2 = (ABS.Absyn.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Decl ::= _SYMB_66 UIdent _SYMB_7 Type _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Type p_4 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.TypeDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Decl ::= _SYMB_66 UIdent _SYMB_4 ListUIdent _SYMB_5 _SYMB_7 Type _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListUIdent p_4 = (ABS.Absyn.ListUIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.Type p_7 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.TypeParDecl(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Decl ::= _SYMB_39 ConstrIdent _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		ABS.Absyn.ConstrIdent p_2 = (ABS.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ExceptionDecl(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Decl ::= _SYMB_36 UIdent _SYMB_7 ListConstrIdent _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListConstrIdent p_4 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.DataDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Decl ::= _SYMB_36 UIdent _SYMB_4 ListUIdent _SYMB_5 _SYMB_7 ListConstrIdent _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListUIdent p_4 = (ABS.Absyn.ListUIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.ListConstrIdent p_7 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.DataParDecl(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Decl ::= _SYMB_37 Type LIdent _SYMB_8 ListParam _SYMB_9 _SYMB_7 FunBody _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListParam p_5 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.FunBody p_8 = (ABS.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FunDecl(p_2,p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Decl ::= _SYMB_37 Type LIdent _SYMB_4 ListUIdent _SYMB_5 _SYMB_8 ListParam _SYMB_9 _SYMB_7 FunBody _SYMB_1 
            {
              ABS.Absyn.Decl RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		ABS.Absyn.ListUIdent p_5 = (ABS.Absyn.ListUIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		ABS.Absyn.ListParam p_8 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.FunBody p_11 = (ABS.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FunParDecl(p_2,p_3,p_5,p_8,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Decl ::= _SYMB_50 UIdent _SYMB_11 ListMethSignat _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListMethSignat p_4 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.InterfDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Decl ::= _SYMB_50 UIdent _SYMB_41 ListQType _SYMB_11 ListMethSignat _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListQType p_4 = (ABS.Absyn.ListQType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListMethSignat p_6 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ExtendsDecl(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Decl ::= _SYMB_35 UIdent _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_4 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_5 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_6 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassDecl(p_2,p_4,p_5,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Decl ::= _SYMB_35 UIdent _SYMB_8 ListParam _SYMB_9 _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		ABS.Absyn.ListClassBody p_7 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_8 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_9 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassParamDecl(p_2,p_4,p_7,p_8,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Decl ::= _SYMB_35 UIdent _SYMB_47 ListQType _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		ABS.Absyn.ListQType p_4 = (ABS.Absyn.ListQType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_6 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_7 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_8 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassImplements(p_2,p_4,p_6,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Decl ::= _SYMB_35 UIdent _SYMB_8 ListParam _SYMB_9 _SYMB_47 ListQType _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              ABS.Absyn.Decl RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ABS.Absyn.ListQType p_7 = (ABS.Absyn.ListQType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListClassBody p_9 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.MaybeBlock p_10 = (ABS.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListClassBody p_11 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ClassParamImplements(p_2,p_4,p_7,p_9,p_10,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ConstrIdent ::= UIdent 
            {
              ABS.Absyn.ConstrIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SinglConstrIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ConstrIdent ::= UIdent _SYMB_8 ListConstrType _SYMB_9 
            {
              ABS.Absyn.ConstrIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListConstrType p_3 = (ABS.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ParamConstrIdent(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ConstrType ::= Type 
            {
              ABS.Absyn.ConstrType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EmptyConstrType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ConstrType ::= Type LIdent 
            {
              ABS.Absyn.ConstrType RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.RecordConstrType(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListConstrType ::= 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		 RESULT = new ABS.Absyn.ListConstrType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListConstrType ::= ConstrType 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		ABS.Absyn.ConstrType p_1 = (ABS.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListConstrType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListConstrType ::= ConstrType _SYMB_0 ListConstrType 
            {
              ABS.Absyn.ListConstrType RESULT =null;
		ABS.Absyn.ConstrType p_1 = (ABS.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListConstrType p_3 = (ABS.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListUIdent ::= UIdent 
            {
              ABS.Absyn.ListUIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListUIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListUIdent",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListUIdent ::= UIdent _SYMB_0 ListUIdent 
            {
              ABS.Absyn.ListUIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListUIdent p_3 = (ABS.Absyn.ListUIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListUIdent",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListConstrIdent ::= ConstrIdent 
            {
              ABS.Absyn.ListConstrIdent RESULT =null;
		ABS.Absyn.ConstrIdent p_1 = (ABS.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListConstrIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListConstrIdent ::= ConstrIdent _SYMB_10 ListConstrIdent 
            {
              ABS.Absyn.ListConstrIdent RESULT =null;
		ABS.Absyn.ConstrIdent p_1 = (ABS.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListConstrIdent p_3 = (ABS.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FunBody ::= _SYMB_32 
            {
              ABS.Absyn.FunBody RESULT =null;
		 RESULT = new ABS.Absyn.BuiltinFunBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FunBody ::= PureExp 
            {
              ABS.Absyn.FunBody RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.NormalFunBody(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MethSignat ::= Type LIdent _SYMB_8 ListParam _SYMB_9 
            {
              ABS.Absyn.MethSignat RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.MethSig(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethSignat",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListMethSignat ::= 
            {
              ABS.Absyn.ListMethSignat RESULT =null;
		 RESULT = new ABS.Absyn.ListMethSignat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSignat",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListMethSignat ::= ListMethSignat MethSignat _SYMB_1 
            {
              ABS.Absyn.ListMethSignat RESULT =null;
		ABS.Absyn.ListMethSignat p_1 = (ABS.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.MethSignat p_2 = (ABS.Absyn.MethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSignat",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ClassBody ::= Type LIdent _SYMB_1 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldClassBody(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ClassBody ::= Type LIdent _SYMB_7 PureExp _SYMB_1 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.PureExp p_4 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldAssignClassBody(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ClassBody ::= Type LIdent _SYMB_8 ListParam _SYMB_9 Block 
            {
              ABS.Absyn.ClassBody RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.ListParam p_4 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Block p_6 = (ABS.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.MethClassBody(p_1,p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListClassBody ::= 
            {
              ABS.Absyn.ListClassBody RESULT =null;
		 RESULT = new ABS.Absyn.ListClassBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListClassBody ::= ListClassBody ClassBody 
            {
              ABS.Absyn.ListClassBody RESULT =null;
		ABS.Absyn.ListClassBody p_1 = (ABS.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.ClassBody p_2 = (ABS.Absyn.ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Block ::= _SYMB_11 ListStm _SYMB_12 
            {
              ABS.Absyn.Block RESULT =null;
		ABS.Absyn.ListStm p_2 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Bloc(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MaybeBlock ::= Block 
            {
              ABS.Absyn.MaybeBlock RESULT =null;
		ABS.Absyn.Block p_1 = (ABS.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.JustBlock(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MaybeBlock ::= 
            {
              ABS.Absyn.MaybeBlock RESULT =null;
		 RESULT = new ABS.Absyn.NoBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListParam ::= 
            {
              ABS.Absyn.ListParam RESULT =null;
		 RESULT = new ABS.Absyn.ListParam(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ListParam ::= Param 
            {
              ABS.Absyn.ListParam RESULT =null;
		ABS.Absyn.Param p_1 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListParam(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ListParam ::= Param _SYMB_0 ListParam 
            {
              ABS.Absyn.ListParam RESULT =null;
		ABS.Absyn.Param p_1 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListParam p_3 = (ABS.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Param ::= Type LIdent 
            {
              ABS.Absyn.Param RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Par(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Param",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListStm ::= 
            {
              ABS.Absyn.ListStm RESULT =null;
		 RESULT = new ABS.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListStm ::= ListStm Stm 
            {
              ABS.Absyn.ListStm RESULT =null;
		ABS.Absyn.ListStm p_1 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Stm p_2 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Stm ::= Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Exp p_1 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Stm ::= _SYMB_11 ListStm _SYMB_12 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.ListStm p_2 = (ABS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Stm ::= _SYMB_67 _SYMB_8 PureExp _SYMB_9 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stm ::= _SYMB_57 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Exp p_2 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SReturn(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stm ::= LIdent _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_3 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stm ::= _SYMB_62 _SYMB_6 LIdent _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_5 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SFieldAss(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stm ::= Type LIdent _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SDec(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stm ::= Type LIdent _SYMB_7 Exp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Type p_1 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.Exp p_4 = (ABS.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SDecAss(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stm ::= _SYMB_46 _SYMB_8 PureExp _SYMB_9 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SIf(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stm ::= _SYMB_46 _SYMB_8 PureExp _SYMB_9 Stm _SYMB_38 Stm 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.Stm p_5 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_7 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stm ::= _SYMB_60 _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		 RESULT = new ABS.Absyn.SSuspend(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stm ::= _SYMB_58 _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		 RESULT = new ABS.Absyn.SSkip(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stm ::= _SYMB_30 PureExp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAssert(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stm ::= _SYMB_31 Guard _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Guard p_2 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SAwait(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Stm ::= _SYMB_64 PureExp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SThrow(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Stm ::= _SYMB_65 Stm _SYMB_34 _SYMB_11 ListCatchBranch _SYMB_12 MaybeFinally 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.Stm p_2 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.ListCatchBranch p_5 = (ABS.Absyn.ListCatchBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.MaybeFinally p_7 = (ABS.Absyn.MaybeFinally)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.STryCatchFinally(p_2,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Stm ::= _SYMB_56 PureExp _SYMB_1 
            {
              ABS.Absyn.Stm RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SPrint(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CatchBranch ::= Pattern _SYMB_13 Stm 
            {
              ABS.Absyn.CatchBranch RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Stm p_3 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.CatchBranc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CatchBranch",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ListCatchBranch ::= 
            {
              ABS.Absyn.ListCatchBranch RESULT =null;
		 RESULT = new ABS.Absyn.ListCatchBranch(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCatchBranch",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ListCatchBranch ::= ListCatchBranch CatchBranch 
            {
              ABS.Absyn.ListCatchBranch RESULT =null;
		ABS.Absyn.ListCatchBranch p_1 = (ABS.Absyn.ListCatchBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.CatchBranch p_2 = (ABS.Absyn.CatchBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCatchBranch",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MaybeFinally ::= _SYMB_43 Stm 
            {
              ABS.Absyn.MaybeFinally RESULT =null;
		ABS.Absyn.Stm p_2 = (ABS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.JustFinally(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeFinally",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MaybeFinally ::= 
            {
              ABS.Absyn.MaybeFinally RESULT =null;
		 RESULT = new ABS.Absyn.NoFinally(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeFinally",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Guard ::= LIdent _SYMB_14 
            {
              ABS.Absyn.Guard RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.VarGuard(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Guard ::= _SYMB_62 _SYMB_6 LIdent _SYMB_14 
            {
              ABS.Absyn.Guard RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.FieldGuard(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Guard ::= PureExp 
            {
              ABS.Absyn.Guard RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpGuard(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Guard ::= Guard _SYMB_15 Guard 
            {
              ABS.Absyn.Guard RESULT =null;
		ABS.Absyn.Guard p_1 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.Guard p_3 = (ABS.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AndGuard(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Exp ::= PureExp 
            {
              ABS.Absyn.Exp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpP(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Exp ::= EffExp 
            {
              ABS.Absyn.Exp RESULT =null;
		ABS.Absyn.EffExp p_1 = (ABS.Absyn.EffExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ExpE(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ListPureExp ::= 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		 RESULT = new ABS.Absyn.ListPureExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ListPureExp ::= PureExp 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListPureExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ListPureExp ::= PureExp _SYMB_0 ListPureExp 
            {
              ABS.Absyn.ListPureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PureExp ::= PureExp _SYMB_16 PureExp1 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PureExp ::= PureExp1 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PureExp ::= _SYMB_51 _SYMB_8 Param _SYMB_9 _SYMB_7 PureExp _SYMB_49 PureExp 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Param p_3 = (ABS.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.PureExp p_6 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_8 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.Let(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PureExp ::= _SYMB_46 PureExp _SYMB_61 PureExp _SYMB_38 PureExp 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ABS.Absyn.PureExp p_4 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_6 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PureExp ::= _SYMB_33 PureExp _SYMB_11 ListCaseBranch _SYMB_12 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListCaseBranch p_4 = (ABS.Absyn.ListCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Case(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PureExp1 ::= PureExp1 _SYMB_17 PureExp2 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PureExp1 ::= PureExp2 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PureExp2 ::= PureExp2 _SYMB_18 PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PureExp2 ::= PureExp2 _SYMB_19 PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ENeq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PureExp2 ::= PureExp3 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PureExp3 ::= PureExp3 _SYMB_4 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PureExp3 ::= PureExp3 _SYMB_20 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PureExp3 ::= PureExp3 _SYMB_5 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EGt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PureExp3 ::= PureExp3 _SYMB_21 PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EGe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PureExp3 ::= PureExp4 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PureExp4 ::= PureExp4 _SYMB_22 PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PureExp4 ::= PureExp4 _SYMB_23 PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PureExp4 ::= PureExp5 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PureExp5 ::= PureExp5 _SYMB_2 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PureExp5 ::= PureExp5 _SYMB_24 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PureExp5 ::= PureExp5 _SYMB_25 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EMod(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PureExp5 ::= PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PureExp6 ::= _SYMB_26 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELogNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PureExp6 ::= _SYMB_23 PureExp6 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EIntNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PureExp6 ::= PureExp7 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PureExp7 ::= LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PureExp7 ::= TType LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.TType p_1 = (ABS.Absyn.TType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_4 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EQualFunCall(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PureExp7 ::= LIdent _SYMB_27 ListPureExp _SYMB_28 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ENaryFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PureExp7 ::= TType LIdent _SYMB_27 ListPureExp _SYMB_28 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.TType p_1 = (ABS.Absyn.TType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_4 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ENaryQualFunCall(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PureExp7 ::= LIdent 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PureExp7 ::= _SYMB_62 _SYMB_6 LIdent 
            {
              ABS.Absyn.PureExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EThis(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PureExp7 ::= TType LIdent 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.TType p_1 = (ABS.Absyn.TType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.EQualVar(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PureExp7 ::= QType 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QType p_1 = (ABS.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ESinglConstr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PureExp7 ::= QType _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.QType p_1 = (ABS.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_3 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.EParamConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PureExp7 ::= Literal 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.Literal p_1 = (ABS.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ELit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PureExp7 ::= _SYMB_8 PureExp _SYMB_9 
            {
              ABS.Absyn.PureExp RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CaseBranch ::= Pattern _SYMB_13 PureExp 
            {
              ABS.Absyn.CaseBranch RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.PureExp p_3 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.CaseBranc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseBranch",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ListCaseBranch ::= CaseBranch _SYMB_1 
            {
              ABS.Absyn.ListCaseBranch RESULT =null;
		ABS.Absyn.CaseBranch p_1 = (ABS.Absyn.CaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ListCaseBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCaseBranch",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ListCaseBranch ::= CaseBranch _SYMB_1 ListCaseBranch 
            {
              ABS.Absyn.ListCaseBranch RESULT =null;
		ABS.Absyn.CaseBranch p_1 = (ABS.Absyn.CaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListCaseBranch p_3 = (ABS.Absyn.ListCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCaseBranch",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ListPattern ::= 
            {
              ABS.Absyn.ListPattern RESULT =null;
		 RESULT = new ABS.Absyn.ListPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ListPattern ::= Pattern 
            {
              ABS.Absyn.ListPattern RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ListPattern ::= Pattern _SYMB_0 ListPattern 
            {
              ABS.Absyn.ListPattern RESULT =null;
		ABS.Absyn.Pattern p_1 = (ABS.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListPattern p_3 = (ABS.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Pattern ::= LIdent 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.PIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",54, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Pattern ::= Literal 
            {
              ABS.Absyn.Pattern RESULT =null;
		ABS.Absyn.Literal p_1 = (ABS.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.PLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",54, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Pattern ::= UIdent 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.PSinglConstr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",54, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Pattern ::= UIdent _SYMB_8 ListPattern _SYMB_9 
            {
              ABS.Absyn.Pattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPattern p_3 = (ABS.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.PParamConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",54, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Pattern ::= _SYMB_3 
            {
              ABS.Absyn.Pattern RESULT =null;
		 RESULT = new ABS.Absyn.PUnderscore(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",54, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Literal ::= _SYMB_55 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LNull(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Literal ::= _SYMB_62 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LThis(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Literal ::= _SYMB_63 
            {
              ABS.Absyn.Literal RESULT =null;
		 RESULT = new ABS.Absyn.LThisDC(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Literal ::= _STRING_ 
            {
              ABS.Absyn.Literal RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.LStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Literal ::= _INTEGER_ 
            {
              ABS.Absyn.Literal RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.LInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EffExp ::= _SYMB_54 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_4 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.New(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EffExp ::= _SYMB_54 _SYMB_52 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.Type p_3 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.NewLocal(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EffExp ::= PureExp _SYMB_6 LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EffExp ::= _SYMB_62 _SYMB_6 LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ThisSyncMethCall(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EffExp ::= PureExp _SYMB_29 LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.AsyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EffExp ::= _SYMB_62 _SYMB_29 LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.ThisAsyncMethCall(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EffExp ::= PureExp _SYMB_6 _SYMB_45 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ABS.Absyn.Get(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EffExp ::= PureExp _SYMB_59 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              ABS.Absyn.EffExp RESULT =null;
		ABS.Absyn.PureExp p_1 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ABS.Absyn.Type p_3 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ABS.Absyn.ListPureExp p_5 = (ABS.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.Spawns(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Ann ::= _SYMB_27 PureExp _SYMB_28 
            {
              ABS.Absyn.Ann RESULT =null;
		ABS.Absyn.PureExp p_2 = (ABS.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ABS.Absyn.SimpleAnn(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ann",57, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ListAnn ::= 
            {
              ABS.Absyn.ListAnn RESULT =null;
		 RESULT = new ABS.Absyn.ListAnn(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnn",58, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ListAnn ::= ListAnn Ann 
            {
              ABS.Absyn.ListAnn RESULT =null;
		ABS.Absyn.ListAnn p_1 = (ABS.Absyn.ListAnn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Ann p_2 = (ABS.Absyn.Ann)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnn",58, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // AnnDecl ::= ListAnn Decl 
            {
              ABS.Absyn.AnnDecl RESULT =null;
		ABS.Absyn.ListAnn p_1 = (ABS.Absyn.ListAnn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Decl p_2 = (ABS.Absyn.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnnDec(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnnDecl",59, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ListAnnDecl ::= 
            {
              ABS.Absyn.ListAnnDecl RESULT =null;
		 RESULT = new ABS.Absyn.ListAnnDecl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnDecl",60, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ListAnnDecl ::= ListAnnDecl AnnDecl 
            {
              ABS.Absyn.ListAnnDecl RESULT =null;
		ABS.Absyn.ListAnnDecl p_1 = (ABS.Absyn.ListAnnDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.AnnDecl p_2 = (ABS.Absyn.AnnDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnDecl",60, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // AnnType ::= ListAnn Type 
            {
              ABS.Absyn.AnnType RESULT =null;
		ABS.Absyn.ListAnn p_1 = (ABS.Absyn.ListAnn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ABS.Absyn.Type p_2 = (ABS.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.AnnTyp(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnnType",61, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ListAnnType ::= 
            {
              ABS.Absyn.ListAnnType RESULT =null;
		 RESULT = new ABS.Absyn.ListAnnType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnType",62, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ListAnnType ::= AnnType 
            {
              ABS.Absyn.ListAnnType RESULT =null;
		ABS.Absyn.AnnType p_1 = (ABS.Absyn.AnnType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ABS.Absyn.ListAnnType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnType",62, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ListAnnType ::= AnnType _SYMB_0 ListAnnType 
            {
              ABS.Absyn.ListAnnType RESULT =null;
		ABS.Absyn.AnnType p_1 = (ABS.Absyn.AnnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ABS.Absyn.ListAnnType p_3 = (ABS.Absyn.ListAnnType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnType",62, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

