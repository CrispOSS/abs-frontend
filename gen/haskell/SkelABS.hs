module SkelABS where

-- Haskell module generated by the BNF converter

import AbsABS
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transTypeIdent :: TypeIdent -> Result
transTypeIdent x = case x of
  TypeIdent str  -> failure x


transAnyIdent :: AnyIdent -> Result
transAnyIdent x = case x of
  AnyIden id  -> failure x
  AnyTyIden typeident  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Prog modules  -> failure x


transModule :: Module -> Result
transModule x = case x of
  Modul qualtype exports imports decls maybeblock  -> failure x


transExport :: Export -> Result
transExport x = case x of
  AnyExport anyidents  -> failure x
  AnyFromExport anyidents qualtype  -> failure x
  StarExport  -> failure x
  StarFromExport qualtype  -> failure x


transImport :: Import -> Result
transImport x = case x of
  AnyImport importtype qualtype anyident  -> failure x
  AnyFromImport importtype anyidents qualtype  -> failure x
  StarFromImport importtype qualtype  -> failure x


transImportType :: ImportType -> Result
transImportType x = case x of
  ForeignImport  -> failure x
  NormalImport  -> failure x


transType :: Type -> Result
transType x = case x of
  TUnderscore  -> failure x
  TSimple qualtype  -> failure x
  TGen qualtype types  -> failure x


transQualType :: QualType -> Result
transQualType x = case x of
  QType qualtypesegments  -> failure x


transQualTypeSegment :: QualTypeSegment -> Result
transQualTypeSegment x = case x of
  QTypeSegment typeident  -> failure x


transDecl :: Decl -> Result
transDecl x = case x of
  TypeDecl typeident type'  -> failure x
  ExceptionDecl constrident  -> failure x
  DataDecl typeident constridents  -> failure x
  DataParDecl typeident typeidents constridents  -> failure x
  FunDecl type' id params funbody  -> failure x
  FunParDecl type' id typeidents params funbody  -> failure x
  InterfDecl typeident methsignats  -> failure x
  ExtendsDecl typeident qualtypes methsignats  -> failure x
  ClassDecl typeident classbodys1 maybeblock2 classbodys3  -> failure x
  ClassParamDecl typeident params classbodys1 maybeblock2 classbodys3  -> failure x
  ClassImplements typeident qualtypes classbodys1 maybeblock2 classbodys3  -> failure x
  ClassParamImplements typeident params qualtypes classbodys1 maybeblock2 classbodys3  -> failure x


transConstrIdent :: ConstrIdent -> Result
transConstrIdent x = case x of
  SinglConstrIdent typeident  -> failure x
  ParamConstrIdent typeident constrtypes  -> failure x


transConstrType :: ConstrType -> Result
transConstrType x = case x of
  EmptyConstrType type'  -> failure x
  RecordConstrType type' id  -> failure x


transFunBody :: FunBody -> Result
transFunBody x = case x of
  BuiltinFunBody  -> failure x
  NormalFunBody pureexp  -> failure x


transMethSignat :: MethSignat -> Result
transMethSignat x = case x of
  MethSig type' id params  -> failure x


transClassBody :: ClassBody -> Result
transClassBody x = case x of
  FieldClassBody type' id  -> failure x
  FieldAssignClassBody type' id pureexp  -> failure x
  MethClassBody type' id params block  -> failure x


transBlock :: Block -> Result
transBlock x = case x of
  Bloc stms  -> failure x


transMaybeBlock :: MaybeBlock -> Result
transMaybeBlock x = case x of
  JustBlock block  -> failure x
  NoBlock  -> failure x


transParam :: Param -> Result
transParam x = case x of
  Par type' id  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  SExp exp  -> failure x
  SBlock stms  -> failure x
  SWhile pureexp stm  -> failure x
  SReturn exp  -> failure x
  SAss id exp  -> failure x
  SFieldAss id exp  -> failure x
  SDec type' id  -> failure x
  SDecAss type' id exp  -> failure x
  SIf pureexp stm  -> failure x
  SIfElse pureexp stm1 stm2  -> failure x
  SSuspend  -> failure x
  SSkip  -> failure x
  SAssert pureexp  -> failure x
  SAwait guard  -> failure x
  SThrow pureexp  -> failure x
  STryCatchFinally stm catchbranchs maybefinally  -> failure x
  SPrint pureexp  -> failure x


transCatchBranch :: CatchBranch -> Result
transCatchBranch x = case x of
  CatchBranc pattern stm  -> failure x


transMaybeFinally :: MaybeFinally -> Result
transMaybeFinally x = case x of
  JustFinally stm  -> failure x
  NoFinally  -> failure x


transGuard :: Guard -> Result
transGuard x = case x of
  VarGuard id  -> failure x
  FieldGuard id  -> failure x
  ExpGuard pureexp  -> failure x
  AndGuard guard1 guard2  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  ExpP pureexp  -> failure x
  ExpE effexp  -> failure x


transPureExp :: PureExp -> Result
transPureExp x = case x of
  EOr pureexp1 pureexp2  -> failure x
  EAnd pureexp1 pureexp2  -> failure x
  EEq pureexp1 pureexp2  -> failure x
  ENeq pureexp1 pureexp2  -> failure x
  ELt pureexp1 pureexp2  -> failure x
  ELe pureexp1 pureexp2  -> failure x
  EGt pureexp1 pureexp2  -> failure x
  EGe pureexp1 pureexp2  -> failure x
  EAdd pureexp1 pureexp2  -> failure x
  ESub pureexp1 pureexp2  -> failure x
  EMul pureexp1 pureexp2  -> failure x
  EDiv pureexp1 pureexp2  -> failure x
  EMod pureexp1 pureexp2  -> failure x
  ELogNeg pureexp  -> failure x
  EIntNeg pureexp  -> failure x
  EFunCall id pureexps  -> failure x
  EQualFunCall qualtype id pureexps  -> failure x
  ENaryFunCall id pureexps  -> failure x
  ENaryQualFunCall qualtype id pureexps  -> failure x
  EVar id  -> failure x
  EThis id  -> failure x
  EQualVar qualtype id  -> failure x
  ESinglConstr qualtype  -> failure x
  EParamConstr qualtype pureexps  -> failure x
  ELit literal  -> failure x
  Let param pureexp1 pureexp2  -> failure x
  If pureexp1 pureexp2 pureexp3  -> failure x
  Case pureexp casebranchs  -> failure x


transCaseBranch :: CaseBranch -> Result
transCaseBranch x = case x of
  CaseBranc pattern pureexp  -> failure x


transPattern :: Pattern -> Result
transPattern x = case x of
  PIdent id  -> failure x
  PLit literal  -> failure x
  PSinglConstr typeident  -> failure x
  PParamConstr typeident patterns  -> failure x
  PUnderscore  -> failure x


transLiteral :: Literal -> Result
transLiteral x = case x of
  LNull  -> failure x
  LThis  -> failure x
  LThisDC  -> failure x
  LStr str  -> failure x
  LInt n  -> failure x


transEffExp :: EffExp -> Result
transEffExp x = case x of
  New type' pureexps  -> failure x
  NewLocal type' pureexps  -> failure x
  SyncMethCall pureexp id pureexps  -> failure x
  ThisSyncMethCall id pureexps  -> failure x
  AsyncMethCall pureexp id pureexps  -> failure x
  ThisAsyncMethCall id pureexps  -> failure x
  Get pureexp  -> failure x
  Spawns pureexp type' pureexps  -> failure x



